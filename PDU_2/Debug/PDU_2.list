
PDU_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800d020  0800d020  0000e020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d660  0800d660  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d660  0800d660  0000e660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d668  0800d668  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d668  0800d668  0000e668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d66c  0800d66c  0000e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d670  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b00  200001d4  0800d844  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007cd4  0800d844  0000fcd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae3a  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000493b  00000000  00000000  0002a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe6  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec64  00000000  00000000  00030e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe0d  00000000  00000000  0005fada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102189  00000000  00000000  0007f8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  00181ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00187f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d004 	.word	0x0800d004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800d004 	.word	0x0800d004

080001d0 <OS_CPU_FP_Reg_Push>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 80001d0:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 80001d4:	b121      	cbz	r1, 80001e0 <OS_CPU_FP_nosave>

    VSTMDB  R0!, {S16-S31}
 80001d6:	ed20 8a10 	vstmdb	r0!, {s16-s31}
    LDR     R1, =OSTCBCur
 80001da:	4951      	ldr	r1, [pc, #324]	@ (8000320 <OS_CPU_PendSVHandler+0x7a>)
    LDR     R2, [R1]
 80001dc:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001de:	6010      	str	r0, [r2, #0]

080001e0 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 80001e0:	4770      	bx	lr

080001e2 <OS_CPU_FP_Reg_Pop>:

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))

.thumb_func
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S16-S31}
 80001e2:	ecb0 8a10 	vldmia	r0!, {s16-s31}
    LDR     R1, =OSTCBHighRdy
 80001e6:	494f      	ldr	r1, [pc, #316]	@ (8000324 <OS_CPU_PendSVHandler+0x7e>)
    LDR     R2, [R1]
 80001e8:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 80001ea:	6010      	str	r0, [r2, #0]
    BX      LR
 80001ec:	4770      	bx	lr

080001ee <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001ee:	b672      	cpsid	i
    PUSH   {R1}
 80001f0:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001f2:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001f6:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001fa:	f3bf 8f4f 	dsb	sy
    ISB
 80001fe:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 8000202:	4608      	mov	r0, r1
    POP    {R1}
 8000204:	bc02      	pop	{r1}
    CPSIE   I
 8000206:	b662      	cpsie	i
    BX      LR
 8000208:	4770      	bx	lr

0800020a <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 800020a:	b672      	cpsid	i
    MSR     BASEPRI, R0
 800020c:	f380 8811 	msr	BASEPRI, r0
    DSB
 8000210:	f3bf 8f4f 	dsb	sy
    ISB
 8000214:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000218:	b662      	cpsie	i
    BX      LR
 800021a:	4770      	bx	lr

0800021c <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 800021c:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800021e:	f64e 5022 	movw	r0, #60706	@ 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000222:	f2ce 0000 	movt	r0, #57344	@ 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000226:	f240 01ff 	movw	r1, #255	@ 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800022a:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800022e:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 8000230:	2000      	movs	r0, #0
    MSR     PSP, R0
 8000232:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000236:	f246 7058 	movw	r0, #26456	@ 0x6758
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800023a:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    LDR     R1, [R0]
 800023e:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000240:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000244:	f007 fbc0 	bl	80079c8 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000248:	4837      	ldr	r0, [pc, #220]	@ (8000328 <OS_CPU_PendSVHandler+0x82>)
    MOVS    R1, #1
 800024a:	2101      	movs	r1, #1
    STRB    R1, [R0]
 800024c:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800024e:	f646 20c2 	movw	r0, #27330	@ 0x6ac2
    MOVT    R0, #:upper16:OSPrioCur
 8000252:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000256:	f646 21c3 	movw	r1, #27331	@ 0x6ac3
    MOVT    R1, #:upper16:OSPrioHighRdy
 800025a:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 800025e:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000260:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000262:	f646 40d8 	movw	r0, #27864	@ 0x6cd8
    MOVT    R0, #:upper16:OSTCBCur
 8000266:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 800026a:	f646 41e0 	movw	r1, #27872	@ 0x6ce0
    MOVT    R1, #:upper16:OSTCBHighRdy
 800026e:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 8000272:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000274:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000276:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000278:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800027c:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000280:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000284:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 8000288:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800028c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000290:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000292:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000296:	bc06      	pop	{r1, r2}
    CPSIE    I
 8000298:	b662      	cpsie	i
    BX       R1
 800029a:	4708      	bx	r1

0800029c <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800029c:	4823      	ldr	r0, [pc, #140]	@ (800032c <OS_CPU_PendSVHandler+0x86>)
    LDR     R1, =NVIC_PENDSVSET
 800029e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
    STR     R1, [R0]
 80002a2:	6001      	str	r1, [r0, #0]
    BX      LR
 80002a4:	4770      	bx	lr

080002a6 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 80002a6:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 80002a8:	f246 7260 	movw	r2, #26464	@ 0x6760
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 80002ac:	f2c2 0200 	movt	r2, #8192	@ 0x2000
    LDR     R1, [R2]
 80002b0:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 80002b2:	f381 8811 	msr	BASEPRI, r1
    DSB
 80002b6:	f3bf 8f4f 	dsb	sy
    ISB
 80002ba:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80002be:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002c0:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 80002c4:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 80002c8:	f646 45d8 	movw	r5, #27864	@ 0x6cd8
    MOVT    R5, #:upper16:OSTCBCur
 80002cc:	f2c2 0500 	movt	r5, #8192	@ 0x2000
    LDR     R1, [R5]
 80002d0:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 80002d2:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002d4:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80002d6:	f007 fb77 	bl	80079c8 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002da:	f646 20c2 	movw	r0, #27330	@ 0x6ac2
    MOVT    R0, #:upper16:OSPrioCur
 80002de:	f2c2 0000 	movt	r0, #8192	@ 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002e2:	f646 21c3 	movw	r1, #27331	@ 0x6ac3
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002e6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDRB    R2, [R1]
 80002ea:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002ec:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002ee:	f646 41e0 	movw	r1, #27872	@ 0x6ce0
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002f2:	f2c2 0100 	movt	r1, #8192	@ 0x2000
    LDR     R2, [R1]
 80002f6:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002f8:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002fa:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002fe:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 8000300:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000304:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 8000308:	f04f 0200 	mov.w	r2, #0
    CPSID   I
 800030c:	b672      	cpsid	i
    MSR     BASEPRI, R2
 800030e:	f382 8811 	msr	BASEPRI, r2
    DSB
 8000312:	f3bf 8f4f 	dsb	sy
    ISB
 8000316:	f3bf 8f6f 	isb	sy
    CPSIE   I
 800031a:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800031c:	4770      	bx	lr
 800031e:	0000      	.short	0x0000
    LDR     R1, =OSTCBCur
 8000320:	20006cd8 	.word	0x20006cd8
    LDR     R1, =OSTCBHighRdy
 8000324:	20006ce0 	.word	0x20006ce0
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000328:	20006ad0 	.word	0x20006ad0
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800032c:	e000ed04 	.word	0xe000ed04

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_dmul>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800075e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000766:	bf1d      	ittte	ne
 8000768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800076c:	ea94 0f0c 	teqne	r4, ip
 8000770:	ea95 0f0c 	teqne	r5, ip
 8000774:	f000 f8de 	bleq	8000934 <__aeabi_dmul+0x1dc>
 8000778:	442c      	add	r4, r5
 800077a:	ea81 0603 	eor.w	r6, r1, r3
 800077e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000782:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000786:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800078a:	bf18      	it	ne
 800078c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000790:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000798:	d038      	beq.n	800080c <__aeabi_dmul+0xb4>
 800079a:	fba0 ce02 	umull	ip, lr, r0, r2
 800079e:	f04f 0500 	mov.w	r5, #0
 80007a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80007aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007ae:	f04f 0600 	mov.w	r6, #0
 80007b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007b6:	f09c 0f00 	teq	ip, #0
 80007ba:	bf18      	it	ne
 80007bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80007c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80007c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80007c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80007cc:	d204      	bcs.n	80007d8 <__aeabi_dmul+0x80>
 80007ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007d2:	416d      	adcs	r5, r5
 80007d4:	eb46 0606 	adc.w	r6, r6, r6
 80007d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007f0:	bf88      	it	hi
 80007f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007f6:	d81e      	bhi.n	8000836 <__aeabi_dmul+0xde>
 80007f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007fc:	bf08      	it	eq
 80007fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000802:	f150 0000 	adcs.w	r0, r0, #0
 8000806:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000810:	ea46 0101 	orr.w	r1, r6, r1
 8000814:	ea40 0002 	orr.w	r0, r0, r2
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000820:	bfc2      	ittt	gt
 8000822:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000826:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800082a:	bd70      	popgt	{r4, r5, r6, pc}
 800082c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000830:	f04f 0e00 	mov.w	lr, #0
 8000834:	3c01      	subs	r4, #1
 8000836:	f300 80ab 	bgt.w	8000990 <__aeabi_dmul+0x238>
 800083a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800083e:	bfde      	ittt	le
 8000840:	2000      	movle	r0, #0
 8000842:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000846:	bd70      	pople	{r4, r5, r6, pc}
 8000848:	f1c4 0400 	rsb	r4, r4, #0
 800084c:	3c20      	subs	r4, #32
 800084e:	da35      	bge.n	80008bc <__aeabi_dmul+0x164>
 8000850:	340c      	adds	r4, #12
 8000852:	dc1b      	bgt.n	800088c <__aeabi_dmul+0x134>
 8000854:	f104 0414 	add.w	r4, r4, #20
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f305 	lsl.w	r3, r0, r5
 8000860:	fa20 f004 	lsr.w	r0, r0, r4
 8000864:	fa01 f205 	lsl.w	r2, r1, r5
 8000868:	ea40 0002 	orr.w	r0, r0, r2
 800086c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000870:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000878:	fa21 f604 	lsr.w	r6, r1, r4
 800087c:	eb42 0106 	adc.w	r1, r2, r6
 8000880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000884:	bf08      	it	eq
 8000886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f1c4 040c 	rsb	r4, r4, #12
 8000890:	f1c4 0520 	rsb	r5, r4, #32
 8000894:	fa00 f304 	lsl.w	r3, r0, r4
 8000898:	fa20 f005 	lsr.w	r0, r0, r5
 800089c:	fa01 f204 	lsl.w	r2, r1, r4
 80008a0:	ea40 0002 	orr.w	r0, r0, r2
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008ac:	f141 0100 	adc.w	r1, r1, #0
 80008b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008b4:	bf08      	it	eq
 80008b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008ba:	bd70      	pop	{r4, r5, r6, pc}
 80008bc:	f1c4 0520 	rsb	r5, r4, #32
 80008c0:	fa00 f205 	lsl.w	r2, r0, r5
 80008c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80008c8:	fa20 f304 	lsr.w	r3, r0, r4
 80008cc:	fa01 f205 	lsl.w	r2, r1, r5
 80008d0:	ea43 0302 	orr.w	r3, r3, r2
 80008d4:	fa21 f004 	lsr.w	r0, r1, r4
 80008d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008dc:	fa21 f204 	lsr.w	r2, r1, r4
 80008e0:	ea20 0002 	bic.w	r0, r0, r2
 80008e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ec:	bf08      	it	eq
 80008ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f094 0f00 	teq	r4, #0
 80008f8:	d10f      	bne.n	800091a <__aeabi_dmul+0x1c2>
 80008fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008fe:	0040      	lsls	r0, r0, #1
 8000900:	eb41 0101 	adc.w	r1, r1, r1
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	bf08      	it	eq
 800090a:	3c01      	subeq	r4, #1
 800090c:	d0f7      	beq.n	80008fe <__aeabi_dmul+0x1a6>
 800090e:	ea41 0106 	orr.w	r1, r1, r6
 8000912:	f095 0f00 	teq	r5, #0
 8000916:	bf18      	it	ne
 8000918:	4770      	bxne	lr
 800091a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	eb43 0303 	adc.w	r3, r3, r3
 8000924:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000928:	bf08      	it	eq
 800092a:	3d01      	subeq	r5, #1
 800092c:	d0f7      	beq.n	800091e <__aeabi_dmul+0x1c6>
 800092e:	ea43 0306 	orr.w	r3, r3, r6
 8000932:	4770      	bx	lr
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093c:	bf18      	it	ne
 800093e:	ea95 0f0c 	teqne	r5, ip
 8000942:	d00c      	beq.n	800095e <__aeabi_dmul+0x206>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	d1d1      	bne.n	80008f4 <__aeabi_dmul+0x19c>
 8000950:	ea81 0103 	eor.w	r1, r1, r3
 8000954:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000958:	f04f 0000 	mov.w	r0, #0
 800095c:	bd70      	pop	{r4, r5, r6, pc}
 800095e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000962:	bf06      	itte	eq
 8000964:	4610      	moveq	r0, r2
 8000966:	4619      	moveq	r1, r3
 8000968:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096c:	d019      	beq.n	80009a2 <__aeabi_dmul+0x24a>
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	d102      	bne.n	800097a <__aeabi_dmul+0x222>
 8000974:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000978:	d113      	bne.n	80009a2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	d105      	bne.n	800098c <__aeabi_dmul+0x234>
 8000980:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000984:	bf1c      	itt	ne
 8000986:	4610      	movne	r0, r2
 8000988:	4619      	movne	r1, r3
 800098a:	d10a      	bne.n	80009a2 <__aeabi_dmul+0x24a>
 800098c:	ea81 0103 	eor.w	r1, r1, r3
 8000990:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000994:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000998:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	bd70      	pop	{r4, r5, r6, pc}
 80009a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80009a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80009aa:	bd70      	pop	{r4, r5, r6, pc}

080009ac <__aeabi_ddiv>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80009b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009ba:	bf1d      	ittte	ne
 80009bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009c0:	ea94 0f0c 	teqne	r4, ip
 80009c4:	ea95 0f0c 	teqne	r5, ip
 80009c8:	f000 f8a7 	bleq	8000b1a <__aeabi_ddiv+0x16e>
 80009cc:	eba4 0405 	sub.w	r4, r4, r5
 80009d0:	ea81 0e03 	eor.w	lr, r1, r3
 80009d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009dc:	f000 8088 	beq.w	8000af0 <__aeabi_ddiv+0x144>
 80009e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a00:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000a04:	429d      	cmp	r5, r3
 8000a06:	bf08      	it	eq
 8000a08:	4296      	cmpeq	r6, r2
 8000a0a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000a0e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000a12:	d202      	bcs.n	8000a1a <__aeabi_ddiv+0x6e>
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1a:	1ab6      	subs	r6, r6, r2
 8000a1c:	eb65 0503 	sbc.w	r5, r5, r3
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000a2a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000a2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a36:	bf22      	ittt	cs
 8000a38:	1ab6      	subcs	r6, r6, r2
 8000a3a:	4675      	movcs	r5, lr
 8000a3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a40:	085b      	lsrs	r3, r3, #1
 8000a42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a46:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a4e:	bf22      	ittt	cs
 8000a50:	1ab6      	subcs	r6, r6, r2
 8000a52:	4675      	movcs	r5, lr
 8000a54:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a66:	bf22      	ittt	cs
 8000a68:	1ab6      	subcs	r6, r6, r2
 8000a6a:	4675      	movcs	r5, lr
 8000a6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a7e:	bf22      	ittt	cs
 8000a80:	1ab6      	subcs	r6, r6, r2
 8000a82:	4675      	movcs	r5, lr
 8000a84:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a88:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a8c:	d018      	beq.n	8000ac0 <__aeabi_ddiv+0x114>
 8000a8e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a92:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a96:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a9a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a9e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aa2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000aa6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000aaa:	d1c0      	bne.n	8000a2e <__aeabi_ddiv+0x82>
 8000aac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ab0:	d10b      	bne.n	8000aca <__aeabi_ddiv+0x11e>
 8000ab2:	ea41 0100 	orr.w	r1, r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000abe:	e7b6      	b.n	8000a2e <__aeabi_ddiv+0x82>
 8000ac0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ac4:	bf04      	itt	eq
 8000ac6:	4301      	orreq	r1, r0
 8000ac8:	2000      	moveq	r0, #0
 8000aca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000ace:	bf88      	it	hi
 8000ad0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000ad4:	f63f aeaf 	bhi.w	8000836 <__aeabi_dmul+0xde>
 8000ad8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000adc:	bf04      	itt	eq
 8000ade:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ae6:	f150 0000 	adcs.w	r0, r0, #0
 8000aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
 8000af0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000af4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000af8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000afc:	bfc2      	ittt	gt
 8000afe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b06:	bd70      	popgt	{r4, r5, r6, pc}
 8000b08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0c:	f04f 0e00 	mov.w	lr, #0
 8000b10:	3c01      	subs	r4, #1
 8000b12:	e690      	b.n	8000836 <__aeabi_dmul+0xde>
 8000b14:	ea45 0e06 	orr.w	lr, r5, r6
 8000b18:	e68d      	b.n	8000836 <__aeabi_dmul+0xde>
 8000b1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b1e:	ea94 0f0c 	teq	r4, ip
 8000b22:	bf08      	it	eq
 8000b24:	ea95 0f0c 	teqeq	r5, ip
 8000b28:	f43f af3b 	beq.w	80009a2 <__aeabi_dmul+0x24a>
 8000b2c:	ea94 0f0c 	teq	r4, ip
 8000b30:	d10a      	bne.n	8000b48 <__aeabi_ddiv+0x19c>
 8000b32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b36:	f47f af34 	bne.w	80009a2 <__aeabi_dmul+0x24a>
 8000b3a:	ea95 0f0c 	teq	r5, ip
 8000b3e:	f47f af25 	bne.w	800098c <__aeabi_dmul+0x234>
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	e72c      	b.n	80009a2 <__aeabi_dmul+0x24a>
 8000b48:	ea95 0f0c 	teq	r5, ip
 8000b4c:	d106      	bne.n	8000b5c <__aeabi_ddiv+0x1b0>
 8000b4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b52:	f43f aefd 	beq.w	8000950 <__aeabi_dmul+0x1f8>
 8000b56:	4610      	mov	r0, r2
 8000b58:	4619      	mov	r1, r3
 8000b5a:	e722      	b.n	80009a2 <__aeabi_dmul+0x24a>
 8000b5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b66:	f47f aec5 	bne.w	80008f4 <__aeabi_dmul+0x19c>
 8000b6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b6e:	f47f af0d 	bne.w	800098c <__aeabi_dmul+0x234>
 8000b72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b76:	f47f aeeb 	bne.w	8000950 <__aeabi_dmul+0x1f8>
 8000b7a:	e712      	b.n	80009a2 <__aeabi_dmul+0x24a>

08000b7c <__gedf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpdf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__ledf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpdf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpdf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ba6:	d01b      	beq.n	8000be0 <__cmpdf2+0x54>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bae:	bf0c      	ite	eq
 8000bb0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bb4:	ea91 0f03 	teqne	r1, r3
 8000bb8:	bf02      	ittt	eq
 8000bba:	ea90 0f02 	teqeq	r0, r2
 8000bbe:	2000      	moveq	r0, #0
 8000bc0:	4770      	bxeq	lr
 8000bc2:	f110 0f00 	cmn.w	r0, #0
 8000bc6:	ea91 0f03 	teq	r1, r3
 8000bca:	bf58      	it	pl
 8000bcc:	4299      	cmppl	r1, r3
 8000bce:	bf08      	it	eq
 8000bd0:	4290      	cmpeq	r0, r2
 8000bd2:	bf2c      	ite	cs
 8000bd4:	17d8      	asrcs	r0, r3, #31
 8000bd6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bda:	f040 0001 	orr.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be8:	d102      	bne.n	8000bf0 <__cmpdf2+0x64>
 8000bea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bee:	d107      	bne.n	8000c00 <__cmpdf2+0x74>
 8000bf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf8:	d1d6      	bne.n	8000ba8 <__cmpdf2+0x1c>
 8000bfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfe:	d0d3      	beq.n	8000ba8 <__cmpdf2+0x1c>
 8000c00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_cdrcmple>:
 8000c08:	4684      	mov	ip, r0
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4662      	mov	r2, ip
 8000c0e:	468c      	mov	ip, r1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4663      	mov	r3, ip
 8000c14:	e000      	b.n	8000c18 <__aeabi_cdcmpeq>
 8000c16:	bf00      	nop

08000c18 <__aeabi_cdcmpeq>:
 8000c18:	b501      	push	{r0, lr}
 8000c1a:	f7ff ffb7 	bl	8000b8c <__cmpdf2>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	bf48      	it	mi
 8000c22:	f110 0f00 	cmnmi.w	r0, #0
 8000c26:	bd01      	pop	{r0, pc}

08000c28 <__aeabi_dcmpeq>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff fff4 	bl	8000c18 <__aeabi_cdcmpeq>
 8000c30:	bf0c      	ite	eq
 8000c32:	2001      	moveq	r0, #1
 8000c34:	2000      	movne	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmplt>:
 8000c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c40:	f7ff ffea 	bl	8000c18 <__aeabi_cdcmpeq>
 8000c44:	bf34      	ite	cc
 8000c46:	2001      	movcc	r0, #1
 8000c48:	2000      	movcs	r0, #0
 8000c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4e:	bf00      	nop

08000c50 <__aeabi_dcmple>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff ffe0 	bl	8000c18 <__aeabi_cdcmpeq>
 8000c58:	bf94      	ite	ls
 8000c5a:	2001      	movls	r0, #1
 8000c5c:	2000      	movhi	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_dcmpge>:
 8000c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c68:	f7ff ffce 	bl	8000c08 <__aeabi_cdrcmple>
 8000c6c:	bf94      	ite	ls
 8000c6e:	2001      	movls	r0, #1
 8000c70:	2000      	movhi	r0, #0
 8000c72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c76:	bf00      	nop

08000c78 <__aeabi_dcmpgt>:
 8000c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c7c:	f7ff ffc4 	bl	8000c08 <__aeabi_cdrcmple>
 8000c80:	bf34      	ite	cc
 8000c82:	2001      	movcc	r0, #1
 8000c84:	2000      	movcs	r0, #0
 8000c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8a:	bf00      	nop

08000c8c <__aeabi_dcmpun>:
 8000c8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c94:	d102      	bne.n	8000c9c <__aeabi_dcmpun+0x10>
 8000c96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c9a:	d10a      	bne.n	8000cb2 <__aeabi_dcmpun+0x26>
 8000c9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ca4:	d102      	bne.n	8000cac <__aeabi_dcmpun+0x20>
 8000ca6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_dcmpun+0x26>
 8000cac:	f04f 0000 	mov.w	r0, #0
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0001 	mov.w	r0, #1
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2iz>:
 8000cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cc0:	d215      	bcs.n	8000cee <__aeabi_d2iz+0x36>
 8000cc2:	d511      	bpl.n	8000ce8 <__aeabi_d2iz+0x30>
 8000cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ccc:	d912      	bls.n	8000cf4 <__aeabi_d2iz+0x3c>
 8000cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cde:	fa23 f002 	lsr.w	r0, r3, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cf2:	d105      	bne.n	8000d00 <__aeabi_d2iz+0x48>
 8000cf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cfe:	4770      	bx	lr
 8000d00:	f04f 0000 	mov.w	r0, #0
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_uldivmod>:
 8000da8:	b953      	cbnz	r3, 8000dc0 <__aeabi_uldivmod+0x18>
 8000daa:	b94a      	cbnz	r2, 8000dc0 <__aeabi_uldivmod+0x18>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	bf08      	it	eq
 8000db0:	2800      	cmpeq	r0, #0
 8000db2:	bf1c      	itt	ne
 8000db4:	f04f 31ff 	movne.w	r1, #4294967295
 8000db8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dbc:	f000 b96a 	b.w	8001094 <__aeabi_idiv0>
 8000dc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dc8:	f000 f806 	bl	8000dd8 <__udivmoddi4>
 8000dcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd4:	b004      	add	sp, #16
 8000dd6:	4770      	bx	lr

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	460c      	mov	r4, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14e      	bne.n	8000e82 <__udivmoddi4+0xaa>
 8000de4:	4694      	mov	ip, r2
 8000de6:	458c      	cmp	ip, r1
 8000de8:	4686      	mov	lr, r0
 8000dea:	fab2 f282 	clz	r2, r2
 8000dee:	d962      	bls.n	8000eb6 <__udivmoddi4+0xde>
 8000df0:	b14a      	cbz	r2, 8000e06 <__udivmoddi4+0x2e>
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	4091      	lsls	r1, r2
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	4319      	orrs	r1, r3
 8000e02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0a:	fa1f f68c 	uxth.w	r6, ip
 8000e0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e16:	fb07 1114 	mls	r1, r7, r4, r1
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb04 f106 	mul.w	r1, r4, r6
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d90a      	bls.n	8000e3c <__udivmoddi4+0x64>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e2e:	f080 8112 	bcs.w	8001056 <__udivmoddi4+0x27e>
 8000e32:	4299      	cmp	r1, r3
 8000e34:	f240 810f 	bls.w	8001056 <__udivmoddi4+0x27e>
 8000e38:	3c02      	subs	r4, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1a59      	subs	r1, r3, r1
 8000e3e:	fa1f f38e 	uxth.w	r3, lr
 8000e42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e46:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4e:	fb00 f606 	mul.w	r6, r0, r6
 8000e52:	429e      	cmp	r6, r3
 8000e54:	d90a      	bls.n	8000e6c <__udivmoddi4+0x94>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e5e:	f080 80fc 	bcs.w	800105a <__udivmoddi4+0x282>
 8000e62:	429e      	cmp	r6, r3
 8000e64:	f240 80f9 	bls.w	800105a <__udivmoddi4+0x282>
 8000e68:	4463      	add	r3, ip
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	1b9b      	subs	r3, r3, r6
 8000e6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e72:	2100      	movs	r1, #0
 8000e74:	b11d      	cbz	r5, 8000e7e <__udivmoddi4+0xa6>
 8000e76:	40d3      	lsrs	r3, r2
 8000e78:	2200      	movs	r2, #0
 8000e7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d905      	bls.n	8000e92 <__udivmoddi4+0xba>
 8000e86:	b10d      	cbz	r5, 8000e8c <__udivmoddi4+0xb4>
 8000e88:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e7f5      	b.n	8000e7e <__udivmoddi4+0xa6>
 8000e92:	fab3 f183 	clz	r1, r3
 8000e96:	2900      	cmp	r1, #0
 8000e98:	d146      	bne.n	8000f28 <__udivmoddi4+0x150>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0xcc>
 8000e9e:	4290      	cmp	r0, r2
 8000ea0:	f0c0 80f0 	bcc.w	8001084 <__udivmoddi4+0x2ac>
 8000ea4:	1a86      	subs	r6, r0, r2
 8000ea6:	eb64 0303 	sbc.w	r3, r4, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	2d00      	cmp	r5, #0
 8000eae:	d0e6      	beq.n	8000e7e <__udivmoddi4+0xa6>
 8000eb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb4:	e7e3      	b.n	8000e7e <__udivmoddi4+0xa6>
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	f040 8090 	bne.w	8000fdc <__udivmoddi4+0x204>
 8000ebc:	eba1 040c 	sub.w	r4, r1, ip
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa1f f78c 	uxth.w	r7, ip
 8000ec8:	2101      	movs	r1, #1
 8000eca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ece:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ed6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eda:	fb07 f006 	mul.w	r0, r7, r6
 8000ede:	4298      	cmp	r0, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x11c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eea:	d202      	bcs.n	8000ef2 <__udivmoddi4+0x11a>
 8000eec:	4298      	cmp	r0, r3
 8000eee:	f200 80cd 	bhi.w	800108c <__udivmoddi4+0x2b4>
 8000ef2:	4626      	mov	r6, r4
 8000ef4:	1a1c      	subs	r4, r3, r0
 8000ef6:	fa1f f38e 	uxth.w	r3, lr
 8000efa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000efe:	fb08 4410 	mls	r4, r8, r0, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb00 f707 	mul.w	r7, r0, r7
 8000f0a:	429f      	cmp	r7, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x148>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x146>
 8000f18:	429f      	cmp	r7, r3
 8000f1a:	f200 80b0 	bhi.w	800107e <__udivmoddi4+0x2a6>
 8000f1e:	4620      	mov	r0, r4
 8000f20:	1bdb      	subs	r3, r3, r7
 8000f22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f26:	e7a5      	b.n	8000e74 <__udivmoddi4+0x9c>
 8000f28:	f1c1 0620 	rsb	r6, r1, #32
 8000f2c:	408b      	lsls	r3, r1
 8000f2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f32:	431f      	orrs	r7, r3
 8000f34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f38:	fa04 f301 	lsl.w	r3, r4, r1
 8000f3c:	ea43 030c 	orr.w	r3, r3, ip
 8000f40:	40f4      	lsrs	r4, r6
 8000f42:	fa00 f801 	lsl.w	r8, r0, r1
 8000f46:	0c38      	lsrs	r0, r7, #16
 8000f48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f50:	fa1f fc87 	uxth.w	ip, r7
 8000f54:	fb00 441e 	mls	r4, r0, lr, r4
 8000f58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000f60:	45a1      	cmp	r9, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	d90a      	bls.n	8000f7e <__udivmoddi4+0x1a6>
 8000f68:	193c      	adds	r4, r7, r4
 8000f6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f6e:	f080 8084 	bcs.w	800107a <__udivmoddi4+0x2a2>
 8000f72:	45a1      	cmp	r9, r4
 8000f74:	f240 8081 	bls.w	800107a <__udivmoddi4+0x2a2>
 8000f78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	eba4 0409 	sub.w	r4, r4, r9
 8000f82:	fa1f f983 	uxth.w	r9, r3
 8000f86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f96:	45a4      	cmp	ip, r4
 8000f98:	d907      	bls.n	8000faa <__udivmoddi4+0x1d2>
 8000f9a:	193c      	adds	r4, r7, r4
 8000f9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fa0:	d267      	bcs.n	8001072 <__udivmoddi4+0x29a>
 8000fa2:	45a4      	cmp	ip, r4
 8000fa4:	d965      	bls.n	8001072 <__udivmoddi4+0x29a>
 8000fa6:	3b02      	subs	r3, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fae:	fba0 9302 	umull	r9, r3, r0, r2
 8000fb2:	eba4 040c 	sub.w	r4, r4, ip
 8000fb6:	429c      	cmp	r4, r3
 8000fb8:	46ce      	mov	lr, r9
 8000fba:	469c      	mov	ip, r3
 8000fbc:	d351      	bcc.n	8001062 <__udivmoddi4+0x28a>
 8000fbe:	d04e      	beq.n	800105e <__udivmoddi4+0x286>
 8000fc0:	b155      	cbz	r5, 8000fd8 <__udivmoddi4+0x200>
 8000fc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000fc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000fca:	fa04 f606 	lsl.w	r6, r4, r6
 8000fce:	40cb      	lsrs	r3, r1
 8000fd0:	431e      	orrs	r6, r3
 8000fd2:	40cc      	lsrs	r4, r1
 8000fd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd8:	2100      	movs	r1, #0
 8000fda:	e750      	b.n	8000e7e <__udivmoddi4+0xa6>
 8000fdc:	f1c2 0320 	rsb	r3, r2, #32
 8000fe0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa24 f303 	lsr.w	r3, r4, r3
 8000fec:	4094      	lsls	r4, r2
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ff8:	fa1f f78c 	uxth.w	r7, ip
 8000ffc:	fbb3 f0f8 	udiv	r0, r3, r8
 8001000:	fb08 3110 	mls	r1, r8, r0, r3
 8001004:	0c23      	lsrs	r3, r4, #16
 8001006:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800100a:	fb00 f107 	mul.w	r1, r0, r7
 800100e:	4299      	cmp	r1, r3
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x24c>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 36ff 	add.w	r6, r0, #4294967295
 800101a:	d22c      	bcs.n	8001076 <__udivmoddi4+0x29e>
 800101c:	4299      	cmp	r1, r3
 800101e:	d92a      	bls.n	8001076 <__udivmoddi4+0x29e>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1a5b      	subs	r3, r3, r1
 8001026:	b2a4      	uxth	r4, r4
 8001028:	fbb3 f1f8 	udiv	r1, r3, r8
 800102c:	fb08 3311 	mls	r3, r8, r1, r3
 8001030:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001034:	fb01 f307 	mul.w	r3, r1, r7
 8001038:	42a3      	cmp	r3, r4
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x276>
 800103c:	eb1c 0404 	adds.w	r4, ip, r4
 8001040:	f101 36ff 	add.w	r6, r1, #4294967295
 8001044:	d213      	bcs.n	800106e <__udivmoddi4+0x296>
 8001046:	42a3      	cmp	r3, r4
 8001048:	d911      	bls.n	800106e <__udivmoddi4+0x296>
 800104a:	3902      	subs	r1, #2
 800104c:	4464      	add	r4, ip
 800104e:	1ae4      	subs	r4, r4, r3
 8001050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001054:	e739      	b.n	8000eca <__udivmoddi4+0xf2>
 8001056:	4604      	mov	r4, r0
 8001058:	e6f0      	b.n	8000e3c <__udivmoddi4+0x64>
 800105a:	4608      	mov	r0, r1
 800105c:	e706      	b.n	8000e6c <__udivmoddi4+0x94>
 800105e:	45c8      	cmp	r8, r9
 8001060:	d2ae      	bcs.n	8000fc0 <__udivmoddi4+0x1e8>
 8001062:	ebb9 0e02 	subs.w	lr, r9, r2
 8001066:	eb63 0c07 	sbc.w	ip, r3, r7
 800106a:	3801      	subs	r0, #1
 800106c:	e7a8      	b.n	8000fc0 <__udivmoddi4+0x1e8>
 800106e:	4631      	mov	r1, r6
 8001070:	e7ed      	b.n	800104e <__udivmoddi4+0x276>
 8001072:	4603      	mov	r3, r0
 8001074:	e799      	b.n	8000faa <__udivmoddi4+0x1d2>
 8001076:	4630      	mov	r0, r6
 8001078:	e7d4      	b.n	8001024 <__udivmoddi4+0x24c>
 800107a:	46d6      	mov	lr, sl
 800107c:	e77f      	b.n	8000f7e <__udivmoddi4+0x1a6>
 800107e:	4463      	add	r3, ip
 8001080:	3802      	subs	r0, #2
 8001082:	e74d      	b.n	8000f20 <__udivmoddi4+0x148>
 8001084:	4606      	mov	r6, r0
 8001086:	4623      	mov	r3, r4
 8001088:	4608      	mov	r0, r1
 800108a:	e70f      	b.n	8000eac <__udivmoddi4+0xd4>
 800108c:	3e02      	subs	r6, #2
 800108e:	4463      	add	r3, ip
 8001090:	e730      	b.n	8000ef4 <__udivmoddi4+0x11c>
 8001092:	bf00      	nop

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <OffsetAddtoTemp>:
#include "includes.h"
#include "pdu.h"

extern ADC_HandleTypeDef hadc3;

uint8_t OffsetAddtoTemp(uint8_t offsett) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = tempfunction();
 80010a2:	f000 f851 	bl	8001148 <tempfunction>
 80010a6:	eef0 7a40 	vmov.f32	s15, s0
 80010aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ae:	edc7 7a00 	vstr	s15, [r7]
 80010b2:	783b      	ldrb	r3, [r7, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
	return temp + offsett;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4413      	add	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <SendTemperature>:

void SendTemperature(uint8_t temperature) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	INT8U err;
    static PDU response;

    response.header = PDU_HEADER;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <SendTemperature+0x6c>)
 80010d4:	225a      	movs	r2, #90	@ 0x5a
 80010d6:	701a      	strb	r2, [r3, #0]
	response.sid = SID_ADC_READ;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <SendTemperature+0x6c>)
 80010da:	223b      	movs	r2, #59	@ 0x3b
 80010dc:	705a      	strb	r2, [r3, #1]
	memset(response.data, 0xFF, sizeof(response.data));
 80010de:	2206      	movs	r2, #6
 80010e0:	21ff      	movs	r1, #255	@ 0xff
 80010e2:	4815      	ldr	r0, [pc, #84]	@ (8001138 <SendTemperature+0x70>)
 80010e4:	f00a f8dc 	bl	800b2a0 <memset>
	response.data[0] = 0x01;
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <SendTemperature+0x6c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	709a      	strb	r2, [r3, #2]
	// Store temperature in PDU
	memcpy(&response.data[5], &temperature, sizeof(temperature));
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <SendTemperature+0x6c>)
 80010f2:	71da      	strb	r2, [r3, #7]
	printf("Temperature2 = %d\r\n", response.data[5]);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <SendTemperature+0x6c>)
 80010f6:	79db      	ldrb	r3, [r3, #7]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4810      	ldr	r0, [pc, #64]	@ (800113c <SendTemperature+0x74>)
 80010fc:	f009 fed4 	bl	800aea8 <iprintf>

	err = OSQPost(tx_queue, (void*)&response);
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <SendTemperature+0x78>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	490b      	ldr	r1, [pc, #44]	@ (8001134 <SendTemperature+0x6c>)
 8001106:	4618      	mov	r0, r3
 8001108:	f008 f9ee 	bl	80094e8 <OSQPost>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
    OSFlagPost(event_flags, TRANSMIT_EVENT, OS_FLAG_SET, &err);
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <SendTemperature+0x7c>)
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	f107 030f 	add.w	r3, r7, #15
 8001118:	2201      	movs	r2, #1
 800111a:	2108      	movs	r1, #8
 800111c:	f007 fe4c 	bl	8008db8 <OSFlagPost>
    memset(response.data, 0, sizeof(response.data));
 8001120:	2206      	movs	r2, #6
 8001122:	2100      	movs	r1, #0
 8001124:	4804      	ldr	r0, [pc, #16]	@ (8001138 <SendTemperature+0x70>)
 8001126:	f00a f8bb 	bl	800b2a0 <memset>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001f0 	.word	0x200001f0
 8001138:	200001f2 	.word	0x200001f2
 800113c:	0800d020 	.word	0x0800d020
 8001140:	20006324 	.word	0x20006324
 8001144:	20006328 	.word	0x20006328

08001148 <tempfunction>:

float tempfunction(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
	uint16_t adc_value;
	float tempfloat;
	uint8_t tempint;

	// Read ADC Value
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800114e:	217f      	movs	r1, #127	@ 0x7f
 8001150:	482c      	ldr	r0, [pc, #176]	@ (8001204 <tempfunction+0xbc>)
 8001152:	f002 fe0b 	bl	8003d6c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc3);
 8001156:	482b      	ldr	r0, [pc, #172]	@ (8001204 <tempfunction+0xbc>)
 8001158:	f001 fc3c 	bl	80029d4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY); // MUST USE INTERRUPT, Don't Forget...
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	4828      	ldr	r0, [pc, #160]	@ (8001204 <tempfunction+0xbc>)
 8001162:	f001 fd25 	bl	8002bb0 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc3);
 8001166:	4827      	ldr	r0, [pc, #156]	@ (8001204 <tempfunction+0xbc>)
 8001168:	f001 fdfa 	bl	8002d60 <HAL_ADC_GetValue>
 800116c:	4603      	mov	r3, r0
 800116e:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc3);
 8001170:	4824      	ldr	r0, [pc, #144]	@ (8001204 <tempfunction+0xbc>)
 8001172:	f001 fce9 	bl	8002b48 <HAL_ADC_Stop>

	tempfloat = ((float)adc_value) / 4095 * 3300;
 8001176:	8afb      	ldrh	r3, [r7, #22]
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001180:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001208 <tempfunction+0xc0>
 8001184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001188:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800120c <tempfunction+0xc4>
 800118c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001190:	edc7 7a04 	vstr	s15, [r7, #16]
	tempfloat = ((tempfloat - 760.0) / 2.5) + 25;
 8001194:	6938      	ldr	r0, [r7, #16]
 8001196:	f7ff fa87 	bl	80006a8 <__aeabi_f2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <tempfunction+0xc8>)
 80011a0:	f7ff f922 	bl	80003e8 <__aeabi_dsub>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <tempfunction+0xcc>)
 80011b2:	f7ff fbfb 	bl	80009ac <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <tempfunction+0xd0>)
 80011c4:	f7ff f912 	bl	80003ec <__adddf3>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fd9a 	bl	8000d08 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]
	tempint = (uint8_t)roundf(tempfloat);
 80011d8:	ed97 0a04 	vldr	s0, [r7, #16]
 80011dc:	f00b feee 	bl	800cfbc <roundf>
 80011e0:	eef0 7a40 	vmov.f32	s15, s0
 80011e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80011ec:	793b      	ldrb	r3, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]

	return tempint;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001f8 	.word	0x200001f8
 8001208:	457ff000 	.word	0x457ff000
 800120c:	454e4000 	.word	0x454e4000
 8001210:	4087c000 	.word	0x4087c000
 8001214:	40040000 	.word	0x40040000
 8001218:	40390000 	.word	0x40390000

0800121c <SystemClock_Config>:
/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc3;
UART_HandleTypeDef huart2;

void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	@ 0x58
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2244      	movs	r2, #68	@ 0x44
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00a f838 	bl	800b2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800123e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001242:	f003 f9b7 	bl	80045b4 <HAL_PWREx_ControlVoltageScaling>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800124c:	f000 fa42 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125a:	2310      	movs	r3, #16
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001262:	2302      	movs	r3, #2
 8001264:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001266:	2301      	movs	r3, #1
 8001268:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 800126a:	2309      	movs	r3, #9
 800126c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800126e:	2307      	movs	r3, #7
 8001270:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001272:	2302      	movs	r3, #2
 8001274:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001276:	2302      	movs	r3, #2
 8001278:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4618      	mov	r0, r3
 8001280:	f003 f9ee 	bl	8004660 <HAL_RCC_OscConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800128a:	f000 fa23 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	230f      	movs	r3, #15
 8001290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001292:	2303      	movs	r3, #3
 8001294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	2104      	movs	r1, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fdb6 	bl	8004e18 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012b2:	f000 fa0f 	bl	80016d4 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3758      	adds	r7, #88	@ 0x58
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80012c6:	463b      	mov	r3, r7
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
  hadc3.Instance = ADC3;
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012d8:	4a24      	ldr	r2, [pc, #144]	@ (800136c <MX_ADC3_Init+0xac>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012dc:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012de:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	615a      	str	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_ADC3_Init+0xa8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_ADC3_Init+0xa8>)
 8001304:	2201      	movs	r2, #1
 8001306:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_ADC3_Init+0xa8>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <MX_ADC3_Init+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001316:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_ADC3_Init+0xa8>)
 8001318:	2200      	movs	r2, #0
 800131a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_ADC3_Init+0xa8>)
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001324:	4810      	ldr	r0, [pc, #64]	@ (8001368 <MX_ADC3_Init+0xa8>)
 8001326:	f001 fa05 	bl	8002734 <HAL_ADC_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001330:	f000 f9d0 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_ADC3_Init+0xb0>)
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2306      	movs	r3, #6
 800133a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800133c:	2307      	movs	r3, #7
 800133e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001340:	237f      	movs	r3, #127	@ 0x7f
 8001342:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001344:	2304      	movs	r3, #4
 8001346:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_ADC3_Init+0xa8>)
 8001352:	f001 ff4b 	bl	80031ec <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 800135c:	f000 f9ba 	bl	80016d4 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200001f8 	.word	0x200001f8
 800136c:	50040200 	.word	0x50040200
 8001370:	c7520000 	.word	0xc7520000

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f004 fc14 	bl	8005bd8 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 f98d 	bl	80016d4 <Error_Handler>
  }
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000025c 	.word	0x2000025c
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <MX_GPIO_Init+0xd4>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	4a2e      	ldr	r2, [pc, #184]	@ (800149c <MX_GPIO_Init+0xd4>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ea:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <MX_GPIO_Init+0xd4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	4b29      	ldr	r3, [pc, #164]	@ (800149c <MX_GPIO_Init+0xd4>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a28      	ldr	r2, [pc, #160]	@ (800149c <MX_GPIO_Init+0xd4>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b26      	ldr	r3, [pc, #152]	@ (800149c <MX_GPIO_Init+0xd4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b23      	ldr	r3, [pc, #140]	@ (800149c <MX_GPIO_Init+0xd4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a22      	ldr	r2, [pc, #136]	@ (800149c <MX_GPIO_Init+0xd4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <MX_GPIO_Init+0xd4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <MX_GPIO_Init+0xd4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <MX_GPIO_Init+0xd4>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <MX_GPIO_Init+0xd4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2120      	movs	r1, #32
 8001442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001446:	f003 f85d 	bl	8004504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800144a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001450:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480f      	ldr	r0, [pc, #60]	@ (80014a0 <MX_GPIO_Init+0xd8>)
 8001462:	f002 fea5 	bl	80041b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001466:	2320      	movs	r3, #32
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001480:	f002 fe96 	bl	80041b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	2100      	movs	r1, #0
 8001488:	2028      	movs	r0, #40	@ 0x28
 800148a:	f002 fddc 	bl	8004046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800148e:	2028      	movs	r0, #40	@ 0x28
 8001490:	f002 fdf5 	bl	800407e <HAL_NVIC_EnableIRQ>
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	@ 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800

080014a4 <LEDBlink>:
#include "led_handler.h"
#include "main.h"

// LED Blink Function
void LEDBlink(INT32U blink_frequency_ms) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	INT32U start_time = OSTimeGet();
 80014ac:	f008 fd5e 	bl	8009f6c <OSTimeGet>
 80014b0:	6178      	str	r0, [r7, #20]
	INT32U current_time;
	INT32U total_duration_ms = 5000; // Blink for 5 seconds
 80014b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80014b6:	613b      	str	r3, [r7, #16]

	while (1) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014b8:	2120      	movs	r1, #32
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014be:	f003 f839 	bl	8004534 <HAL_GPIO_TogglePin>
		OSTimeDlyHMSM(0, 0, 0, blink_frequency_ms);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f008 fcea 	bl	8009ea4 <OSTimeDlyHMSM>

		current_time = OSTimeGet();
 80014d0:	f008 fd4c 	bl	8009f6c <OSTimeGet>
 80014d4:	60f8      	str	r0, [r7, #12]
		if ((current_time - start_time) >= total_duration_ms) {
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d900      	bls.n	80014e4 <LEDBlink+0x40>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80014e2:	e7e9      	b.n	80014b8 <LEDBlink+0x14>
			break; // Exit loop if total duration has elapsed
 80014e4:	bf00      	nop
		}
	}
	// Ensure the LED is off after blinking completes
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED off
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ee:	f003 f809 	bl	8004504 <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <main>:
OS_FLAG_GRP *event_flags;

uint8_t pdu_buffer[PDU_LENGTH + 1];

int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af06      	add	r7, sp, #24
  HAL_Init();
 8001502:	f000 fe6b 	bl	80021dc <HAL_Init>
  SystemClock_Config();
 8001506:	f7ff fe89 	bl	800121c <SystemClock_Config>
  MX_GPIO_Init();
 800150a:	f7ff ff5d 	bl	80013c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800150e:	f7ff ff31 	bl	8001374 <MX_USART2_UART_Init>
  RetargetInit(&huart2);
 8001512:	484c      	ldr	r0, [pc, #304]	@ (8001644 <main+0x148>)
 8001514:	f000 f9d4 	bl	80018c0 <RetargetInit>
  MX_ADC3_Init();
 8001518:	f7ff fed2 	bl	80012c0 <MX_ADC3_Init>
  OS_ERR err;

  /* USART2 interrupt Init */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2026      	movs	r0, #38	@ 0x26
 8001522:	f002 fd90 	bl	8004046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001526:	2026      	movs	r0, #38	@ 0x26
 8001528:	f002 fda9 	bl	800407e <HAL_NVIC_EnableIRQ>

  // Initialize µC/OS-II
  OSInit();
 800152c:	f006 fbc2 	bl	8007cb4 <OSInit>

  // Create Event Object
  event_flags = OSFlagCreate(0x00, &err); // Initial flags = 0
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	4619      	mov	r1, r3
 8001534:	2000      	movs	r0, #0
 8001536:	f007 fa6b 	bl	8008a10 <OSFlagCreate>
 800153a:	4603      	mov	r3, r0
 800153c:	4a42      	ldr	r2, [pc, #264]	@ (8001648 <main+0x14c>)
 800153e:	6013      	str	r3, [r2, #0]

  // Create the queue
  tx_queue = OSQCreate((void **)&pdu_queue_buffer[0], QUEUE_SIZE);
 8001540:	2110      	movs	r1, #16
 8001542:	4842      	ldr	r0, [pc, #264]	@ (800164c <main+0x150>)
 8001544:	f007 fe9c 	bl	8009280 <OSQCreate>
 8001548:	4603      	mov	r3, r0
 800154a:	4a41      	ldr	r2, [pc, #260]	@ (8001650 <main+0x154>)
 800154c:	6013      	str	r3, [r2, #0]
  if (tx_queue == NULL) {
 800154e:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <main+0x154>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d104      	bne.n	8001560 <main+0x64>
	  printf("Queue initialization failed\r\n");
 8001556:	483f      	ldr	r0, [pc, #252]	@ (8001654 <main+0x158>)
 8001558:	f009 fd0e 	bl	800af78 <puts>
	  Error_Handler();
 800155c:	f000 f8ba 	bl	80016d4 <Error_Handler>
  }

  OSTaskCreateExt(TaskReceive,
 8001560:	2303      	movs	r3, #3
 8001562:	9304      	str	r3, [sp, #16]
 8001564:	2300      	movs	r3, #0
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <main+0x15c>)
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2306      	movs	r3, #6
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2306      	movs	r3, #6
 8001578:	4a38      	ldr	r2, [pc, #224]	@ (800165c <main+0x160>)
 800157a:	2100      	movs	r1, #0
 800157c:	4838      	ldr	r0, [pc, #224]	@ (8001660 <main+0x164>)
 800157e:	f008 f95b 	bl	8009838 <OSTaskCreateExt>
      				  TASK_STACKSIZE,
      				  NULL,
  					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
  					  );

  OSTaskCreateExt(TaskTransmit,
 8001582:	2303      	movs	r3, #3
 8001584:	9304      	str	r3, [sp, #16]
 8001586:	2300      	movs	r3, #0
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <main+0x168>)
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2307      	movs	r3, #7
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2307      	movs	r3, #7
 800159a:	4a33      	ldr	r2, [pc, #204]	@ (8001668 <main+0x16c>)
 800159c:	2100      	movs	r1, #0
 800159e:	4833      	ldr	r0, [pc, #204]	@ (800166c <main+0x170>)
 80015a0:	f008 f94a 	bl	8009838 <OSTaskCreateExt>
					  TASK_STACKSIZE,
					  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskButton,
 80015a4:	2303      	movs	r3, #3
 80015a6:	9304      	str	r3, [sp, #16]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9303      	str	r3, [sp, #12]
 80015ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <main+0x174>)
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	2305      	movs	r3, #5
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2305      	movs	r3, #5
 80015bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001674 <main+0x178>)
 80015be:	2100      	movs	r1, #0
 80015c0:	482d      	ldr	r0, [pc, #180]	@ (8001678 <main+0x17c>)
 80015c2:	f008 f939 	bl	8009838 <OSTaskCreateExt>
					  TASK_STACKSIZE,
					  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskLED,
 80015c6:	2303      	movs	r3, #3
 80015c8:	9304      	str	r3, [sp, #16]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9303      	str	r3, [sp, #12]
 80015ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	4b29      	ldr	r3, [pc, #164]	@ (800167c <main+0x180>)
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2308      	movs	r3, #8
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2308      	movs	r3, #8
 80015de:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <main+0x184>)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4828      	ldr	r0, [pc, #160]	@ (8001684 <main+0x188>)
 80015e4:	f008 f928 	bl	8009838 <OSTaskCreateExt>
					  TASK_STACKSIZE,
					  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskADC,
 80015e8:	2303      	movs	r3, #3
 80015ea:	9304      	str	r3, [sp, #16]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9303      	str	r3, [sp, #12]
 80015f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <main+0x18c>)
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2309      	movs	r3, #9
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2309      	movs	r3, #9
 8001600:	4a22      	ldr	r2, [pc, #136]	@ (800168c <main+0x190>)
 8001602:	2100      	movs	r1, #0
 8001604:	4822      	ldr	r0, [pc, #136]	@ (8001690 <main+0x194>)
 8001606:	f008 f917 	bl	8009838 <OSTaskCreateExt>
					  TASK_STACKSIZE,
					  NULL,
					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
					  );

  OSTaskCreateExt(TaskPeriodic,
 800160a:	2303      	movs	r3, #3
 800160c:	9304      	str	r3, [sp, #16]
 800160e:	2300      	movs	r3, #0
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <main+0x198>)
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	230a      	movs	r3, #10
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	230a      	movs	r3, #10
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <main+0x19c>)
 8001624:	2100      	movs	r1, #0
 8001626:	481d      	ldr	r0, [pc, #116]	@ (800169c <main+0x1a0>)
 8001628:	f008 f906 	bl	8009838 <OSTaskCreateExt>
  					  NULL,
  					  OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR
  					  );

  // Start UART reception
  HAL_UART_Receive_IT(&huart2, pdu_buffer, PDU_LENGTH);
 800162c:	2207      	movs	r2, #7
 800162e:	491c      	ldr	r1, [pc, #112]	@ (80016a0 <main+0x1a4>)
 8001630:	4804      	ldr	r0, [pc, #16]	@ (8001644 <main+0x148>)
 8001632:	f004 fc71 	bl	8005f18 <HAL_UART_Receive_IT>

  OSStart();
 8001636:	f006 fc29 	bl	8007e8c <OSStart>
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000025c 	.word	0x2000025c
 8001648:	20006328 	.word	0x20006328
 800164c:	200062e4 	.word	0x200062e4
 8001650:	20006324 	.word	0x20006324
 8001654:	0800d034 	.word	0x0800d034
 8001658:	200002e4 	.word	0x200002e4
 800165c:	200012e4 	.word	0x200012e4
 8001660:	08001d41 	.word	0x08001d41
 8001664:	200012e4 	.word	0x200012e4
 8001668:	200022e4 	.word	0x200022e4
 800166c:	08001ded 	.word	0x08001ded
 8001670:	200022e4 	.word	0x200022e4
 8001674:	200032e4 	.word	0x200032e4
 8001678:	08001e8d 	.word	0x08001e8d
 800167c:	200032e4 	.word	0x200032e4
 8001680:	200042e4 	.word	0x200042e4
 8001684:	08001ef9 	.word	0x08001ef9
 8001688:	200042e4 	.word	0x200042e4
 800168c:	200052e4 	.word	0x200052e4
 8001690:	08001f65 	.word	0x08001f65
 8001694:	200052e4 	.word	0x200052e4
 8001698:	200062e4 	.word	0x200062e4
 800169c:	08001e39 	.word	0x08001e39
 80016a0:	2000632c 	.word	0x2000632c

080016a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
    OS_ERR err;
    if(GPIO_Pin == GPIO_PIN_13)
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016b4:	d107      	bne.n	80016c6 <HAL_GPIO_EXTI_Callback+0x22>
    	OSFlagPost(event_flags, BUTTON_EVENT, OS_FLAG_SET, &err);
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 030f 	add.w	r3, r7, #15
 80016be:	2201      	movs	r2, #1
 80016c0:	2104      	movs	r1, #4
 80016c2:	f007 fb79 	bl	8008db8 <OSFlagPost>
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20006328 	.word	0x20006328

080016d4 <Error_Handler>:


void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <validate_pdu_header>:
#include "pdu.h"
#include "tasks.h"
#include "includes.h"

/* PDU Processing Functions */
bool validate_pdu_header(const PDU* pdu) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    return (pdu->header == PDU_HEADER);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b5a      	cmp	r3, #90	@ 0x5a
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <validate_led_payload>:

bool validate_led_payload(uint16_t payload) {
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	80fb      	strh	r3, [r7, #6]
    return (payload >= 100 && payload <= 999);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	2b63      	cmp	r3, #99	@ 0x63
 8001710:	d905      	bls.n	800171e <validate_led_payload+0x1c>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001718:	d201      	bcs.n	800171e <validate_led_payload+0x1c>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <validate_led_payload+0x1e>
 800171e:	2300      	movs	r3, #0
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <validate_adc_payload>:

bool validate_adc_payload(uint16_t payload) {
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	80fb      	strh	r3, [r7, #6]
    return (payload >= 0 && payload <= 49);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	2b31      	cmp	r3, #49	@ 0x31
 8001740:	bf94      	ite	ls
 8001742:	2301      	movls	r3, #1
 8001744:	2300      	movhi	r3, #0
 8001746:	b2db      	uxtb	r3, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <process_received_pdu>:

void process_received_pdu(PDU* pdu) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    uint16_t payload;
    memcpy(&payload, &pdu->data[2], sizeof(payload));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	b29b      	uxth	r3, r3
 8001764:	81fb      	strh	r3, [r7, #14]

    OS_ERR err;
    switch (pdu->sid) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	2b18      	cmp	r3, #24
 800176c:	d002      	beq.n	8001774 <process_received_pdu+0x20>
 800176e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001770:	d01c      	beq.n	80017ac <process_received_pdu+0x58>
 8001772:	e03a      	b.n	80017ea <process_received_pdu+0x96>
        case SID_LED_BLINK:
            if (validate_led_payload(payload)) {
 8001774:	89fb      	ldrh	r3, [r7, #14]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ffc3 	bl	8001702 <validate_led_payload>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00e      	beq.n	80017a0 <process_received_pdu+0x4c>
                OSQPost(tx_queue, pdu);
 8001782:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <process_received_pdu+0xac>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fead 	bl	80094e8 <OSQPost>
                OSFlagPost(event_flags, LED_EVENT, OS_FLAG_SET, &err);
 800178e:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <process_received_pdu+0xb0>)
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f107 030d 	add.w	r3, r7, #13
 8001796:	2201      	movs	r2, #1
 8001798:	2101      	movs	r1, #1
 800179a:	f007 fb0d 	bl	8008db8 <OSFlagPost>
            } else {
                SendNegativeResponse(pdu->sid);
            }
            break;
 800179e:	e02a      	b.n	80017f6 <process_received_pdu+0xa2>
                SendNegativeResponse(pdu->sid);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 f85d 	bl	8001864 <SendNegativeResponse>
            break;
 80017aa:	e024      	b.n	80017f6 <process_received_pdu+0xa2>

        case SID_ADC_READ:
            pdu->data[0] = 2;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	709a      	strb	r2, [r3, #2]
            if (validate_adc_payload(payload)) {
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ffbc 	bl	8001732 <validate_adc_payload>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00e      	beq.n	80017de <process_received_pdu+0x8a>
                OSQPost(tx_queue, pdu);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <process_received_pdu+0xac>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f007 fe8e 	bl	80094e8 <OSQPost>
                OSFlagPost(event_flags, ADC_EVENT, OS_FLAG_SET, &err);
 80017cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <process_received_pdu+0xb0>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	f107 030d 	add.w	r3, r7, #13
 80017d4:	2201      	movs	r2, #1
 80017d6:	2102      	movs	r1, #2
 80017d8:	f007 faee 	bl	8008db8 <OSFlagPost>
            } else {
                SendNegativeResponse(pdu->sid);
            }
            break;
 80017dc:	e00b      	b.n	80017f6 <process_received_pdu+0xa2>
                SendNegativeResponse(pdu->sid);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f83e 	bl	8001864 <SendNegativeResponse>
            break;
 80017e8:	e005      	b.n	80017f6 <process_received_pdu+0xa2>

        default:
            SendNegativeResponse(pdu->sid);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f838 	bl	8001864 <SendNegativeResponse>
    }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20006324 	.word	0x20006324
 8001804:	20006328 	.word	0x20006328

08001808 <SendPositiveResponse>:

void SendPositiveResponse(uint8_t sid) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	INT8U err;
	static PDU response;

	response.header = PDU_HEADER;
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <SendPositiveResponse+0x4c>)
 8001814:	225a      	movs	r2, #90	@ 0x5a
 8001816:	701a      	strb	r2, [r3, #0]
	response.sid = sid;
 8001818:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <SendPositiveResponse+0x4c>)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	7053      	strb	r3, [r2, #1]
	memset(response.data, 0xFF, sizeof(response.data));
 800181e:	2206      	movs	r2, #6
 8001820:	21ff      	movs	r1, #255	@ 0xff
 8001822:	480d      	ldr	r0, [pc, #52]	@ (8001858 <SendPositiveResponse+0x50>)
 8001824:	f009 fd3c 	bl	800b2a0 <memset>
	response.data[0] = 0xAA;  // Error code
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <SendPositiveResponse+0x4c>)
 800182a:	22aa      	movs	r2, #170	@ 0xaa
 800182c:	709a      	strb	r2, [r3, #2]

	OSQPost(tx_queue, (void*)&response);
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <SendPositiveResponse+0x54>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4908      	ldr	r1, [pc, #32]	@ (8001854 <SendPositiveResponse+0x4c>)
 8001834:	4618      	mov	r0, r3
 8001836:	f007 fe57 	bl	80094e8 <OSQPost>
	OSFlagPost(event_flags, TRANSMIT_EVENT, OS_FLAG_SET, &err);
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <SendPositiveResponse+0x58>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	f107 030f 	add.w	r3, r7, #15
 8001842:	2201      	movs	r2, #1
 8001844:	2108      	movs	r1, #8
 8001846:	f007 fab7 	bl	8008db8 <OSFlagPost>
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20006334 	.word	0x20006334
 8001858:	20006336 	.word	0x20006336
 800185c:	20006324 	.word	0x20006324
 8001860:	20006328 	.word	0x20006328

08001864 <SendNegativeResponse>:

void SendNegativeResponse(uint8_t wrongsid) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	INT8U err;
    static PDU response;

    response.header = PDU_HEADER;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <SendNegativeResponse+0x4c>)
 8001870:	225a      	movs	r2, #90	@ 0x5a
 8001872:	701a      	strb	r2, [r3, #0]
	response.sid = wrongsid;
 8001874:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <SendNegativeResponse+0x4c>)
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	7053      	strb	r3, [r2, #1]
	memset(response.data, 0xFF, sizeof(response.data));
 800187a:	2206      	movs	r2, #6
 800187c:	21ff      	movs	r1, #255	@ 0xff
 800187e:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <SendNegativeResponse+0x50>)
 8001880:	f009 fd0e 	bl	800b2a0 <memset>
	response.data[0] = 0x7F;  // Error code
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <SendNegativeResponse+0x4c>)
 8001886:	227f      	movs	r2, #127	@ 0x7f
 8001888:	709a      	strb	r2, [r3, #2]

    OSQPost(tx_queue, (void*)&response);
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <SendNegativeResponse+0x54>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <SendNegativeResponse+0x4c>)
 8001890:	4618      	mov	r0, r3
 8001892:	f007 fe29 	bl	80094e8 <OSQPost>
    OSFlagPost(event_flags, TRANSMIT_EVENT, OS_FLAG_SET, &err);
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <SendNegativeResponse+0x58>)
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f107 030f 	add.w	r3, r7, #15
 800189e:	2201      	movs	r2, #1
 80018a0:	2108      	movs	r1, #8
 80018a2:	f007 fa89 	bl	8008db8 <OSFlagPost>
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000633c 	.word	0x2000633c
 80018b4:	2000633e 	.word	0x2000633e
 80018b8:	20006324 	.word	0x20006324
 80018bc:	20006328 	.word	0x20006328

080018c0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80018c8:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <RetargetInit+0x28>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <RetargetInit+0x2c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6898      	ldr	r0, [r3, #8]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2202      	movs	r2, #2
 80018d8:	2100      	movs	r1, #0
 80018da:	f009 fb55 	bl	800af88 <setvbuf>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20006344 	.word	0x20006344
 80018ec:	20000018 	.word	0x20000018

080018f0 <_isatty>:

int _isatty(int fd) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db04      	blt.n	8001908 <_isatty+0x18>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	dc01      	bgt.n	8001908 <_isatty+0x18>
    return 1;
 8001904:	2301      	movs	r3, #1
 8001906:	e005      	b.n	8001914 <_isatty+0x24>

  errno = EBADF;
 8001908:	f009 fd1c 	bl	800b344 <__errno>
 800190c:	4603      	mov	r3, r0
 800190e:	2209      	movs	r2, #9
 8001910:	601a      	str	r2, [r3, #0]
  return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_write>:

int _write(int fd, char* ptr, int len) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d002      	beq.n	8001934 <_write+0x18>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d111      	bne.n	8001958 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <_write+0x54>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	b29a      	uxth	r2, r3
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	f004 f997 	bl	8005c74 <HAL_UART_Transmit>
 8001946:	4603      	mov	r3, r0
 8001948:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <_write+0x38>
      return len;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	e008      	b.n	8001966 <_write+0x4a>
    else
      return EIO;
 8001954:	2305      	movs	r3, #5
 8001956:	e006      	b.n	8001966 <_write+0x4a>
  }
  errno = EBADF;
 8001958:	f009 fcf4 	bl	800b344 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	2209      	movs	r2, #9
 8001960:	601a      	str	r2, [r3, #0]
  return -1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20006344 	.word	0x20006344

08001974 <_close>:

int _close(int fd) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db04      	blt.n	800198c <_close+0x18>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	dc01      	bgt.n	800198c <_close+0x18>
    return 0;
 8001988:	2300      	movs	r3, #0
 800198a:	e006      	b.n	800199a <_close+0x26>

  errno = EBADF;
 800198c:	f009 fcda 	bl	800b344 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	2209      	movs	r2, #9
 8001994:	601a      	str	r2, [r3, #0]
  return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <_read>:

int _read(int fd, char* ptr, int len) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d110      	bne.n	80019d8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <_read+0x4c>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2201      	movs	r2, #1
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	f004 f9e0 	bl	8005d86 <HAL_UART_Receive>
 80019c6:	4603      	mov	r3, r0
 80019c8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <_read+0x30>
      return 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e008      	b.n	80019e6 <_read+0x42>
    else
      return EIO;
 80019d4:	2305      	movs	r3, #5
 80019d6:	e006      	b.n	80019e6 <_read+0x42>
  }
  errno = EBADF;
 80019d8:	f009 fcb4 	bl	800b344 <__errno>
 80019dc:	4603      	mov	r3, r0
 80019de:	2209      	movs	r2, #9
 80019e0:	601a      	str	r2, [r3, #0]
  return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20006344 	.word	0x20006344

080019f4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db08      	blt.n	8001a16 <_fstat+0x22>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	dc05      	bgt.n	8001a16 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a10:	605a      	str	r2, [r3, #4]
    return 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e005      	b.n	8001a22 <_fstat+0x2e>
  }

  errno = EBADF;
 8001a16:	f009 fc95 	bl	800b344 <__errno>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2209      	movs	r2, #9
 8001a1e:	601a      	str	r2, [r3, #0]
  return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a36:	4a0e      	ldr	r2, [pc, #56]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a56:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <HAL_MspInit+0x44>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000

08001a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0a6      	sub	sp, #152	@ 0x98
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2288      	movs	r2, #136	@ 0x88
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f009 fc0b 	bl	800b2a0 <memset>
  if(hadc->Instance==ADC3)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_ADC_MspInit+0x90>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d133      	bne.n	8001afc <HAL_ADC_MspInit+0x88>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a9a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001aba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fbcb 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8001ad0:	f7ff fe00 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <HAL_ADC_MspInit+0x94>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8001b08 <HAL_ADC_MspInit+0x94>)
 8001ada:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <HAL_ADC_MspInit+0x94>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	202f      	movs	r0, #47	@ 0x2f
 8001af2:	f002 faa8 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001af6:	202f      	movs	r0, #47	@ 0x2f
 8001af8:	f002 fac1 	bl	800407e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 8001afc:	bf00      	nop
 8001afe:	3798      	adds	r7, #152	@ 0x98
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	50040200 	.word	0x50040200
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0ac      	sub	sp, #176	@ 0xb0
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2288      	movs	r2, #136	@ 0x88
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f009 fbb7 	bl	800b2a0 <memset>
  if(huart->Instance==USART2)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a25      	ldr	r2, [pc, #148]	@ (8001bcc <HAL_UART_MspInit+0xc0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d143      	bne.n	8001bc4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fb89 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b54:	f7ff fdbe 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <HAL_UART_MspInit+0xc4>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <HAL_UART_MspInit+0xc4>)
 8001b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <HAL_UART_MspInit+0xc4>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <HAL_UART_MspInit+0xc4>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b74:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <HAL_UART_MspInit+0xc4>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7c:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_UART_MspInit+0xc4>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b88:	230c      	movs	r3, #12
 8001b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb0:	f002 fafe 	bl	80041b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2026      	movs	r0, #38	@ 0x26
 8001bba:	f002 fa44 	bl	8004046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bbe:	2026      	movs	r0, #38	@ 0x26
 8001bc0:	f002 fa5d 	bl	800407e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bc4:	bf00      	nop
 8001bc6:	37b0      	adds	r7, #176	@ 0xb0
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004400 	.word	0x40004400
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <USART2_IRQHandler+0x10>)
 8001c1e:	f004 f9c7 	bl	8005fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000025c 	.word	0x2000025c

08001c2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c34:	f002 fc98 	bl	8004568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <ADC3_IRQHandler+0x10>)
 8001c42:	f001 f89b 	bl	8002d7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200001f8 	.word	0x200001f8

08001c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_kill>:

int _kill(int pid, int sig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6a:	f009 fb6b 	bl	800b344 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_exit>:

void _exit (int status)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffe7 	bl	8001c60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c92:	bf00      	nop
 8001c94:	e7fd      	b.n	8001c92 <_exit+0x12>

08001c96 <_lseek>:
  }
  return len;
}

int _lseek(int file, int ptr, int dir)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f009 fb30 	bl	800b344 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20018000 	.word	0x20018000
 8001d10:	00000400 	.word	0x00000400
 8001d14:	20006348 	.word	0x20006348
 8001d18:	20007cd8 	.word	0x20007cd8

08001d1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	@ (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <TaskReceive>:
#include "pdu.h"
#include "uart_handler.h"
#include "adc_handler.h"

// Task implementations
void TaskReceive(void* pdata) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	6078      	str	r0, [r7, #4]
    OS_ERR err;
    OS_FLAGS flags;

    while (1) {
    	// Wait for UART data (auto-clear flag)
		flags = OSFlagPend(event_flags, UART_RX_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <TaskReceive+0x9c>)
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	f107 030d 	add.w	r3, r7, #13
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	2282      	movs	r2, #130	@ 0x82
 8001d56:	2110      	movs	r1, #16
 8001d58:	f006 fe9e 	bl	8008a98 <OSFlagPend>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	81fb      	strh	r3, [r7, #14]
		if (flags & UART_RX_EVENT) {
 8001d60:	89fb      	ldrh	r3, [r7, #14]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ee      	beq.n	8001d48 <TaskReceive+0x8>

			// Clear all old data
			memset(&received_pdu, 0, sizeof(PDU));
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	481c      	ldr	r0, [pc, #112]	@ (8001de0 <TaskReceive+0xa0>)
 8001d70:	f009 fa96 	bl	800b2a0 <memset>
			// Receive Header (Hex), Receive SID (Hex), Receive Payload (Decimal)
			received_pdu.header = AsciiHexToByte(pdu_buffer[0], pdu_buffer[1]);
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <TaskReceive+0xa4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4a1a      	ldr	r2, [pc, #104]	@ (8001de4 <TaskReceive+0xa4>)
 8001d7a:	7852      	ldrb	r2, [r2, #1]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f97c 	bl	800207c <AsciiHexToByte>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <TaskReceive+0xa0>)
 8001d8a:	701a      	strb	r2, [r3, #0]
			received_pdu.sid = AsciiHexToByte(pdu_buffer[2], pdu_buffer[3]);
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <TaskReceive+0xa4>)
 8001d8e:	789b      	ldrb	r3, [r3, #2]
 8001d90:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <TaskReceive+0xa4>)
 8001d92:	78d2      	ldrb	r2, [r2, #3]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f970 	bl	800207c <AsciiHexToByte>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <TaskReceive+0xa0>)
 8001da2:	705a      	strb	r2, [r3, #1]
			uint16_t payload = (uint16_t)atoi((char*)pdu_buffer + 4);
 8001da4:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <TaskReceive+0xa8>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f008 fadc 	bl	800a364 <atoi>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	817b      	strh	r3, [r7, #10]

			// Prepare PDU, Sending to other tasks.
			memcpy(&received_pdu.data[2], &payload, sizeof(payload));
 8001db2:	897a      	ldrh	r2, [r7, #10]
 8001db4:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <TaskReceive+0xa0>)
 8001db6:	809a      	strh	r2, [r3, #4]

			// Validate and process PDU
			if (!validate_pdu_header(&received_pdu)) {
 8001db8:	4809      	ldr	r0, [pc, #36]	@ (8001de0 <TaskReceive+0xa0>)
 8001dba:	f7ff fc91 	bl	80016e0 <validate_pdu_header>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <TaskReceive+0x92>
				SendNegativeResponse(0x7F);
 8001dca:	207f      	movs	r0, #127	@ 0x7f
 8001dcc:	f7ff fd4a 	bl	8001864 <SendNegativeResponse>
 8001dd0:	e7ba      	b.n	8001d48 <TaskReceive+0x8>
				continue;
			}

			process_received_pdu(&received_pdu);
 8001dd2:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <TaskReceive+0xa0>)
 8001dd4:	f7ff fcbe 	bl	8001754 <process_received_pdu>
		flags = OSFlagPend(event_flags, UART_RX_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001dd8:	e7b6      	b.n	8001d48 <TaskReceive+0x8>
 8001dda:	bf00      	nop
 8001ddc:	20006328 	.word	0x20006328
 8001de0:	2000634c 	.word	0x2000634c
 8001de4:	2000632c 	.word	0x2000632c
 8001de8:	20006330 	.word	0x20006330

08001dec <TaskTransmit>:
		}
    }
}

void TaskTransmit(void *pdata) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	6078      	str	r0, [r7, #4]
	PDU *pdu_rx;
	INT8U err;
	OS_FLAGS flags;

	while(1) {
		flags = OSFlagPend(event_flags, TRANSMIT_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001df4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <TaskTransmit+0x44>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	f107 030f 	add.w	r3, r7, #15
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2282      	movs	r2, #130	@ 0x82
 8001e02:	2108      	movs	r1, #8
 8001e04:	f006 fe48 	bl	8008a98 <OSFlagPend>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	82fb      	strh	r3, [r7, #22]
		if (flags & TRANSMIT_EVENT) {
 8001e0c:	8afb      	ldrh	r3, [r7, #22]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <TaskTransmit+0x8>
			// Wait for a PDU from the queue
			pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 8001e16:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <TaskTransmit+0x48>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f107 020f 	add.w	r2, r7, #15
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 faa1 	bl	8009368 <OSQPend>
 8001e26:	6138      	str	r0, [r7, #16]
			PrintTransmited(pdu_rx);
 8001e28:	6938      	ldr	r0, [r7, #16]
 8001e2a:	f000 f8eb 	bl	8002004 <PrintTransmited>
		flags = OSFlagPend(event_flags, TRANSMIT_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001e2e:	e7e1      	b.n	8001df4 <TaskTransmit+0x8>
 8001e30:	20006328 	.word	0x20006328
 8001e34:	20006324 	.word	0x20006324

08001e38 <TaskPeriodic>:
		}
	}
}

void TaskPeriodic(void *pdata) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	PDU periodic_temp_pdu = {PDU_HEADER, SID_ADC_READ, {0x01}};
 8001e40:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <TaskPeriodic+0x48>)
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e4a:	e883 0003 	stmia.w	r3, {r0, r1}
	OS_ERR err;
	while(1) {
		// Periodic Default PDU sending to ADC task
		OSQPost(tx_queue, (void*)&periodic_temp_pdu);  // Forward to ADC task
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <TaskPeriodic+0x4c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f107 0210 	add.w	r2, r7, #16
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f007 fb45 	bl	80094e8 <OSQPost>
		OSFlagPost(event_flags, ADC_EVENT, OS_FLAG_SET, &err);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <TaskPeriodic+0x50>)
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f107 030f 	add.w	r3, r7, #15
 8001e66:	2201      	movs	r2, #1
 8001e68:	2102      	movs	r1, #2
 8001e6a:	f006 ffa5 	bl	8008db8 <OSFlagPost>
		OSTimeDlyHMSM(0, 0, 10, 0);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	220a      	movs	r2, #10
 8001e72:	2100      	movs	r1, #0
 8001e74:	2000      	movs	r0, #0
 8001e76:	f008 f815 	bl	8009ea4 <OSTimeDlyHMSM>
		OSQPost(tx_queue, (void*)&periodic_temp_pdu);  // Forward to ADC task
 8001e7a:	bf00      	nop
 8001e7c:	e7e7      	b.n	8001e4e <TaskPeriodic+0x16>
 8001e7e:	bf00      	nop
 8001e80:	0800d054 	.word	0x0800d054
 8001e84:	20006324 	.word	0x20006324
 8001e88:	20006328 	.word	0x20006328

08001e8c <TaskButton>:
	}
}

void TaskButton(void *pdata) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	6078      	str	r0, [r7, #4]
	PDU pdu_tx = {PDU_HEADER, SID_BUTTON_EVENT, {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}};
 8001e94:	4a15      	ldr	r2, [pc, #84]	@ (8001eec <TaskButton+0x60>)
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e9e:	e883 0003 	stmia.w	r3, {r0, r1}
	INT8U err;
	OS_FLAGS flags;
	while(1) {

		// Wait for BUTTON_EVENT (button press)
		flags = OSFlagPend(event_flags, BUTTON_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <TaskButton+0x64>)
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	f107 030b 	add.w	r3, r7, #11
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2300      	movs	r3, #0
 8001eae:	2282      	movs	r2, #130	@ 0x82
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	f006 fdf1 	bl	8008a98 <OSFlagPend>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	82fb      	strh	r3, [r7, #22]

		if (flags & BUTTON_EVENT) {
 8001eba:	8afb      	ldrh	r3, [r7, #22]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ee      	beq.n	8001ea2 <TaskButton+0x16>
			// Send Button Response
			err = OSQPost(tx_queue, (void*)&pdu_tx); // Post to transmit queue
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <TaskButton+0x68>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f007 fb0a 	bl	80094e8 <OSQPost>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	72fb      	strb	r3, [r7, #11]
			OSFlagPost(event_flags, TRANSMIT_EVENT, OS_FLAG_SET, &err);
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <TaskButton+0x64>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f107 030b 	add.w	r3, r7, #11
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2108      	movs	r1, #8
 8001ee4:	f006 ff68 	bl	8008db8 <OSFlagPost>
		flags = OSFlagPend(event_flags, BUTTON_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001ee8:	e7db      	b.n	8001ea2 <TaskButton+0x16>
 8001eea:	bf00      	nop
 8001eec:	0800d05c 	.word	0x0800d05c
 8001ef0:	20006328 	.word	0x20006328
 8001ef4:	20006324 	.word	0x20006324

08001ef8 <TaskLED>:
		}
	}
}

void TaskLED(void *pdata) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af02      	add	r7, sp, #8
 8001efe:	6078      	str	r0, [r7, #4]
	OS_FLAGS flags;
	uint16_t blink_frequency;

    while(1) {

    	flags = OSFlagPend(event_flags, LED_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001f00:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <TaskLED+0x64>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f107 030f 	add.w	r3, r7, #15
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2282      	movs	r2, #130	@ 0x82
 8001f0e:	2101      	movs	r1, #1
 8001f10:	f006 fdc2 	bl	8008a98 <OSFlagPend>
 8001f14:	4603      	mov	r3, r0
 8001f16:	82fb      	strh	r3, [r7, #22]

    	if (flags & LED_EVENT) {
 8001f18:	8afb      	ldrh	r3, [r7, #22]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <TaskLED+0x8>
    		// Receiving PDU from Queue
    		pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 8001f22:	4b0f      	ldr	r3, [pc, #60]	@ (8001f60 <TaskLED+0x68>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f107 020f 	add.w	r2, r7, #15
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f007 fa1b 	bl	8009368 <OSQPend>
 8001f32:	6138      	str	r0, [r7, #16]
    		// Extract frequency from PDU payload
    		memcpy(&blink_frequency, &pdu_rx->data[2], sizeof(uint16_t));
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	3304      	adds	r3, #4
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	81bb      	strh	r3, [r7, #12]
			// Blink LED
			LEDBlink(blink_frequency);
 8001f3e:	89bb      	ldrh	r3, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff faaf 	bl	80014a4 <LEDBlink>
			// Clear previous data
			memset(pdu_rx->data, 0, sizeof(pdu_rx->data));
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	2206      	movs	r2, #6
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f009 f9a6 	bl	800b2a0 <memset>
			// Send Positive Response
			SendPositiveResponse(SID_LED_BLINK);
 8001f54:	2018      	movs	r0, #24
 8001f56:	f7ff fc57 	bl	8001808 <SendPositiveResponse>
    	flags = OSFlagPend(event_flags, LED_EVENT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 8001f5a:	e7d1      	b.n	8001f00 <TaskLED+0x8>
 8001f5c:	20006328 	.word	0x20006328
 8001f60:	20006324 	.word	0x20006324

08001f64 <TaskADC>:
    	}
    }
}

void TaskADC(void *pdata) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	6078      	str	r0, [r7, #4]
	OS_FLAGS flags;
	//PDU pdu_temp = {PDU_HEADER, SID_ADC_READ, {0x01}};
	PDU *pdu_rx;
	uint8_t temp;
	uint8_t offset = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73bb      	strb	r3, [r7, #14]
	INT8U err;

	while(1) {
		// Wait for ADC_EVENT
		flags = OSFlagPend(event_flags, ADC_EVENT, OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME, 0, &err);
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <TaskADC+0x98>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	f107 030d 	add.w	r3, r7, #13
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2283      	movs	r2, #131	@ 0x83
 8001f7e:	2102      	movs	r1, #2
 8001f80:	f006 fd8a 	bl	8008a98 <OSFlagPend>
 8001f84:	4603      	mov	r3, r0
 8001f86:	82fb      	strh	r3, [r7, #22]

		if (flags & ADC_EVENT) {
 8001f88:	8afb      	ldrh	r3, [r7, #22]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0ee      	beq.n	8001f70 <TaskADC+0xc>
			// Receiving PDU from Queue
			pdu_rx = (PDU *)OSQPend(tx_queue, 0, &err);
 8001f92:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <TaskADC+0x9c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f107 020d 	add.w	r2, r7, #13
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f007 f9e3 	bl	8009368 <OSQPend>
 8001fa2:	6138      	str	r0, [r7, #16]
			// Check if a new offset inserted
			if (pdu_rx->data[0] == 2) {
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	789b      	ldrb	r3, [r3, #2]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d114      	bne.n	8001fd6 <TaskADC+0x72>
				// Extract offset from PDU payload
				memcpy(&offset, &pdu_rx->data[2], sizeof(offset));
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	73bb      	strb	r3, [r7, #14]
				// Read temperature and apply offset
				temp = OffsetAddtoTemp(offset);
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f86e 	bl	8001098 <OffsetAddtoTemp>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
				// Clear pdu_rx
				memset(pdu_rx->data, 0, sizeof(pdu_rx->data));
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	2206      	movs	r2, #6
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 f969 	bl	800b2a0 <memset>
				// Send Positive Response 0x5A 0x3B 0xAA ...
				SendPositiveResponse(SID_ADC_READ);
 8001fce:	203b      	movs	r0, #59	@ 0x3b
 8001fd0:	f7ff fc1a 	bl	8001808 <SendPositiveResponse>
 8001fd4:	e7cc      	b.n	8001f70 <TaskADC+0xc>

			} else {
				// Read temperature and apply offset
				temp = OffsetAddtoTemp(offset);
 8001fd6:	7bbb      	ldrb	r3, [r7, #14]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f85d 	bl	8001098 <OffsetAddtoTemp>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]
				// Clear pdu_rx
				memset(pdu_rx->data, 0, sizeof(pdu_rx->data));
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	2206      	movs	r2, #6
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f009 f958 	bl	800b2a0 <memset>
				// Sending Periodic Temperature = 0x5A 0x3B 0x01 temperature
				SendTemperature(temp);
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f868 	bl	80010c8 <SendTemperature>
		flags = OSFlagPend(event_flags, ADC_EVENT, OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME, 0, &err);
 8001ff8:	e7ba      	b.n	8001f70 <TaskADC+0xc>
 8001ffa:	bf00      	nop
 8001ffc:	20006328 	.word	0x20006328
 8002000:	20006324 	.word	0x20006324

08002004 <PrintTransmited>:
#include "includes.h"

extern UART_HandleTypeDef huart2;
//uint8_t pdu_buffer[PDU_LENGTH + 1];	// +1 for null terminator

void PrintTransmited(PDU *pdu) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	// Print the PDU contents
	printf("Transmit_Task received a PDU:\r\n");
 800200c:	4815      	ldr	r0, [pc, #84]	@ (8002064 <PrintTransmited+0x60>)
 800200e:	f008 ffb3 	bl	800af78 <puts>
	printf("Header: 0x%02X\r\n", pdu->header);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4813      	ldr	r0, [pc, #76]	@ (8002068 <PrintTransmited+0x64>)
 800201a:	f008 ff45 	bl	800aea8 <iprintf>
	printf("SID: 0x%02X\r\n", pdu->sid);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	4619      	mov	r1, r3
 8002024:	4811      	ldr	r0, [pc, #68]	@ (800206c <PrintTransmited+0x68>)
 8002026:	f008 ff3f 	bl	800aea8 <iprintf>
	printf("Payload: ");
 800202a:	4811      	ldr	r0, [pc, #68]	@ (8002070 <PrintTransmited+0x6c>)
 800202c:	f008 ff3c 	bl	800aea8 <iprintf>
	for (int i = 0; i < 6; i++) {
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e00b      	b.n	800204e <PrintTransmited+0x4a>
		printf("0x%02X ", pdu->data[i]);
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	3302      	adds	r3, #2
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	480c      	ldr	r0, [pc, #48]	@ (8002074 <PrintTransmited+0x70>)
 8002044:	f008 ff30 	bl	800aea8 <iprintf>
	for (int i = 0; i < 6; i++) {
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	ddf0      	ble.n	8002036 <PrintTransmited+0x32>
	}
	printf("\r\n");
 8002054:	4808      	ldr	r0, [pc, #32]	@ (8002078 <PrintTransmited+0x74>)
 8002056:	f008 ff8f 	bl	800af78 <puts>
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800d064 	.word	0x0800d064
 8002068:	0800d084 	.word	0x0800d084
 800206c:	0800d098 	.word	0x0800d098
 8002070:	0800d0a8 	.word	0x0800d0a8
 8002074:	0800d0b4 	.word	0x0800d0b4
 8002078:	0800d0bc 	.word	0x0800d0bc

0800207c <AsciiHexToByte>:

// Function to convert ASCII hex pair (e.g., "5A") into a uint8_t (0x5A)
uint8_t AsciiHexToByte(uint8_t high_nibble, uint8_t low_nibble) {
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
    uint8_t result = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]

    // Convert high nibble (e.g., '5' → 0x05)
    if (high_nibble >= '0' && high_nibble <= '9') {
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2b2f      	cmp	r3, #47	@ 0x2f
 8002094:	d908      	bls.n	80020a8 <AsciiHexToByte+0x2c>
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b39      	cmp	r3, #57	@ 0x39
 800209a:	d805      	bhi.n	80020a8 <AsciiHexToByte+0x2c>
        result = (high_nibble - '0') << 4;
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	3b30      	subs	r3, #48	@ 0x30
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e016      	b.n	80020d6 <AsciiHexToByte+0x5a>
    } else if (high_nibble >= 'A' && high_nibble <= 'F') {
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b40      	cmp	r3, #64	@ 0x40
 80020ac:	d908      	bls.n	80020c0 <AsciiHexToByte+0x44>
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	2b46      	cmp	r3, #70	@ 0x46
 80020b2:	d805      	bhi.n	80020c0 <AsciiHexToByte+0x44>
        result = (high_nibble - 'A' + 10) << 4;
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	3b37      	subs	r3, #55	@ 0x37
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	e00a      	b.n	80020d6 <AsciiHexToByte+0x5a>
    } else if (high_nibble >= 'a' && high_nibble <= 'f') {
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b60      	cmp	r3, #96	@ 0x60
 80020c4:	d907      	bls.n	80020d6 <AsciiHexToByte+0x5a>
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b66      	cmp	r3, #102	@ 0x66
 80020ca:	d804      	bhi.n	80020d6 <AsciiHexToByte+0x5a>
        result = (high_nibble - 'a' + 10) << 4;
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	3b57      	subs	r3, #87	@ 0x57
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	73fb      	strb	r3, [r7, #15]
    }

    // Convert low nibble (e.g., 'A' → 0x0A)
    if (low_nibble >= '0' && low_nibble <= '9') {
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80020da:	d90c      	bls.n	80020f6 <AsciiHexToByte+0x7a>
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b39      	cmp	r3, #57	@ 0x39
 80020e0:	d809      	bhi.n	80020f6 <AsciiHexToByte+0x7a>
        result |= (low_nibble - '0');
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	3b30      	subs	r3, #48	@ 0x30
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e01e      	b.n	8002134 <AsciiHexToByte+0xb8>
    } else if (low_nibble >= 'A' && low_nibble <= 'F') {
 80020f6:	79bb      	ldrb	r3, [r7, #6]
 80020f8:	2b40      	cmp	r3, #64	@ 0x40
 80020fa:	d90c      	bls.n	8002116 <AsciiHexToByte+0x9a>
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	2b46      	cmp	r3, #70	@ 0x46
 8002100:	d809      	bhi.n	8002116 <AsciiHexToByte+0x9a>
        result |= (low_nibble - 'A' + 10);
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	3b37      	subs	r3, #55	@ 0x37
 8002106:	b2db      	uxtb	r3, r3
 8002108:	b25a      	sxtb	r2, r3
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4313      	orrs	r3, r2
 8002110:	b25b      	sxtb	r3, r3
 8002112:	73fb      	strb	r3, [r7, #15]
 8002114:	e00e      	b.n	8002134 <AsciiHexToByte+0xb8>
    } else if (low_nibble >= 'a' && low_nibble <= 'f') {
 8002116:	79bb      	ldrb	r3, [r7, #6]
 8002118:	2b60      	cmp	r3, #96	@ 0x60
 800211a:	d90b      	bls.n	8002134 <AsciiHexToByte+0xb8>
 800211c:	79bb      	ldrb	r3, [r7, #6]
 800211e:	2b66      	cmp	r3, #102	@ 0x66
 8002120:	d808      	bhi.n	8002134 <AsciiHexToByte+0xb8>
        result |= (low_nibble - 'a' + 10);
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	3b57      	subs	r3, #87	@ 0x57
 8002126:	b2db      	uxtb	r3, r3
 8002128:	b25a      	sxtb	r2, r3
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4313      	orrs	r3, r2
 8002130:	b25b      	sxtb	r3, r3
 8002132:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <HAL_UART_RxCpltCallback+0x34>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10c      	bne.n	8002170 <HAL_UART_RxCpltCallback+0x2c>
		OS_ERR err;
		OSFlagPost(event_flags, UART_RX_EVENT, OS_FLAG_SET, &err);
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_UART_RxCpltCallback+0x38>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	f107 030f 	add.w	r3, r7, #15
 800215e:	2201      	movs	r2, #1
 8002160:	2110      	movs	r1, #16
 8002162:	f006 fe29 	bl	8008db8 <OSFlagPost>
		HAL_UART_Receive_IT(&huart2, pdu_buffer, PDU_LENGTH);
 8002166:	2207      	movs	r2, #7
 8002168:	4905      	ldr	r1, [pc, #20]	@ (8002180 <HAL_UART_RxCpltCallback+0x3c>)
 800216a:	4806      	ldr	r0, [pc, #24]	@ (8002184 <HAL_UART_RxCpltCallback+0x40>)
 800216c:	f003 fed4 	bl	8005f18 <HAL_UART_Receive_IT>
	}
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40004400 	.word	0x40004400
 800217c:	20006328 	.word	0x20006328
 8002180:	2000632c 	.word	0x2000632c
 8002184:	2000025c 	.word	0x2000025c

08002188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800218c:	f7ff fdc6 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	@ (80021c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	@ (80021c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <LoopForever+0xe>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	@ (80021d4 <LoopForever+0x16>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b6:	f009 f8cb 	bl	800b350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ba:	f7ff f99f 	bl	80014fc <main>

080021be <LoopForever>:

LoopForever:
    b LoopForever
 80021be:	e7fe      	b.n	80021be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021cc:	0800d670 	.word	0x0800d670
  ldr r2, =_sbss
 80021d0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021d4:	20007cd4 	.word	0x20007cd4

080021d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC1_2_IRQHandler>
	...

080021dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <HAL_Init+0x3c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <HAL_Init+0x3c>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f001 ff1c 	bl	8004030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021f8:	2000      	movs	r0, #0
 80021fa:	f000 f80f 	bl	800221c <HAL_InitTick>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	e001      	b.n	800220e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800220a:	f7ff fc0f 	bl	8001a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800220e:	79fb      	ldrb	r3, [r7, #7]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40022000 	.word	0x40022000

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_InitTick+0x6c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d023      	beq.n	8002278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002230:	4b16      	ldr	r3, [pc, #88]	@ (800228c <HAL_InitTick+0x70>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_InitTick+0x6c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f001 ff27 	bl	800409a <HAL_SYSTICK_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d809      	bhi.n	800226c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f001 fef1 	bl	8004046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002264:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <HAL_InitTick+0x74>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e007      	b.n	800227c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e004      	b.n	800227c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e001      	b.n	800227c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return uwTick;
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <HAL_GetTick+0x14>)
 800229a:	681b      	ldr	r3, [r3, #0]
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	20006354 	.word	0x20006354

080022ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	609a      	str	r2, [r3, #8]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	3360      	adds	r3, #96	@ 0x60
 8002326:	461a      	mov	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <LL_ADC_SetOffset+0x44>)
 8002336:	4013      	ands	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	4313      	orrs	r3, r2
 8002344:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	03fff000 	.word	0x03fff000

0800235c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3360      	adds	r3, #96	@ 0x60
 800236a:	461a      	mov	r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3360      	adds	r3, #96	@ 0x60
 8002398:	461a      	mov	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3330      	adds	r3, #48	@ 0x30
 80023f4:	461a      	mov	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	4413      	add	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	211f      	movs	r1, #31
 8002410:	fa01 f303 	lsl.w	r3, r1, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	0e9b      	lsrs	r3, r3, #26
 800241c:	f003 011f 	and.w	r1, r3, #31
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	431a      	orrs	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002430:	bf00      	nop
 8002432:	371c      	adds	r7, #28
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002448:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3314      	adds	r3, #20
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	0e5b      	lsrs	r3, r3, #25
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	0d1b      	lsrs	r3, r3, #20
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	2107      	movs	r1, #7
 8002490:	fa01 f303 	lsl.w	r3, r1, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	401a      	ands	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	0d1b      	lsrs	r3, r3, #20
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	431a      	orrs	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0318 	and.w	r3, r3, #24
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80024dc:	40d9      	lsrs	r1, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	400b      	ands	r3, r1
 80024e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	0007ffff 	.word	0x0007ffff

08002500 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 031f 	and.w	r3, r3, #31
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002548:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6093      	str	r3, [r2, #8]
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800256c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002570:	d101      	bne.n	8002576 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002598:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800260c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002610:	f043 0202 	orr.w	r2, r3, #2
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <LL_ADC_IsEnabled+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_IsEnabled+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d101      	bne.n	8002662 <LL_ADC_IsDisableOngoing+0x18>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_ADC_IsDisableOngoing+0x1a>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002680:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002684:	f043 0204 	orr.w	r2, r3, #4
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d101      	bne.n	80026d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b08      	cmp	r3, #8
 8002720:	d101      	bne.n	8002726 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e130      	b.n	80029b0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff f989 	bl	8001a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fef1 	bl	800255c <LL_ADC_IsDeepPowerDownEnabled>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fed7 	bl	8002538 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff0c 	bl	80025ac <LL_ADC_IsInternalRegulatorEnabled>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d115      	bne.n	80027c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fef0 	bl	8002584 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a4:	4b84      	ldr	r3, [pc, #528]	@ (80029b8 <HAL_ADC_Init+0x284>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	4a84      	ldr	r2, [pc, #528]	@ (80029bc <HAL_ADC_Init+0x288>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	099b      	lsrs	r3, r3, #6
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027b8:	e002      	b.n	80027c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f9      	bne.n	80027ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff feee 	bl	80025ac <LL_ADC_IsInternalRegulatorEnabled>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10d      	bne.n	80027f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027da:	f043 0210 	orr.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	f043 0201 	orr.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff62 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 80027fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 80c9 	bne.w	800299e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80c5 	bne.w	800299e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002818:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800281c:	f043 0202 	orr.w	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fefb 	bl	8002624 <LL_ADC_IsEnabled>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d115      	bne.n	8002860 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002834:	4862      	ldr	r0, [pc, #392]	@ (80029c0 <HAL_ADC_Init+0x28c>)
 8002836:	f7ff fef5 	bl	8002624 <LL_ADC_IsEnabled>
 800283a:	4604      	mov	r4, r0
 800283c:	4861      	ldr	r0, [pc, #388]	@ (80029c4 <HAL_ADC_Init+0x290>)
 800283e:	f7ff fef1 	bl	8002624 <LL_ADC_IsEnabled>
 8002842:	4603      	mov	r3, r0
 8002844:	431c      	orrs	r4, r3
 8002846:	4860      	ldr	r0, [pc, #384]	@ (80029c8 <HAL_ADC_Init+0x294>)
 8002848:	f7ff feec 	bl	8002624 <LL_ADC_IsEnabled>
 800284c:	4603      	mov	r3, r0
 800284e:	4323      	orrs	r3, r4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	485c      	ldr	r0, [pc, #368]	@ (80029cc <HAL_ADC_Init+0x298>)
 800285c:	f7ff fd26 	bl	80022ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e5b      	ldrb	r3, [r3, #25]
 8002864:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800286a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002870:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002876:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d106      	bne.n	800289c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	045b      	lsls	r3, r3, #17
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b44      	ldr	r3, [pc, #272]	@ (80029d0 <HAL_ADC_Init+0x29c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff1c 	bl	800270e <LL_ADC_INJ_IsConversionOngoing>
 80028d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d13d      	bne.n	800295a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13a      	bne.n	800295a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028f0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002900:	f023 0302 	bic.w	r3, r3, #2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	69b9      	ldr	r1, [r7, #24]
 800290a:	430b      	orrs	r3, r1
 800290c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002914:	2b01      	cmp	r3, #1
 8002916:	d118      	bne.n	800294a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800293a:	430a      	orrs	r2, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	e007      	b.n	800295a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10c      	bne.n	800297c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	f023 010f 	bic.w	r1, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30
 800297a:	e007      	b.n	800298c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 020f 	bic.w	r2, r2, #15
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	f023 0303 	bic.w	r3, r3, #3
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
 800299c:	e007      	b.n	80029ae <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3724      	adds	r7, #36	@ 0x24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}
 80029b8:	20000000 	.word	0x20000000
 80029bc:	053e2d63 	.word	0x053e2d63
 80029c0:	50040000 	.word	0x50040000
 80029c4:	50040100 	.word	0x50040100
 80029c8:	50040200 	.word	0x50040200
 80029cc:	50040300 	.word	0x50040300
 80029d0:	fff0c007 	.word	0xfff0c007

080029d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029dc:	4857      	ldr	r0, [pc, #348]	@ (8002b3c <HAL_ADC_Start+0x168>)
 80029de:	f7ff fd8f 	bl	8002500 <LL_ADC_GetMultimode>
 80029e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fe69 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f040 809c 	bne.w	8002b2e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_Start+0x30>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e097      	b.n	8002b34 <HAL_ADC_Start+0x160>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 f89b 	bl	8003b48 <ADC_Enable>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f040 8083 	bne.w	8002b24 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a42      	ldr	r2, [pc, #264]	@ (8002b40 <HAL_ADC_Start+0x16c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d002      	beq.n	8002a42 <HAL_ADC_Start+0x6e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_Start+0x70>
 8002a42:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <HAL_ADC_Start+0x170>)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d002      	beq.n	8002a52 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d105      	bne.n	8002a5e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6a:	d106      	bne.n	8002a7a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a70:	f023 0206 	bic.w	r2, r3, #6
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a78:	e002      	b.n	8002a80 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	221c      	movs	r2, #28
 8002a86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a2a      	ldr	r2, [pc, #168]	@ (8002b40 <HAL_ADC_Start+0x16c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d002      	beq.n	8002aa0 <HAL_ADC_Start+0xcc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADC_Start+0xce>
 8002aa0:	4b28      	ldr	r3, [pc, #160]	@ (8002b44 <HAL_ADC_Start+0x170>)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d008      	beq.n	8002abc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d002      	beq.n	8002abc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b09      	cmp	r3, #9
 8002aba:	d114      	bne.n	8002ae6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ad2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fdc6 	bl	8002670 <LL_ADC_REG_StartConversion>
 8002ae4:	e025      	b.n	8002b32 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <HAL_ADC_Start+0x16c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d002      	beq.n	8002b02 <HAL_ADC_Start+0x12e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	e000      	b.n	8002b04 <HAL_ADC_Start+0x130>
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_ADC_Start+0x170>)
 8002b04:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00f      	beq.n	8002b32 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b22:	e006      	b.n	8002b32 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b2c:	e001      	b.n	8002b32 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	50040300 	.word	0x50040300
 8002b40:	50040100 	.word	0x50040100
 8002b44:	50040000 	.word	0x50040000

08002b48 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_Stop+0x16>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e023      	b.n	8002ba6 <HAL_ADC_Stop+0x5e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b66:	2103      	movs	r1, #3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 ff31 	bl	80039d0 <ADC_ConversionStop>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f001 f86b 	bl	8003c54 <ADC_Disable>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bba:	4866      	ldr	r0, [pc, #408]	@ (8002d54 <HAL_ADC_PollForConversion+0x1a4>)
 8002bbc:	f7ff fca0 	bl	8002500 <LL_ADC_GetMultimode>
 8002bc0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d102      	bne.n	8002bd0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e02a      	b.n	8002c26 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d002      	beq.n	8002be2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	d111      	bne.n	8002c06 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0a4      	b.n	8002d4a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c00:	2304      	movs	r3, #4
 8002c02:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c04:	e00f      	b.n	8002c26 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002c06:	4853      	ldr	r0, [pc, #332]	@ (8002d54 <HAL_ADC_PollForConversion+0x1a4>)
 8002c08:	f7ff fc88 	bl	800251c <LL_ADC_GetMultiDMATransfer>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e093      	b.n	8002d4a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002c22:	2304      	movs	r3, #4
 8002c24:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c26:	f7ff fb35 	bl	8002294 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c2c:	e021      	b.n	8002c72 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d01d      	beq.n	8002c72 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002c36:	f7ff fb2d 	bl	8002294 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d302      	bcc.n	8002c4c <HAL_ADC_PollForConversion+0x9c>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d112      	bne.n	8002c72 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e06b      	b.n	8002d4a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0d6      	beq.n	8002c2e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fb94 	bl	80023be <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7e5b      	ldrb	r3, [r3, #25]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d118      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d111      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <HAL_ADC_PollForConversion+0x1a8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d002      	beq.n	8002ce6 <HAL_ADC_PollForConversion+0x136>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	e000      	b.n	8002ce8 <HAL_ADC_PollForConversion+0x138>
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <HAL_ADC_PollForConversion+0x1ac>)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d008      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d002      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b09      	cmp	r3, #9
 8002d00:	d104      	bne.n	8002d0c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	e00c      	b.n	8002d26 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a11      	ldr	r2, [pc, #68]	@ (8002d58 <HAL_ADC_PollForConversion+0x1a8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d002      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x16c>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	e000      	b.n	8002d1e <HAL_ADC_PollForConversion+0x16e>
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_ADC_PollForConversion+0x1ac>)
 8002d1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d104      	bne.n	8002d36 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2208      	movs	r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e008      	b.n	8002d48 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	220c      	movs	r2, #12
 8002d46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	50040300 	.word	0x50040300
 8002d58:	50040100 	.word	0x50040100
 8002d5c:	50040000 	.word	0x50040000

08002d60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d98:	4882      	ldr	r0, [pc, #520]	@ (8002fa4 <HAL_ADC_IRQHandler+0x228>)
 8002d9a:	f7ff fbb1 	bl	8002500 <LL_ADC_GetMultimode>
 8002d9e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d017      	beq.n	8002dda <HAL_ADC_IRQHandler+0x5e>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f003 0310 	and.w	r3, r3, #16
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f001 f855 	bl	8003e7c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_IRQHandler+0x72>
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8083 	beq.w	8002f00 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d07d      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff facc 	bl	80023be <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d062      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa8 <HAL_ADC_IRQHandler+0x22c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d002      	beq.n	8002e3c <HAL_ADC_IRQHandler+0xc0>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	e000      	b.n	8002e3e <HAL_ADC_IRQHandler+0xc2>
 8002e3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002fac <HAL_ADC_IRQHandler+0x230>)
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d008      	beq.n	8002e58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d002      	beq.n	8002e58 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	d104      	bne.n	8002e62 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	e00c      	b.n	8002e7c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a50      	ldr	r2, [pc, #320]	@ (8002fa8 <HAL_ADC_IRQHandler+0x22c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d002      	beq.n	8002e72 <HAL_ADC_IRQHandler+0xf6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	e000      	b.n	8002e74 <HAL_ADC_IRQHandler+0xf8>
 8002e72:	4b4e      	ldr	r3, [pc, #312]	@ (8002fac <HAL_ADC_IRQHandler+0x230>)
 8002e74:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d135      	bne.n	8002ef2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d12e      	bne.n	8002ef2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fc11 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11a      	bne.n	8002eda <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020c 	bic.w	r2, r2, #12
 8002eb2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d112      	bne.n	8002ef2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	f043 0201 	orr.w	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ed8:	e00b      	b.n	8002ef2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ede:	f043 0210 	orr.w	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f95c 	bl	80031b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	220c      	movs	r2, #12
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_IRQHandler+0x198>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 809f 	beq.w	800305e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8099 	beq.w	800305e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fa77 	bl	800243c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f4e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fa32 	bl	80023be <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f5a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a11      	ldr	r2, [pc, #68]	@ (8002fa8 <HAL_ADC_IRQHandler+0x22c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d002      	beq.n	8002f6c <HAL_ADC_IRQHandler+0x1f0>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	e000      	b.n	8002f6e <HAL_ADC_IRQHandler+0x1f2>
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_ADC_IRQHandler+0x230>)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d008      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d002      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b07      	cmp	r3, #7
 8002f86:	d104      	bne.n	8002f92 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	e013      	b.n	8002fba <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_ADC_IRQHandler+0x22c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_ADC_IRQHandler+0x234>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	e007      	b.n	8002fb2 <HAL_ADC_IRQHandler+0x236>
 8002fa2:	bf00      	nop
 8002fa4:	50040300 	.word	0x50040300
 8002fa8:	50040100 	.word	0x50040100
 8002fac:	50040000 	.word	0x50040000
 8002fb0:	4b7d      	ldr	r3, [pc, #500]	@ (80031a8 <HAL_ADC_IRQHandler+0x42c>)
 8002fb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d047      	beq.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_ADC_IRQHandler+0x25e>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03f      	beq.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d13a      	bne.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d133      	bne.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d12e      	bne.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fb89 	bl	800270e <LL_ADC_INJ_IsConversionOngoing>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d11a      	bne.n	8003038 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003010:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d112      	bne.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302e:	f043 0201 	orr.w	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	@ 0x54
 8003036:	e00b      	b.n	8003050 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303c:	f043 0210 	orr.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f043 0201 	orr.w	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 feeb 	bl	8003e2c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2260      	movs	r2, #96	@ 0x60
 800305c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d011      	beq.n	800308c <HAL_ADC_IRQHandler+0x310>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003076:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8a0 	bl	80031c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2280      	movs	r2, #128	@ 0x80
 800308a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <HAL_ADC_IRQHandler+0x340>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fed1 	bl	8003e54 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <HAL_ADC_IRQHandler+0x370>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fec3 	bl	8003e68 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d036      	beq.n	8003164 <HAL_ADC_IRQHandler+0x3e8>
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d031      	beq.n	8003164 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003108:	2301      	movs	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
 800310c:	e014      	b.n	8003138 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003114:	4825      	ldr	r0, [pc, #148]	@ (80031ac <HAL_ADC_IRQHandler+0x430>)
 8003116:	f7ff fa01 	bl	800251c <LL_ADC_GetMultiDMATransfer>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003120:	2301      	movs	r3, #1
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
 8003124:	e008      	b.n	8003138 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003134:	2301      	movs	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10e      	bne.n	800315c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003142:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f83e 	bl	80031d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316a:	2b00      	cmp	r3, #0
 800316c:	d018      	beq.n	80031a0 <HAL_ADC_IRQHandler+0x424>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	f043 0208 	orr.w	r2, r3, #8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003198:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fe50 	bl	8003e40 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031a0:	bf00      	nop
 80031a2:	3728      	adds	r7, #40	@ 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	50040000 	.word	0x50040000
 80031ac:	50040300 	.word	0x50040300

080031b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b0b6      	sub	sp, #216	@ 0xd8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x22>
 800320a:	2302      	movs	r3, #2
 800320c:	e3c9      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x7b6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fa50 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 83aa 	bne.w	800397c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d824      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	3b02      	subs	r3, #2
 800323e:	2b03      	cmp	r3, #3
 8003240:	d81b      	bhi.n	800327a <HAL_ADC_ConfigChannel+0x8e>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <HAL_ADC_ConfigChannel+0x5c>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	08003259 	.word	0x08003259
 800324c:	08003261 	.word	0x08003261
 8003250:	08003269 	.word	0x08003269
 8003254:	08003271 	.word	0x08003271
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003258:	230c      	movs	r3, #12
 800325a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800325e:	e010      	b.n	8003282 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003260:	2312      	movs	r3, #18
 8003262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003266:	e00c      	b.n	8003282 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003268:	2318      	movs	r3, #24
 800326a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800326e:	e008      	b.n	8003282 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003278:	e003      	b.n	8003282 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800327a:	2306      	movs	r3, #6
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003280:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003290:	f7ff f8a8 	bl	80023e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fa11 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 800329e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fa31 	bl	800270e <LL_ADC_INJ_IsConversionOngoing>
 80032ac:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f040 81a4 	bne.w	8003602 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 819f 	bne.w	8003602 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6819      	ldr	r1, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f7ff f8c6 	bl	8002462 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	08db      	lsrs	r3, r3, #3
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00a      	beq.n	800330e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6919      	ldr	r1, [r3, #16]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003308:	f7ff f804 	bl	8002314 <LL_ADC_SetOffset>
 800330c:	e179      	b.n	8003602 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f821 	bl	800235c <LL_ADC_GetOffsetChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <HAL_ADC_ConfigChannel+0x14e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff f816 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	e01e      	b.n	8003378 <HAL_ADC_ConfigChannel+0x18c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f80b 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800335c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e004      	b.n	8003376 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800336c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x1a4>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	e018      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x1d6>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80033a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80033ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	e004      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80033b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d106      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe ffda 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2101      	movs	r1, #1
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe ffbe 	bl	800235c <LL_ADC_GetOffsetChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x214>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe ffb3 	bl	800235c <LL_ADC_GetOffsetChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	f003 021f 	and.w	r2, r3, #31
 80033fe:	e01e      	b.n	800343e <HAL_ADC_ConfigChannel+0x252>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ffa8 	bl	800235c <LL_ADC_GetOffsetChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800341e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003422:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800342e:	2320      	movs	r3, #32
 8003430:	e004      	b.n	800343c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x26a>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0e9b      	lsrs	r3, r3, #26
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	e018      	b.n	8003488 <HAL_ADC_ConfigChannel+0x29c>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800346a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800346e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003472:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e004      	b.n	8003488 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800347e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003488:	429a      	cmp	r2, r3
 800348a:	d106      	bne.n	800349a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2200      	movs	r2, #0
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f7fe ff77 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2102      	movs	r1, #2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fe ff5b 	bl	800235c <LL_ADC_GetOffsetChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x2da>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2102      	movs	r1, #2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe ff50 	bl	800235c <LL_ADC_GetOffsetChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	0e9b      	lsrs	r3, r3, #26
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	e01e      	b.n	8003504 <HAL_ADC_ConfigChannel+0x318>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ff45 	bl	800235c <LL_ADC_GetOffsetChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80034e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80034ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034f4:	2320      	movs	r3, #32
 80034f6:	e004      	b.n	8003502 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80034f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <HAL_ADC_ConfigChannel+0x330>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	e014      	b.n	8003546 <HAL_ADC_ConfigChannel+0x35a>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003524:	fa93 f3a3 	rbit	r3, r3
 8003528:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800352a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800352c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003530:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e004      	b.n	8003546 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003546:	429a      	cmp	r2, r3
 8003548:	d106      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	2102      	movs	r1, #2
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe ff18 	bl	8002388 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2103      	movs	r1, #3
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fefc 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10a      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x398>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2103      	movs	r1, #3
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fef1 	bl	800235c <LL_ADC_GetOffsetChannel>
 800357a:	4603      	mov	r3, r0
 800357c:	0e9b      	lsrs	r3, r3, #26
 800357e:	f003 021f 	and.w	r2, r3, #31
 8003582:	e017      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x3c8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2103      	movs	r1, #3
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fee6 	bl	800235c <LL_ADC_GetOffsetChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800359c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80035a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e003      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80035aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x3e0>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0e9b      	lsrs	r3, r3, #26
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	e011      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x404>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80035da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80035de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d106      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2103      	movs	r1, #3
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fec3 	bl	8002388 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f80c 	bl	8002624 <LL_ADC_IsEnabled>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 8140 	bne.w	8003894 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	461a      	mov	r2, r3
 8003622:	f7fe ff49 	bl	80024b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4a8f      	ldr	r2, [pc, #572]	@ (8003868 <HAL_ADC_ConfigChannel+0x67c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	f040 8131 	bne.w	8003894 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10b      	bne.n	800365a <HAL_ADC_ConfigChannel+0x46e>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e9b      	lsrs	r3, r3, #26
 8003648:	3301      	adds	r3, #1
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	2b09      	cmp	r3, #9
 8003650:	bf94      	ite	ls
 8003652:	2301      	movls	r3, #1
 8003654:	2300      	movhi	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e019      	b.n	800368e <HAL_ADC_ConfigChannel+0x4a2>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003662:	fa93 f3a3 	rbit	r3, r3
 8003666:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800366c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003672:	2320      	movs	r3, #32
 8003674:	e003      	b.n	800367e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2b09      	cmp	r3, #9
 8003686:	bf94      	ite	ls
 8003688:	2301      	movls	r3, #1
 800368a:	2300      	movhi	r3, #0
 800368c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800368e:	2b00      	cmp	r3, #0
 8003690:	d079      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d107      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x4c2>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	3301      	adds	r3, #1
 80036a6:	069b      	lsls	r3, r3, #26
 80036a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ac:	e015      	b.n	80036da <HAL_ADC_ConfigChannel+0x4ee>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80036bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036be:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80036c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e003      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	069b      	lsls	r3, r3, #26
 80036d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x50e>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0e9b      	lsrs	r3, r3, #26
 80036ec:	3301      	adds	r3, #1
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	e017      	b.n	800372a <HAL_ADC_ConfigChannel+0x53e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800370a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800370c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003712:	2320      	movs	r3, #32
 8003714:	e003      	b.n	800371e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	ea42 0103 	orr.w	r1, r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x564>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	0e9b      	lsrs	r3, r3, #26
 8003740:	3301      	adds	r3, #1
 8003742:	f003 021f 	and.w	r2, r3, #31
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	051b      	lsls	r3, r3, #20
 800374e:	e018      	b.n	8003782 <HAL_ADC_ConfigChannel+0x596>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800376c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f003 021f 	and.w	r2, r3, #31
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003782:	430b      	orrs	r3, r1
 8003784:	e081      	b.n	800388a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x5b6>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	3301      	adds	r3, #1
 800379a:	069b      	lsls	r3, r3, #26
 800379c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a0:	e015      	b.n	80037ce <HAL_ADC_ConfigChannel+0x5e2>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e003      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	fab3 f383 	clz	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	069b      	lsls	r3, r3, #26
 80037ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x602>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	3301      	adds	r3, #1
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	2101      	movs	r1, #1
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	e017      	b.n	800381e <HAL_ADC_ConfigChannel+0x632>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	61bb      	str	r3, [r7, #24]
  return result;
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e003      	b.n	8003812 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	3301      	adds	r3, #1
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	ea42 0103 	orr.w	r1, r2, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_ADC_ConfigChannel+0x65e>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	0e9b      	lsrs	r3, r3, #26
 8003834:	3301      	adds	r3, #1
 8003836:	f003 021f 	and.w	r2, r3, #31
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	3b1e      	subs	r3, #30
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003848:	e01e      	b.n	8003888 <HAL_ADC_ConfigChannel+0x69c>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	60fb      	str	r3, [r7, #12]
  return result;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003862:	2320      	movs	r3, #32
 8003864:	e006      	b.n	8003874 <HAL_ADC_ConfigChannel+0x688>
 8003866:	bf00      	nop
 8003868:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f003 021f 	and.w	r2, r3, #31
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	3b1e      	subs	r3, #30
 8003882:	051b      	lsls	r3, r3, #20
 8003884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003888:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800388e:	4619      	mov	r1, r3
 8003890:	f7fe fde7 	bl	8002462 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4b44      	ldr	r3, [pc, #272]	@ (80039ac <HAL_ADC_ConfigChannel+0x7c0>)
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d07a      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038a0:	4843      	ldr	r0, [pc, #268]	@ (80039b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80038a2:	f7fe fd29 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 80038a6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a41      	ldr	r2, [pc, #260]	@ (80039b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d12c      	bne.n	800390e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d126      	bne.n	800390e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3c      	ldr	r2, [pc, #240]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7cc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_ADC_ConfigChannel+0x6e8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3b      	ldr	r2, [pc, #236]	@ (80039bc <HAL_ADC_ConfigChannel+0x7d0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d15d      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038dc:	4619      	mov	r1, r3
 80038de:	4834      	ldr	r0, [pc, #208]	@ (80039b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80038e0:	f7fe fcf7 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038e4:	4b36      	ldr	r3, [pc, #216]	@ (80039c0 <HAL_ADC_ConfigChannel+0x7d4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	4a36      	ldr	r2, [pc, #216]	@ (80039c4 <HAL_ADC_ConfigChannel+0x7d8>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038fe:	e002      	b.n	8003906 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	3b01      	subs	r3, #1
 8003904:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f9      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800390c:	e040      	b.n	8003990 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2d      	ldr	r2, [pc, #180]	@ (80039c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d118      	bne.n	800394a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800391c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d112      	bne.n	800394a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a23      	ldr	r2, [pc, #140]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7cc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_ADC_ConfigChannel+0x74c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <HAL_ADC_ConfigChannel+0x7d0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d12d      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003938:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800393c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003940:	4619      	mov	r1, r3
 8003942:	481b      	ldr	r0, [pc, #108]	@ (80039b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003944:	f7fe fcc5 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003948:	e024      	b.n	8003994 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a1f      	ldr	r2, [pc, #124]	@ (80039cc <HAL_ADC_ConfigChannel+0x7e0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d120      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11a      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a14      	ldr	r2, [pc, #80]	@ (80039b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d115      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800396e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003972:	4619      	mov	r1, r3
 8003974:	480e      	ldr	r0, [pc, #56]	@ (80039b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003976:	f7fe fcac 	bl	80022d2 <LL_ADC_SetCommonPathInternalCh>
 800397a:	e00c      	b.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800398e:	e002      	b.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003990:	bf00      	nop
 8003992:	e000      	b.n	8003996 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003994:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800399e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	37d8      	adds	r7, #216	@ 0xd8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	80080000 	.word	0x80080000
 80039b0:	50040300 	.word	0x50040300
 80039b4:	c7520000 	.word	0xc7520000
 80039b8:	50040000 	.word	0x50040000
 80039bc:	50040200 	.word	0x50040200
 80039c0:	20000000 	.word	0x20000000
 80039c4:	053e2d63 	.word	0x053e2d63
 80039c8:	cb840000 	.word	0xcb840000
 80039cc:	80000001 	.word	0x80000001

080039d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fe6a 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 80039ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fe8b 	bl	800270e <LL_ADC_INJ_IsConversionOngoing>
 80039f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8098 	beq.w	8003b38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02a      	beq.n	8003a6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7e5b      	ldrb	r3, [r3, #25]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d126      	bne.n	8003a6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7e1b      	ldrb	r3, [r3, #24]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d122      	bne.n	8003a6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a2a:	e014      	b.n	8003a56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4a45      	ldr	r2, [pc, #276]	@ (8003b44 <ADC_ConversionStop+0x174>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d90d      	bls.n	8003a50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	f043 0210 	orr.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e074      	b.n	8003b3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	3301      	adds	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a60:	2b40      	cmp	r3, #64	@ 0x40
 8003a62:	d1e3      	bne.n	8003a2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2240      	movs	r2, #64	@ 0x40
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d014      	beq.n	8003a9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fe22 	bl	80026c0 <LL_ADC_REG_IsConversionOngoing>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00c      	beq.n	8003a9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fddf 	bl	800264a <LL_ADC_IsDisableOngoing>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fdfe 	bl	8002698 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d014      	beq.n	8003acc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fe31 	bl	800270e <LL_ADC_INJ_IsConversionOngoing>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fdc7 	bl	800264a <LL_ADC_IsDisableOngoing>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fe0d 	bl	80026e6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d005      	beq.n	8003ade <ADC_ConversionStop+0x10e>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d105      	bne.n	8003ae4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ad8:	230c      	movs	r3, #12
 8003ada:	617b      	str	r3, [r7, #20]
        break;
 8003adc:	e005      	b.n	8003aea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ade:	2308      	movs	r3, #8
 8003ae0:	617b      	str	r3, [r7, #20]
        break;
 8003ae2:	e002      	b.n	8003aea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ae4:	2304      	movs	r3, #4
 8003ae6:	617b      	str	r3, [r7, #20]
        break;
 8003ae8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003aea:	f7fe fbd3 	bl	8002294 <HAL_GetTick>
 8003aee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003af0:	e01b      	b.n	8003b2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003af2:	f7fe fbcf 	bl	8002294 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d914      	bls.n	8003b2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1dc      	bne.n	8003af2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	a33fffff 	.word	0xa33fffff

08003b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fd63 	bl	8002624 <LL_ADC_IsEnabled>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d169      	bne.n	8003c38 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b36      	ldr	r3, [pc, #216]	@ (8003c44 <ADC_Enable+0xfc>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e055      	b.n	8003c3a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fd1e 	bl	80025d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b98:	482b      	ldr	r0, [pc, #172]	@ (8003c48 <ADC_Enable+0x100>)
 8003b9a:	f7fe fbad 	bl	80022f8 <LL_ADC_GetCommonPathInternalCh>
 8003b9e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ba0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ba8:	4b28      	ldr	r3, [pc, #160]	@ (8003c4c <ADC_Enable+0x104>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	4a28      	ldr	r2, [pc, #160]	@ (8003c50 <ADC_Enable+0x108>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bc2:	e002      	b.n	8003bca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f9      	bne.n	8003bc4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bd0:	f7fe fb60 	bl	8002294 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd6:	e028      	b.n	8003c2a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fd21 	bl	8002624 <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fcf1 	bl	80025d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bf2:	f7fe fb4f 	bl	8002294 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d914      	bls.n	8003c2a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d00d      	beq.n	8003c2a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c12:	f043 0210 	orr.w	r2, r3, #16
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1e:	f043 0201 	orr.w	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e007      	b.n	8003c3a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d1cf      	bne.n	8003bd8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	8000003f 	.word	0x8000003f
 8003c48:	50040300 	.word	0x50040300
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	053e2d63 	.word	0x053e2d63

08003c54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fcf2 	bl	800264a <LL_ADC_IsDisableOngoing>
 8003c66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fcd9 	bl	8002624 <LL_ADC_IsEnabled>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d047      	beq.n	8003d08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d144      	bne.n	8003d08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030d 	and.w	r3, r3, #13
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d10c      	bne.n	8003ca6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fcb3 	bl	80025fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c9e:	f7fe faf9 	bl	8002294 <HAL_GetTick>
 8003ca2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ca4:	e029      	b.n	8003cfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003caa:	f043 0210 	orr.w	r2, r3, #16
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e023      	b.n	8003d0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003cc2:	f7fe fae7 	bl	8002294 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d914      	bls.n	8003cfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e007      	b.n	8003d0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1dc      	bne.n	8003cc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <LL_ADC_StartCalibration>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d58:	d101      	bne.n	8003d5e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e04d      	b.n	8003e24 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff5f 	bl	8003c54 <ADC_Disable>
 8003d96:	4603      	mov	r3, r0
 8003d98:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d136      	bne.n	8003e0e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	f043 0202 	orr.w	r2, r3, #2
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ffa9 	bl	8003d12 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dc0:	e014      	b.n	8003dec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003dce:	d30d      	bcc.n	8003dec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	f023 0312 	bic.w	r3, r3, #18
 8003dd8:	f043 0210 	orr.w	r2, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e01b      	b.n	8003e24 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff ffa7 	bl	8003d44 <LL_ADC_IsCalibrationOnGoing>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e2      	bne.n	8003dc2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	f023 0303 	bic.w	r3, r3, #3
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e0c:	e005      	b.n	8003e1a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e12:	f043 0210 	orr.w	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	@ (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4907      	ldr	r1, [pc, #28]	@ (8003f2c <__NVIC_EnableIRQ+0x38>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000e100 	.word	0xe000e100

08003f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	6039      	str	r1, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db0a      	blt.n	8003f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	490c      	ldr	r1, [pc, #48]	@ (8003f7c <__NVIC_SetPriority+0x4c>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	440b      	add	r3, r1
 8003f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f58:	e00a      	b.n	8003f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4908      	ldr	r1, [pc, #32]	@ (8003f80 <__NVIC_SetPriority+0x50>)
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3b04      	subs	r3, #4
 8003f68:	0112      	lsls	r2, r2, #4
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	761a      	strb	r2, [r3, #24]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e100 	.word	0xe000e100
 8003f80:	e000ed00 	.word	0xe000ed00

08003f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b089      	sub	sp, #36	@ 0x24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f1c3 0307 	rsb	r3, r3, #7
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	bf28      	it	cs
 8003fa2:	2304      	movcs	r3, #4
 8003fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2b06      	cmp	r3, #6
 8003fac:	d902      	bls.n	8003fb4 <NVIC_EncodePriority+0x30>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3b03      	subs	r3, #3
 8003fb2:	e000      	b.n	8003fb6 <NVIC_EncodePriority+0x32>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43da      	mvns	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	43d9      	mvns	r1, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fdc:	4313      	orrs	r3, r2
         );
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	@ 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ffc:	d301      	bcc.n	8004002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ffe:	2301      	movs	r3, #1
 8004000:	e00f      	b.n	8004022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004002:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <SysTick_Config+0x40>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800400a:	210f      	movs	r1, #15
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	f7ff ff8e 	bl	8003f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <SysTick_Config+0x40>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800401a:	4b04      	ldr	r3, [pc, #16]	@ (800402c <SysTick_Config+0x40>)
 800401c:	2207      	movs	r2, #7
 800401e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000e010 	.word	0xe000e010

08004030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff29 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004058:	f7ff ff3e 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 800405c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff8e 	bl	8003f84 <NVIC_EncodePriority>
 8004068:	4602      	mov	r2, r0
 800406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff ff5d 	bl	8003f30 <__NVIC_SetPriority>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b082      	sub	sp, #8
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff ff31 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffa2 	bl	8003fec <SysTick_Config>
 80040a8:	4603      	mov	r3, r0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d008      	beq.n	80040dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e022      	b.n	8004122 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 020e 	bic.w	r2, r2, #14
 80040ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	f003 021c 	and.w	r2, r3, #28
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f202 	lsl.w	r2, r1, r2
 800410e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d005      	beq.n	8004152 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2204      	movs	r2, #4
 800414a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e029      	b.n	80041a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 020e 	bic.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f003 021c 	and.w	r2, r3, #28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
    }
  }
  return status;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041be:	e17f      	b.n	80044c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2101      	movs	r1, #1
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	fa01 f303 	lsl.w	r3, r1, r3
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 8171 	beq.w	80044ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d005      	beq.n	80041f0 <HAL_GPIO_Init+0x40>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d130      	bne.n	8004252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2203      	movs	r2, #3
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004226:	2201      	movs	r2, #1
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4013      	ands	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	f003 0201 	and.w	r2, r3, #1
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b03      	cmp	r3, #3
 800425c:	d118      	bne.n	8004290 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004264:	2201      	movs	r2, #1
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4013      	ands	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0201 	and.w	r2, r3, #1
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d017      	beq.n	80042cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d123      	bne.n	8004320 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	220f      	movs	r2, #15
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	08da      	lsrs	r2, r3, #3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3208      	adds	r2, #8
 800431a:	6939      	ldr	r1, [r7, #16]
 800431c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2203      	movs	r2, #3
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80ac 	beq.w	80044ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004362:	4b5f      	ldr	r3, [pc, #380]	@ (80044e0 <HAL_GPIO_Init+0x330>)
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	4a5e      	ldr	r2, [pc, #376]	@ (80044e0 <HAL_GPIO_Init+0x330>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6613      	str	r3, [r2, #96]	@ 0x60
 800436e:	4b5c      	ldr	r3, [pc, #368]	@ (80044e0 <HAL_GPIO_Init+0x330>)
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800437a:	4a5a      	ldr	r2, [pc, #360]	@ (80044e4 <HAL_GPIO_Init+0x334>)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004386:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	220f      	movs	r2, #15
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043a4:	d025      	beq.n	80043f2 <HAL_GPIO_Init+0x242>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a4f      	ldr	r2, [pc, #316]	@ (80044e8 <HAL_GPIO_Init+0x338>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <HAL_GPIO_Init+0x23e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4e      	ldr	r2, [pc, #312]	@ (80044ec <HAL_GPIO_Init+0x33c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d019      	beq.n	80043ea <HAL_GPIO_Init+0x23a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4d      	ldr	r2, [pc, #308]	@ (80044f0 <HAL_GPIO_Init+0x340>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_GPIO_Init+0x236>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4c      	ldr	r2, [pc, #304]	@ (80044f4 <HAL_GPIO_Init+0x344>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_GPIO_Init+0x232>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4b      	ldr	r2, [pc, #300]	@ (80044f8 <HAL_GPIO_Init+0x348>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <HAL_GPIO_Init+0x22e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4a      	ldr	r2, [pc, #296]	@ (80044fc <HAL_GPIO_Init+0x34c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_GPIO_Init+0x22a>
 80043d6:	2306      	movs	r3, #6
 80043d8:	e00c      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043da:	2307      	movs	r3, #7
 80043dc:	e00a      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043de:	2305      	movs	r3, #5
 80043e0:	e008      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043e2:	2304      	movs	r3, #4
 80043e4:	e006      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043e6:	2303      	movs	r3, #3
 80043e8:	e004      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e002      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_GPIO_Init+0x244>
 80043f2:	2300      	movs	r3, #0
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	f002 0203 	and.w	r2, r2, #3
 80043fa:	0092      	lsls	r2, r2, #2
 80043fc:	4093      	lsls	r3, r2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004404:	4937      	ldr	r1, [pc, #220]	@ (80044e4 <HAL_GPIO_Init+0x334>)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3302      	adds	r3, #2
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004412:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_GPIO_Init+0x350>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	43db      	mvns	r3, r3
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004436:	4a32      	ldr	r2, [pc, #200]	@ (8004500 <HAL_GPIO_Init+0x350>)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800443c:	4b30      	ldr	r3, [pc, #192]	@ (8004500 <HAL_GPIO_Init+0x350>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	43db      	mvns	r3, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4013      	ands	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <HAL_GPIO_Init+0x350>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004466:	4b26      	ldr	r3, [pc, #152]	@ (8004500 <HAL_GPIO_Init+0x350>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800448a:	4a1d      	ldr	r2, [pc, #116]	@ (8004500 <HAL_GPIO_Init+0x350>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004490:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <HAL_GPIO_Init+0x350>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044b4:	4a12      	ldr	r2, [pc, #72]	@ (8004500 <HAL_GPIO_Init+0x350>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	3301      	adds	r3, #1
 80044be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f47f ae78 	bne.w	80041c0 <HAL_GPIO_Init+0x10>
  }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40010000 	.word	0x40010000
 80044e8:	48000400 	.word	0x48000400
 80044ec:	48000800 	.word	0x48000800
 80044f0:	48000c00 	.word	0x48000c00
 80044f4:	48001000 	.word	0x48001000
 80044f8:	48001400 	.word	0x48001400
 80044fc:	48001800 	.word	0x48001800
 8004500:	40010400 	.word	0x40010400

08004504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	807b      	strh	r3, [r7, #2]
 8004510:	4613      	mov	r3, r2
 8004512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004514:	787b      	ldrb	r3, [r7, #1]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800451a:	887a      	ldrh	r2, [r7, #2]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004520:	e002      	b.n	8004528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4013      	ands	r3, r2
 800454c:	041a      	lsls	r2, r3, #16
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	43d9      	mvns	r1, r3
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	400b      	ands	r3, r1
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d006      	beq.n	800458c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004580:	88fb      	ldrh	r3, [r7, #6]
 8004582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd f88c 	bl	80016a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40010400 	.word	0x40010400

08004598 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800459c:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40007000 	.word	0x40007000

080045b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c2:	d130      	bne.n	8004626 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045c4:	4b23      	ldr	r3, [pc, #140]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80045cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d0:	d038      	beq.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80045da:	4a1e      	ldr	r2, [pc, #120]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004658 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2232      	movs	r2, #50	@ 0x32
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
 80045ec:	4a1b      	ldr	r2, [pc, #108]	@ (800465c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0c9b      	lsrs	r3, r3, #18
 80045f4:	3301      	adds	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80045f8:	e002      	b.n	8004600 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004600:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460c:	d102      	bne.n	8004614 <HAL_PWREx_ControlVoltageScaling+0x60>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f2      	bne.n	80045fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004620:	d110      	bne.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004632:	d007      	beq.n	8004644 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004634:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800463c:	4a05      	ldr	r2, [pc, #20]	@ (8004654 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800463e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004642:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40007000 	.word	0x40007000
 8004658:	20000000 	.word	0x20000000
 800465c:	431bde83 	.word	0x431bde83

08004660 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e3ca      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004672:	4b97      	ldr	r3, [pc, #604]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800467c:	4b94      	ldr	r3, [pc, #592]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80e4 	beq.w	800485c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_RCC_OscConfig+0x4a>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	f040 808b 	bne.w	80047b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	f040 8087 	bne.w	80047b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046aa:	4b89      	ldr	r3, [pc, #548]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e3a2      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	4b82      	ldr	r3, [pc, #520]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_RCC_OscConfig+0x7c>
 80046d2:	4b7f      	ldr	r3, [pc, #508]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046da:	e005      	b.n	80046e8 <HAL_RCC_OscConfig+0x88>
 80046dc:	4b7c      	ldr	r3, [pc, #496]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80046de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d223      	bcs.n	8004734 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fd55 	bl	80051a0 <RCC_SetFlashLatencyFromMSIRange>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e383      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004700:	4b73      	ldr	r3, [pc, #460]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a72      	ldr	r2, [pc, #456]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004706:	f043 0308 	orr.w	r3, r3, #8
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	4b70      	ldr	r3, [pc, #448]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	496d      	ldr	r1, [pc, #436]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471e:	4b6c      	ldr	r3, [pc, #432]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	4968      	ldr	r1, [pc, #416]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
 8004732:	e025      	b.n	8004780 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004734:	4b66      	ldr	r3, [pc, #408]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a65      	ldr	r2, [pc, #404]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800473a:	f043 0308 	orr.w	r3, r3, #8
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b63      	ldr	r3, [pc, #396]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	4960      	ldr	r1, [pc, #384]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004752:	4b5f      	ldr	r3, [pc, #380]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	495b      	ldr	r1, [pc, #364]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004762:	4313      	orrs	r3, r2
 8004764:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd15 	bl	80051a0 <RCC_SetFlashLatencyFromMSIRange>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e343      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004780:	f000 fc4a 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b52      	ldr	r3, [pc, #328]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	4950      	ldr	r1, [pc, #320]	@ (80048d4 <HAL_RCC_OscConfig+0x274>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	4a4e      	ldr	r2, [pc, #312]	@ (80048d8 <HAL_RCC_OscConfig+0x278>)
 800479e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047a0:	4b4e      	ldr	r3, [pc, #312]	@ (80048dc <HAL_RCC_OscConfig+0x27c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fd fd39 	bl	800221c <HAL_InitTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d052      	beq.n	800485a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	e327      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d032      	beq.n	8004826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047c0:	4b43      	ldr	r3, [pc, #268]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a42      	ldr	r2, [pc, #264]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80047c6:	f043 0301 	orr.w	r3, r3, #1
 80047ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047cc:	f7fd fd62 	bl	8002294 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047d4:	f7fd fd5e 	bl	8002294 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e310      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047e6:	4b3a      	ldr	r3, [pc, #232]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0f0      	beq.n	80047d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047f2:	4b37      	ldr	r3, [pc, #220]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a36      	ldr	r2, [pc, #216]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80047f8:	f043 0308 	orr.w	r3, r3, #8
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	4b34      	ldr	r3, [pc, #208]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4931      	ldr	r1, [pc, #196]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800480c:	4313      	orrs	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004810:	4b2f      	ldr	r3, [pc, #188]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	492c      	ldr	r1, [pc, #176]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	e01a      	b.n	800485c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004826:	4b2a      	ldr	r3, [pc, #168]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a29      	ldr	r2, [pc, #164]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800482c:	f023 0301 	bic.w	r3, r3, #1
 8004830:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004832:	f7fd fd2f 	bl	8002294 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800483a:	f7fd fd2b 	bl	8002294 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e2dd      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800484c:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x1da>
 8004858:	e000      	b.n	800485c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800485a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d074      	beq.n	8004952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	2b08      	cmp	r3, #8
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x21a>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d10e      	bne.n	8004892 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d10b      	bne.n	8004892 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487a:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d064      	beq.n	8004950 <HAL_RCC_OscConfig+0x2f0>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d160      	bne.n	8004950 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e2ba      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x24a>
 800489c:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a0b      	ldr	r2, [pc, #44]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	e026      	b.n	80048f8 <HAL_RCC_OscConfig+0x298>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048b2:	d115      	bne.n	80048e0 <HAL_RCC_OscConfig+0x280>
 80048b4:	4b06      	ldr	r3, [pc, #24]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a05      	ldr	r2, [pc, #20]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80048ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b03      	ldr	r3, [pc, #12]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a02      	ldr	r2, [pc, #8]	@ (80048d0 <HAL_RCC_OscConfig+0x270>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e014      	b.n	80048f8 <HAL_RCC_OscConfig+0x298>
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
 80048d4:	0800d134 	.word	0x0800d134
 80048d8:	20000000 	.word	0x20000000
 80048dc:	20000004 	.word	0x20000004
 80048e0:	4ba0      	ldr	r3, [pc, #640]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a9f      	ldr	r2, [pc, #636]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b9d      	ldr	r3, [pc, #628]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a9c      	ldr	r2, [pc, #624]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80048f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7fd fcc8 	bl	8002294 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd fcc4 	bl	8002294 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e276      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	4b92      	ldr	r3, [pc, #584]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2a8>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fcb4 	bl	8002294 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd fcb0 	bl	8002294 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e262      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004942:	4b88      	ldr	r3, [pc, #544]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x2d0>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d060      	beq.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d005      	beq.n	8004970 <HAL_RCC_OscConfig+0x310>
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b0c      	cmp	r3, #12
 8004968:	d119      	bne.n	800499e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d116      	bne.n	800499e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004970:	4b7c      	ldr	r3, [pc, #496]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_OscConfig+0x328>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e23f      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004988:	4b76      	ldr	r3, [pc, #472]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	4973      	ldr	r1, [pc, #460]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499c:	e040      	b.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d023      	beq.n	80049ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd fc6f 	bl	8002294 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fd fc6b 	bl	8002294 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e21d      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049cc:	4b65      	ldr	r3, [pc, #404]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b62      	ldr	r3, [pc, #392]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	495f      	ldr	r1, [pc, #380]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
 80049ec:	e018      	b.n	8004a20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 80049f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fa:	f7fd fc4b 	bl	8002294 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a02:	f7fd fc47 	bl	8002294 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e1f9      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a14:	4b53      	ldr	r3, [pc, #332]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03c      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01c      	beq.n	8004a6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a34:	4b4b      	ldr	r3, [pc, #300]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fd fc26 	bl	8002294 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4c:	f7fd fc22 	bl	8002294 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1d4      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a5e:	4b41      	ldr	r3, [pc, #260]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ef      	beq.n	8004a4c <HAL_RCC_OscConfig+0x3ec>
 8004a6c:	e01b      	b.n	8004aa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a74:	4a3b      	ldr	r2, [pc, #236]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7e:	f7fd fc09 	bl	8002294 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a86:	f7fd fc05 	bl	8002294 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e1b7      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a98:	4b32      	ldr	r3, [pc, #200]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1ef      	bne.n	8004a86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a6 	beq.w	8004c00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac4:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac8:	4a26      	ldr	r2, [pc, #152]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ad0:	4b24      	ldr	r3, [pc, #144]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004adc:	2301      	movs	r3, #1
 8004ade:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae0:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <HAL_RCC_OscConfig+0x508>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d118      	bne.n	8004b1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aec:	4b1e      	ldr	r3, [pc, #120]	@ (8004b68 <HAL_RCC_OscConfig+0x508>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b68 <HAL_RCC_OscConfig+0x508>)
 8004af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af8:	f7fd fbcc 	bl	8002294 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b00:	f7fd fbc8 	bl	8002294 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e17a      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b12:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <HAL_RCC_OscConfig+0x508>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d108      	bne.n	8004b38 <HAL_RCC_OscConfig+0x4d8>
 8004b26:	4b0f      	ldr	r3, [pc, #60]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b36:	e029      	b.n	8004b8c <HAL_RCC_OscConfig+0x52c>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d115      	bne.n	8004b6c <HAL_RCC_OscConfig+0x50c>
 8004b40:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b46:	4a07      	ldr	r2, [pc, #28]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b50:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b56:	4a03      	ldr	r2, [pc, #12]	@ (8004b64 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b60:	e014      	b.n	8004b8c <HAL_RCC_OscConfig+0x52c>
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	4a9b      	ldr	r2, [pc, #620]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004b74:	f023 0301 	bic.w	r3, r3, #1
 8004b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b7c:	4b98      	ldr	r3, [pc, #608]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	4a97      	ldr	r2, [pc, #604]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004b84:	f023 0304 	bic.w	r3, r3, #4
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d016      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fd fb7e 	bl	8002294 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fb7a 	bl	8002294 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e12a      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0ed      	beq.n	8004b9c <HAL_RCC_OscConfig+0x53c>
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fb67 	bl	8002294 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fd fb63 	bl	8002294 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e113      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be0:	4b7f      	ldr	r3, [pc, #508]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1ed      	bne.n	8004bca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf4:	4b7a      	ldr	r3, [pc, #488]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	4a79      	ldr	r2, [pc, #484]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80fe 	beq.w	8004e06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	f040 80d0 	bne.w	8004db4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c14:	4b72      	ldr	r3, [pc, #456]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0203 	and.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d130      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	3b01      	subs	r3, #1
 8004c34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d127      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d11f      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c54:	2a07      	cmp	r2, #7
 8004c56:	bf14      	ite	ne
 8004c58:	2201      	movne	r2, #1
 8004c5a:	2200      	moveq	r2, #0
 8004c5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d113      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d109      	bne.n	8004c8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d06e      	beq.n	8004d68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b0c      	cmp	r3, #12
 8004c8e:	d069      	beq.n	8004d64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c90:	4b53      	ldr	r3, [pc, #332]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c9c:	4b50      	ldr	r3, [pc, #320]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0ad      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004cac:	4b4c      	ldr	r3, [pc, #304]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004cb8:	f7fd faec 	bl	8002294 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fd fae8 	bl	8002294 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e09a      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd2:	4b43      	ldr	r3, [pc, #268]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cde:	4b40      	ldr	r3, [pc, #256]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	4b40      	ldr	r3, [pc, #256]	@ (8004de4 <HAL_RCC_OscConfig+0x784>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cee:	3a01      	subs	r2, #1
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	4311      	orrs	r1, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cf8:	0212      	lsls	r2, r2, #8
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d00:	0852      	lsrs	r2, r2, #1
 8004d02:	3a01      	subs	r2, #1
 8004d04:	0552      	lsls	r2, r2, #21
 8004d06:	4311      	orrs	r1, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004d0c:	0852      	lsrs	r2, r2, #1
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0652      	lsls	r2, r2, #25
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d18:	0912      	lsrs	r2, r2, #4
 8004d1a:	0452      	lsls	r2, r2, #17
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	4930      	ldr	r1, [pc, #192]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d24:	4b2e      	ldr	r3, [pc, #184]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2d      	ldr	r2, [pc, #180]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d30:	4b2b      	ldr	r3, [pc, #172]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a2a      	ldr	r2, [pc, #168]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d3c:	f7fd faaa 	bl	8002294 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fd faa6 	bl	8002294 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e058      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d56:	4b22      	ldr	r3, [pc, #136]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d62:	e050      	b.n	8004e06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e04f      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d68:	4b1d      	ldr	r3, [pc, #116]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d148      	bne.n	8004e06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d74:	4b1a      	ldr	r3, [pc, #104]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a19      	ldr	r2, [pc, #100]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d80:	4b17      	ldr	r3, [pc, #92]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a16      	ldr	r2, [pc, #88]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d8c:	f7fd fa82 	bl	8002294 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d94:	f7fd fa7e 	bl	8002294 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e030      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004da6:	4b0e      	ldr	r3, [pc, #56]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x734>
 8004db2:	e028      	b.n	8004e06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d023      	beq.n	8004e02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dba:	4b09      	ldr	r3, [pc, #36]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a08      	ldr	r2, [pc, #32]	@ (8004de0 <HAL_RCC_OscConfig+0x780>)
 8004dc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc6:	f7fd fa65 	bl	8002294 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dcc:	e00c      	b.n	8004de8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dce:	f7fd fa61 	bl	8002294 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d905      	bls.n	8004de8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e013      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
 8004de0:	40021000 	.word	0x40021000
 8004de4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de8:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <HAL_RCC_OscConfig+0x7b0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ec      	bne.n	8004dce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004df4:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_RCC_OscConfig+0x7b0>)
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	4905      	ldr	r1, [pc, #20]	@ (8004e10 <HAL_RCC_OscConfig+0x7b0>)
 8004dfa:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <HAL_RCC_OscConfig+0x7b4>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60cb      	str	r3, [r1, #12]
 8004e00:	e001      	b.n	8004e06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40021000 	.word	0x40021000
 8004e14:	feeefffc 	.word	0xfeeefffc

08004e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0e7      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e2c:	4b75      	ldr	r3, [pc, #468]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d910      	bls.n	8004e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3a:	4b72      	ldr	r3, [pc, #456]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f023 0207 	bic.w	r2, r3, #7
 8004e42:	4970      	ldr	r1, [pc, #448]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0cf      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d010      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d908      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b63      	ldr	r3, [pc, #396]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4960      	ldr	r1, [pc, #384]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d04c      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9e:	4b5a      	ldr	r3, [pc, #360]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d121      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0a6      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb6:	4b54      	ldr	r3, [pc, #336]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d115      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e09a      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ece:	4b4e      	ldr	r3, [pc, #312]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e08e      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ede:	4b4a      	ldr	r3, [pc, #296]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e086      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b46      	ldr	r3, [pc, #280]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4943      	ldr	r1, [pc, #268]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd f9c8 	bl	8002294 <HAL_GetTick>
 8004f04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	e00a      	b.n	8004f1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f08:	f7fd f9c4 	bl	8002294 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e06e      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1e:	4b3a      	ldr	r3, [pc, #232]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 020c 	and.w	r2, r3, #12
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d1eb      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	4b31      	ldr	r3, [pc, #196]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d208      	bcs.n	8004f5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	492b      	ldr	r1, [pc, #172]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f5e:	4b29      	ldr	r3, [pc, #164]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d210      	bcs.n	8004f8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f6c:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f023 0207 	bic.w	r2, r3, #7
 8004f74:	4923      	ldr	r1, [pc, #140]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7c:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <HAL_RCC_ClockConfig+0x1ec>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e036      	b.n	8004ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4918      	ldr	r1, [pc, #96]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fb8:	4b13      	ldr	r3, [pc, #76]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4910      	ldr	r1, [pc, #64]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fcc:	f000 f824 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <HAL_RCC_ClockConfig+0x1f0>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	490b      	ldr	r1, [pc, #44]	@ (800500c <HAL_RCC_ClockConfig+0x1f4>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	f003 031f 	and.w	r3, r3, #31
 8004fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe8:	4a09      	ldr	r2, [pc, #36]	@ (8005010 <HAL_RCC_ClockConfig+0x1f8>)
 8004fea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fec:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <HAL_RCC_ClockConfig+0x1fc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd f913 	bl	800221c <HAL_InitTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40022000 	.word	0x40022000
 8005008:	40021000 	.word	0x40021000
 800500c:	0800d134 	.word	0x0800d134
 8005010:	20000000 	.word	0x20000000
 8005014:	20000004 	.word	0x20000004

08005018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	@ 0x24
 800501c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005026:	4b3e      	ldr	r3, [pc, #248]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
 800502e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005030:	4b3b      	ldr	r3, [pc, #236]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0x34>
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d121      	bne.n	800508a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d11e      	bne.n	800508a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800504c:	4b34      	ldr	r3, [pc, #208]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d107      	bne.n	8005068 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005058:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 800505a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	e005      	b.n	8005074 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005068:	4b2d      	ldr	r3, [pc, #180]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005074:	4a2b      	ldr	r2, [pc, #172]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005088:	e00a      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d102      	bne.n	8005096 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005090:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x110>)
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e004      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800509c:	4b23      	ldr	r3, [pc, #140]	@ (800512c <HAL_RCC_GetSysClockFreq+0x114>)
 800509e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d134      	bne.n	8005110 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0xa6>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d003      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0xac>
 80050bc:	e005      	b.n	80050ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80050be:	4b1a      	ldr	r3, [pc, #104]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x110>)
 80050c0:	617b      	str	r3, [r7, #20]
      break;
 80050c2:	e005      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050c4:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_RCC_GetSysClockFreq+0x114>)
 80050c6:	617b      	str	r3, [r7, #20]
      break;
 80050c8:	e002      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	617b      	str	r3, [r7, #20]
      break;
 80050ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d0:	4b13      	ldr	r3, [pc, #76]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	3301      	adds	r3, #1
 80050dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	fb03 f202 	mul.w	r2, r3, r2
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	0e5b      	lsrs	r3, r3, #25
 80050fc:	f003 0303 	and.w	r3, r3, #3
 8005100:	3301      	adds	r3, #1
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005110:	69bb      	ldr	r3, [r7, #24]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3724      	adds	r7, #36	@ 0x24
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	0800d14c 	.word	0x0800d14c
 8005128:	00f42400 	.word	0x00f42400
 800512c:	007a1200 	.word	0x007a1200

08005130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005134:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <HAL_RCC_GetHCLKFreq+0x14>)
 8005136:	681b      	ldr	r3, [r3, #0]
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000000 	.word	0x20000000

08005148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800514c:	f7ff fff0 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 8005150:	4602      	mov	r2, r0
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	4904      	ldr	r1, [pc, #16]	@ (8005170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	f003 031f 	and.w	r3, r3, #31
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	0800d144 	.word	0x0800d144

08005174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005178:	f7ff ffda 	bl	8005130 <HAL_RCC_GetHCLKFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	0adb      	lsrs	r3, r3, #11
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4904      	ldr	r1, [pc, #16]	@ (800519c <HAL_RCC_GetPCLK2Freq+0x28>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	0800d144 	.word	0x0800d144

080051a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051a8:	2300      	movs	r3, #0
 80051aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051b8:	f7ff f9ee 	bl	8004598 <HAL_PWREx_GetVoltageRange>
 80051bc:	6178      	str	r0, [r7, #20]
 80051be:	e014      	b.n	80051ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051c0:	4b25      	ldr	r3, [pc, #148]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c4:	4a24      	ldr	r2, [pc, #144]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80051cc:	4b22      	ldr	r3, [pc, #136]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051d8:	f7ff f9de 	bl	8004598 <HAL_PWREx_GetVoltageRange>
 80051dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051de:	4b1e      	ldr	r3, [pc, #120]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005258 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f0:	d10b      	bne.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b80      	cmp	r3, #128	@ 0x80
 80051f6:	d919      	bls.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80051fc:	d902      	bls.n	8005204 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80051fe:	2302      	movs	r3, #2
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e013      	b.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005204:	2301      	movs	r3, #1
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	e010      	b.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b80      	cmp	r3, #128	@ 0x80
 800520e:	d902      	bls.n	8005216 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005210:	2303      	movs	r3, #3
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	e00a      	b.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b80      	cmp	r3, #128	@ 0x80
 800521a:	d102      	bne.n	8005222 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800521c:	2302      	movs	r3, #2
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	e004      	b.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b70      	cmp	r3, #112	@ 0x70
 8005226:	d101      	bne.n	800522c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005228:	2301      	movs	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f023 0207 	bic.w	r2, r3, #7
 8005234:	4909      	ldr	r1, [pc, #36]	@ (800525c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800523c:	4b07      	ldr	r3, [pc, #28]	@ (800525c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d001      	beq.n	800524e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	40022000 	.word	0x40022000

08005260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005268:	2300      	movs	r3, #0
 800526a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800526c:	2300      	movs	r3, #0
 800526e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005278:	2b00      	cmp	r3, #0
 800527a:	d041      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005280:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005284:	d02a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005286:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800528a:	d824      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800528c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005290:	d008      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005292:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005296:	d81e      	bhi.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800529c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052a0:	d010      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052a2:	e018      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052a4:	4b86      	ldr	r3, [pc, #536]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a85      	ldr	r2, [pc, #532]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052b0:	e015      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fabb 	bl	8005834 <RCCEx_PLLSAI1_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052c2:	e00c      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3320      	adds	r3, #32
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fba6 	bl	8005a1c <RCCEx_PLLSAI2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	74fb      	strb	r3, [r7, #19]
      break;
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052de:	7cfb      	ldrb	r3, [r7, #19]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10b      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052e4:	4b76      	ldr	r3, [pc, #472]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f2:	4973      	ldr	r1, [pc, #460]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80052fa:	e001      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d041      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005310:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005314:	d02a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005316:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800531a:	d824      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800531c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005320:	d008      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005322:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005326:	d81e      	bhi.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800532c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005330:	d010      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005332:	e018      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005334:	4b62      	ldr	r3, [pc, #392]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a61      	ldr	r2, [pc, #388]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800533e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005340:	e015      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3304      	adds	r3, #4
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fa73 	bl	8005834 <RCCEx_PLLSAI1_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005352:	e00c      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3320      	adds	r3, #32
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fb5e 	bl	8005a1c <RCCEx_PLLSAI2_Config>
 8005360:	4603      	mov	r3, r0
 8005362:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005364:	e003      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	74fb      	strb	r3, [r7, #19]
      break;
 800536a:	e000      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800536c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005374:	4b52      	ldr	r3, [pc, #328]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005382:	494f      	ldr	r1, [pc, #316]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800538a:	e001      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80a0 	beq.w	80054de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539e:	2300      	movs	r3, #0
 80053a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053a2:	4b47      	ldr	r3, [pc, #284]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053b8:	4b41      	ldr	r3, [pc, #260]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053bc:	4a40      	ldr	r2, [pc, #256]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053c4:	4b3e      	ldr	r3, [pc, #248]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053d0:	2301      	movs	r3, #1
 80053d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d4:	4b3b      	ldr	r3, [pc, #236]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3a      	ldr	r2, [pc, #232]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053e0:	f7fc ff58 	bl	8002294 <HAL_GetTick>
 80053e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053e6:	e009      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e8:	f7fc ff54 	bl	8002294 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d902      	bls.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	74fb      	strb	r3, [r7, #19]
        break;
 80053fa:	e005      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053fc:	4b31      	ldr	r3, [pc, #196]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0ef      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d15c      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800540e:	4b2c      	ldr	r3, [pc, #176]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005418:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01f      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	d019      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800542c:	4b24      	ldr	r3, [pc, #144]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005436:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005438:	4b21      	ldr	r3, [pc, #132]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543e:	4a20      	ldr	r2, [pc, #128]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005444:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005448:	4b1d      	ldr	r3, [pc, #116]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800544e:	4a1c      	ldr	r2, [pc, #112]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005458:	4a19      	ldr	r2, [pc, #100]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546a:	f7fc ff13 	bl	8002294 <HAL_GetTick>
 800546e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005470:	e00b      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005472:	f7fc ff0f 	bl	8002294 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005480:	4293      	cmp	r3, r2
 8005482:	d902      	bls.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	74fb      	strb	r3, [r7, #19]
            break;
 8005488:	e006      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800548a:	4b0d      	ldr	r3, [pc, #52]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ec      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10c      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ae:	4904      	ldr	r1, [pc, #16]	@ (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054b6:	e009      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
 80054bc:	e006      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
 80054ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054cc:	7c7b      	ldrb	r3, [r7, #17]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d105      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d2:	4b9e      	ldr	r3, [pc, #632]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	4a9d      	ldr	r2, [pc, #628]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054ea:	4b98      	ldr	r3, [pc, #608]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f0:	f023 0203 	bic.w	r2, r3, #3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	4994      	ldr	r1, [pc, #592]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800550c:	4b8f      	ldr	r3, [pc, #572]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005512:	f023 020c 	bic.w	r2, r3, #12
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551a:	498c      	ldr	r1, [pc, #560]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800552e:	4b87      	ldr	r3, [pc, #540]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005534:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	4983      	ldr	r1, [pc, #524]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005550:	4b7e      	ldr	r3, [pc, #504]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005556:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800555e:	497b      	ldr	r1, [pc, #492]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005572:	4b76      	ldr	r3, [pc, #472]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005580:	4972      	ldr	r1, [pc, #456]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005594:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a2:	496a      	ldr	r1, [pc, #424]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055b6:	4b65      	ldr	r3, [pc, #404]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c4:	4961      	ldr	r1, [pc, #388]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055d8:	4b5c      	ldr	r3, [pc, #368]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055e6:	4959      	ldr	r1, [pc, #356]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055fa:	4b54      	ldr	r3, [pc, #336]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005600:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005608:	4950      	ldr	r1, [pc, #320]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800561c:	4b4b      	ldr	r3, [pc, #300]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	4948      	ldr	r1, [pc, #288]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800563e:	4b43      	ldr	r3, [pc, #268]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005644:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800564c:	493f      	ldr	r1, [pc, #252]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d028      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005660:	4b3a      	ldr	r3, [pc, #232]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566e:	4937      	ldr	r1, [pc, #220]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800567a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800567e:	d106      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005680:	4b32      	ldr	r3, [pc, #200]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4a31      	ldr	r2, [pc, #196]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800568a:	60d3      	str	r3, [r2, #12]
 800568c:	e011      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005692:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005696:	d10c      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f8c8 	bl	8005834 <RCCEx_PLLSAI1_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80056ae:	7cfb      	ldrb	r3, [r7, #19]
 80056b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d028      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056be:	4b23      	ldr	r3, [pc, #140]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056cc:	491f      	ldr	r1, [pc, #124]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056de:	4b1b      	ldr	r3, [pc, #108]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	4a1a      	ldr	r2, [pc, #104]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e8:	60d3      	str	r3, [r2, #12]
 80056ea:	e011      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f899 	bl	8005834 <RCCEx_PLLSAI1_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d02b      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800571c:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572a:	4908      	ldr	r1, [pc, #32]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005736:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800573a:	d109      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800573c:	4b03      	ldr	r3, [pc, #12]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	4a02      	ldr	r2, [pc, #8]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005746:	60d3      	str	r3, [r2, #12]
 8005748:	e014      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005754:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005758:	d10c      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	2101      	movs	r1, #1
 8005760:	4618      	mov	r0, r3
 8005762:	f000 f867 	bl	8005834 <RCCEx_PLLSAI1_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800576a:	7cfb      	ldrb	r3, [r7, #19]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005770:	7cfb      	ldrb	r3, [r7, #19]
 8005772:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02f      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005780:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800578e:	4928      	ldr	r1, [pc, #160]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800579a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800579e:	d10d      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	2102      	movs	r1, #2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f844 	bl	8005834 <RCCEx_PLLSAI1_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d014      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	74bb      	strb	r3, [r7, #18]
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3320      	adds	r3, #32
 80057ca:	2102      	movs	r1, #2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 f925 	bl	8005a1c <RCCEx_PLLSAI2_Config>
 80057d2:	4603      	mov	r3, r0
 80057d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057d6:	7cfb      	ldrb	r3, [r7, #19]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ec:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057fa:	490d      	ldr	r1, [pc, #52]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800580e:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581e:	4904      	ldr	r1, [pc, #16]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005826:	7cbb      	ldrb	r3, [r7, #18]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000

08005834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005842:	4b75      	ldr	r3, [pc, #468]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800584e:	4b72      	ldr	r3, [pc, #456]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f003 0203 	and.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d10d      	bne.n	800587a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
       ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005866:	4b6c      	ldr	r3, [pc, #432]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
       ||
 8005876:	429a      	cmp	r2, r3
 8005878:	d047      	beq.n	800590a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	e044      	b.n	800590a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b03      	cmp	r3, #3
 8005886:	d018      	beq.n	80058ba <RCCEx_PLLSAI1_Config+0x86>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d825      	bhi.n	80058d8 <RCCEx_PLLSAI1_Config+0xa4>
 800588c:	2b01      	cmp	r3, #1
 800588e:	d002      	beq.n	8005896 <RCCEx_PLLSAI1_Config+0x62>
 8005890:	2b02      	cmp	r3, #2
 8005892:	d009      	beq.n	80058a8 <RCCEx_PLLSAI1_Config+0x74>
 8005894:	e020      	b.n	80058d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005896:	4b60      	ldr	r3, [pc, #384]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d11d      	bne.n	80058de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a6:	e01a      	b.n	80058de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d116      	bne.n	80058e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058b8:	e013      	b.n	80058e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058ba:	4b57      	ldr	r3, [pc, #348]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10f      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058c6:	4b54      	ldr	r3, [pc, #336]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058d6:	e006      	b.n	80058e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e004      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058de:	bf00      	nop
 80058e0:	e002      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10d      	bne.n	800590a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6819      	ldr	r1, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	3b01      	subs	r3, #1
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	430b      	orrs	r3, r1
 8005904:	4944      	ldr	r1, [pc, #272]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005906:	4313      	orrs	r3, r2
 8005908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d17d      	bne.n	8005a0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005910:	4b41      	ldr	r3, [pc, #260]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a40      	ldr	r2, [pc, #256]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800591a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591c:	f7fc fcba 	bl	8002294 <HAL_GetTick>
 8005920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005922:	e009      	b.n	8005938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005924:	f7fc fcb6 	bl	8002294 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d902      	bls.n	8005938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	73fb      	strb	r3, [r7, #15]
        break;
 8005936:	e005      	b.n	8005944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005938:	4b37      	ldr	r3, [pc, #220]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1ef      	bne.n	8005924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d160      	bne.n	8005a0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d111      	bne.n	8005974 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005950:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6892      	ldr	r2, [r2, #8]
 8005960:	0211      	lsls	r1, r2, #8
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	0912      	lsrs	r2, r2, #4
 8005968:	0452      	lsls	r2, r2, #17
 800596a:	430a      	orrs	r2, r1
 800596c:	492a      	ldr	r1, [pc, #168]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596e:	4313      	orrs	r3, r2
 8005970:	610b      	str	r3, [r1, #16]
 8005972:	e027      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d112      	bne.n	80059a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800597a:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005982:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6892      	ldr	r2, [r2, #8]
 800598a:	0211      	lsls	r1, r2, #8
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6912      	ldr	r2, [r2, #16]
 8005990:	0852      	lsrs	r2, r2, #1
 8005992:	3a01      	subs	r2, #1
 8005994:	0552      	lsls	r2, r2, #21
 8005996:	430a      	orrs	r2, r1
 8005998:	491f      	ldr	r1, [pc, #124]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599a:	4313      	orrs	r3, r2
 800599c:	610b      	str	r3, [r1, #16]
 800599e:	e011      	b.n	80059c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6892      	ldr	r2, [r2, #8]
 80059b0:	0211      	lsls	r1, r2, #8
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6952      	ldr	r2, [r2, #20]
 80059b6:	0852      	lsrs	r2, r2, #1
 80059b8:	3a01      	subs	r2, #1
 80059ba:	0652      	lsls	r2, r2, #25
 80059bc:	430a      	orrs	r2, r1
 80059be:	4916      	ldr	r1, [pc, #88]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059c4:	4b14      	ldr	r3, [pc, #80]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a13      	ldr	r2, [pc, #76]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80059ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7fc fc60 	bl	8002294 <HAL_GetTick>
 80059d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059d6:	e009      	b.n	80059ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059d8:	f7fc fc5c 	bl	8002294 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d902      	bls.n	80059ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	73fb      	strb	r3, [r7, #15]
          break;
 80059ea:	e005      	b.n	80059f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0ef      	beq.n	80059d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	4904      	ldr	r1, [pc, #16]	@ (8005a18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000

08005a1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d018      	beq.n	8005a68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a36:	4b67      	ldr	r3, [pc, #412]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0203 	and.w	r2, r3, #3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d10d      	bne.n	8005a62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
       ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a4e:	4b61      	ldr	r3, [pc, #388]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d047      	beq.n	8005af2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	e044      	b.n	8005af2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d018      	beq.n	8005aa2 <RCCEx_PLLSAI2_Config+0x86>
 8005a70:	2b03      	cmp	r3, #3
 8005a72:	d825      	bhi.n	8005ac0 <RCCEx_PLLSAI2_Config+0xa4>
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d002      	beq.n	8005a7e <RCCEx_PLLSAI2_Config+0x62>
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d009      	beq.n	8005a90 <RCCEx_PLLSAI2_Config+0x74>
 8005a7c:	e020      	b.n	8005ac0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a7e:	4b55      	ldr	r3, [pc, #340]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d11d      	bne.n	8005ac6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a8e:	e01a      	b.n	8005ac6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a90:	4b50      	ldr	r3, [pc, #320]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d116      	bne.n	8005aca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aa0:	e013      	b.n	8005aca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10f      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005aae:	4b49      	ldr	r3, [pc, #292]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005abe:	e006      	b.n	8005ace <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac4:	e004      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ace:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10d      	bne.n	8005af2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ad6:	4b3f      	ldr	r3, [pc, #252]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	430b      	orrs	r3, r1
 8005aec:	4939      	ldr	r1, [pc, #228]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d167      	bne.n	8005bc8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005af8:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a35      	ldr	r2, [pc, #212]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b04:	f7fc fbc6 	bl	8002294 <HAL_GetTick>
 8005b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b0a:	e009      	b.n	8005b20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b0c:	f7fc fbc2 	bl	8002294 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d902      	bls.n	8005b20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b1e:	e005      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b20:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1ef      	bne.n	8005b0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d14a      	bne.n	8005bc8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d111      	bne.n	8005b5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b38:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005b40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	6892      	ldr	r2, [r2, #8]
 8005b48:	0211      	lsls	r1, r2, #8
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68d2      	ldr	r2, [r2, #12]
 8005b4e:	0912      	lsrs	r2, r2, #4
 8005b50:	0452      	lsls	r2, r2, #17
 8005b52:	430a      	orrs	r2, r1
 8005b54:	491f      	ldr	r1, [pc, #124]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	614b      	str	r3, [r1, #20]
 8005b5a:	e011      	b.n	8005b80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6892      	ldr	r2, [r2, #8]
 8005b6c:	0211      	lsls	r1, r2, #8
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6912      	ldr	r2, [r2, #16]
 8005b72:	0852      	lsrs	r2, r2, #1
 8005b74:	3a01      	subs	r2, #1
 8005b76:	0652      	lsls	r2, r2, #25
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	4916      	ldr	r1, [pc, #88]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b80:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a13      	ldr	r2, [pc, #76]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fc fb82 	bl	8002294 <HAL_GetTick>
 8005b90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b92:	e009      	b.n	8005ba8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b94:	f7fc fb7e 	bl	8002294 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d902      	bls.n	8005ba8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ba6:	e005      	b.n	8005bb4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ef      	beq.n	8005b94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bba:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	4904      	ldr	r1, [pc, #16]	@ (8005bd4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40021000 	.word	0x40021000

08005bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e040      	b.n	8005c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d106      	bne.n	8005c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fb ff86 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	@ 0x24
 8005c04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ffa4 	bl	8006b6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fce9 	bl	80065fc <UART_SetConfig>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e01b      	b.n	8005c6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 f823 	bl	8006cb0 <UART_CheckIdleState>
 8005c6a:	4603      	mov	r3, r0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	@ 0x28
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d177      	bne.n	8005d7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_UART_Transmit+0x24>
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e070      	b.n	8005d7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2221      	movs	r2, #33	@ 0x21
 8005ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005caa:	f7fc faf3 	bl	8002294 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	88fa      	ldrh	r2, [r7, #6]
 8005cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc8:	d108      	bne.n	8005cdc <HAL_UART_Transmit+0x68>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d104      	bne.n	8005cdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	e003      	b.n	8005ce4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ce4:	e02f      	b.n	8005d46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	2180      	movs	r1, #128	@ 0x80
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f001 f885 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d004      	beq.n	8005d06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e03b      	b.n	8005d7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	881a      	ldrh	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d18:	b292      	uxth	r2, r2
 8005d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	3302      	adds	r3, #2
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e007      	b.n	8005d34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	781a      	ldrb	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3301      	adds	r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1c9      	bne.n	8005ce6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2140      	movs	r1, #64	@ 0x40
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f001 f84f 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e005      	b.n	8005d7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e000      	b.n	8005d7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
  }
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3720      	adds	r7, #32
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	@ 0x28
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	f040 80b6 	bne.w	8005f0e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_UART_Receive+0x28>
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0ae      	b.n	8005f10 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2222      	movs	r2, #34	@ 0x22
 8005dbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dc8:	f7fc fa64 	bl	8002294 <HAL_GetTick>
 8005dcc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	88fa      	ldrh	r2, [r7, #6]
 8005dd2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	88fa      	ldrh	r2, [r7, #6]
 8005dda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005de6:	d10e      	bne.n	8005e06 <HAL_UART_Receive+0x80>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <HAL_UART_Receive+0x76>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005df6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dfa:	e02d      	b.n	8005e58 <HAL_UART_Receive+0xd2>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	22ff      	movs	r2, #255	@ 0xff
 8005e00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e04:	e028      	b.n	8005e58 <HAL_UART_Receive+0xd2>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10d      	bne.n	8005e2a <HAL_UART_Receive+0xa4>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <HAL_UART_Receive+0x9a>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	22ff      	movs	r2, #255	@ 0xff
 8005e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e1e:	e01b      	b.n	8005e58 <HAL_UART_Receive+0xd2>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	227f      	movs	r2, #127	@ 0x7f
 8005e24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e28:	e016      	b.n	8005e58 <HAL_UART_Receive+0xd2>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e32:	d10d      	bne.n	8005e50 <HAL_UART_Receive+0xca>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_UART_Receive+0xc0>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	227f      	movs	r2, #127	@ 0x7f
 8005e40:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e44:	e008      	b.n	8005e58 <HAL_UART_Receive+0xd2>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	223f      	movs	r2, #63	@ 0x3f
 8005e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005e4e:	e003      	b.n	8005e58 <HAL_UART_Receive+0xd2>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e5e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e68:	d108      	bne.n	8005e7c <HAL_UART_Receive+0xf6>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d104      	bne.n	8005e7c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	e003      	b.n	8005e84 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e84:	e037      	b.n	8005ef6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2120      	movs	r1, #32
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 ffb5 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e033      	b.n	8005f10 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	8a7b      	ldrh	r3, [r7, #18]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e00d      	b.n	8005ee4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	8a7b      	ldrh	r3, [r7, #18]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1c1      	bne.n	8005e86 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e000      	b.n	8005f10 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005f0e:	2302      	movs	r3, #2
  }
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	@ 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	4613      	mov	r3, r2
 8005f24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d137      	bne.n	8005fa0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UART_Receive_IT+0x24>
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e030      	b.n	8005fa2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a18      	ldr	r2, [pc, #96]	@ (8005fac <HAL_UART_Receive_IT+0x94>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d01f      	beq.n	8005f90 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d018      	beq.n	8005f90 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	e853 3f00 	ldrex	r3, [r3]
 8005f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	69f9      	ldr	r1, [r7, #28]
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e6      	bne.n	8005f5e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f90:	88fb      	ldrh	r3, [r7, #6]
 8005f92:	461a      	mov	r2, r3
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 ffa0 	bl	8006edc <UART_Start_Receive_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	e000      	b.n	8005fa2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fa0:	2302      	movs	r3, #2
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3728      	adds	r7, #40	@ 0x28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40008000 	.word	0x40008000

08005fb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005fda:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005fde:	4013      	ands	r3, r2
 8005fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d115      	bne.n	8006018 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00f      	beq.n	8006018 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d009      	beq.n	8006018 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 82ca 	beq.w	80065a2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
      }
      return;
 8006016:	e2c4      	b.n	80065a2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8117 	beq.w	8006250 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800602e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006032:	4b85      	ldr	r3, [pc, #532]	@ (8006248 <HAL_UART_IRQHandler+0x298>)
 8006034:	4013      	ands	r3, r2
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 810a 	beq.w	8006250 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800603c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d011      	beq.n	800606c <HAL_UART_IRQHandler+0xbc>
 8006048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2201      	movs	r2, #1
 800605a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800606c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d011      	beq.n	800609c <HAL_UART_IRQHandler+0xec>
 8006078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2202      	movs	r2, #2
 800608a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006092:	f043 0204 	orr.w	r2, r3, #4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800609c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d011      	beq.n	80060cc <HAL_UART_IRQHandler+0x11c>
 80060a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2204      	movs	r2, #4
 80060ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060c2:	f043 0202 	orr.w	r2, r3, #2
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d017      	beq.n	8006108 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2208      	movs	r2, #8
 80060f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fe:	f043 0208 	orr.w	r2, r3, #8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800610c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <HAL_UART_IRQHandler+0x18a>
 8006114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006130:	f043 0220 	orr.w	r2, r3, #32
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8230 	beq.w	80065a6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006182:	2b40      	cmp	r3, #64	@ 0x40
 8006184:	d005      	beq.n	8006192 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800618a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800618e:	2b00      	cmp	r3, #0
 8006190:	d04f      	beq.n	8006232 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 ff68 	bl	8007068 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a2:	2b40      	cmp	r3, #64	@ 0x40
 80061a4:	d141      	bne.n	800622a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3308      	adds	r3, #8
 80061ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1d9      	bne.n	80061a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061fe:	4a13      	ldr	r2, [pc, #76]	@ (800624c <HAL_UART_IRQHandler+0x29c>)
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd ff91 	bl	800412e <HAL_DMA_Abort_IT>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d017      	beq.n	8006242 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006220:	e00f      	b.n	8006242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f9d4 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006228:	e00b      	b.n	8006242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9d0 	bl	80065d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e007      	b.n	8006242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9cc 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006240:	e1b1      	b.n	80065a6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006242:	bf00      	nop
    return;
 8006244:	e1af      	b.n	80065a6 <HAL_UART_IRQHandler+0x5f6>
 8006246:	bf00      	nop
 8006248:	04000120 	.word	0x04000120
 800624c:	08007131 	.word	0x08007131

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 816a 	bne.w	800652e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8163 	beq.w	800652e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 815c 	beq.w	800652e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2210      	movs	r2, #16
 800627c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b40      	cmp	r3, #64	@ 0x40
 800628a:	f040 80d4 	bne.w	8006436 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800629a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80ad 	beq.w	80063fe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80062aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ae:	429a      	cmp	r2, r3
 80062b0:	f080 80a5 	bcs.w	80063fe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f040 8086 	bne.w	80063dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80062fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006306:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006312:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1da      	bne.n	80062d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800632a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800632c:	f023 0301 	bic.w	r3, r3, #1
 8006330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800633e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006342:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006346:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e1      	bne.n	800631a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800636c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3308      	adds	r3, #8
 8006376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800637a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800637c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006380:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006388:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e3      	bne.n	8006356 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a4:	e853 3f00 	ldrex	r3, [r3]
 80063a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ac:	f023 0310 	bic.w	r3, r3, #16
 80063b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	461a      	mov	r2, r3
 80063ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e4      	bne.n	800639c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fd fe6b 	bl	80040b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f8f4 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80063fc:	e0d5      	b.n	80065aa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006404:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006408:	429a      	cmp	r2, r3
 800640a:	f040 80ce 	bne.w	80065aa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b20      	cmp	r3, #32
 800641c:	f040 80c5 	bne.w	80065aa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f8d8 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
      return;
 8006434:	e0b9      	b.n	80065aa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006442:	b29b      	uxth	r3, r3
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80ab 	beq.w	80065ae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 80a6 	beq.w	80065ae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006476:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006484:	647b      	str	r3, [r7, #68]	@ 0x44
 8006486:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800648a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e4      	bne.n	8006462 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	623b      	str	r3, [r7, #32]
   return(result);
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	f023 0301 	bic.w	r3, r3, #1
 80064ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80064be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e3      	bne.n	8006498 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f023 0310 	bic.w	r3, r3, #16
 80064f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650a:	69b9      	ldr	r1, [r7, #24]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	617b      	str	r3, [r7, #20]
   return(result);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e4      	bne.n	80064e4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f85c 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800652c:	e03f      	b.n	80065ae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <HAL_UART_IRQHandler+0x5a8>
 800653a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d008      	beq.n	8006558 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800654e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 ffe5 	bl	8007520 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006556:	e02d      	b.n	80065b4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01c      	beq.n	80065b2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
    }
    return;
 8006580:	e017      	b.n	80065b2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d012      	beq.n	80065b4 <HAL_UART_IRQHandler+0x604>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00c      	beq.n	80065b4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fdda 	bl	8007154 <UART_EndTransmit_IT>
    return;
 80065a0:	e008      	b.n	80065b4 <HAL_UART_IRQHandler+0x604>
      return;
 80065a2:	bf00      	nop
 80065a4:	e006      	b.n	80065b4 <HAL_UART_IRQHandler+0x604>
    return;
 80065a6:	bf00      	nop
 80065a8:	e004      	b.n	80065b4 <HAL_UART_IRQHandler+0x604>
      return;
 80065aa:	bf00      	nop
 80065ac:	e002      	b.n	80065b4 <HAL_UART_IRQHandler+0x604>
      return;
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <HAL_UART_IRQHandler+0x604>
    return;
 80065b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80065b4:	37e8      	adds	r7, #232	@ 0xe8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b08a      	sub	sp, #40	@ 0x28
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	431a      	orrs	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	4313      	orrs	r3, r2
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4ba4      	ldr	r3, [pc, #656]	@ (80068bc <UART_SetConfig+0x2c0>)
 800662c:	4013      	ands	r3, r2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006634:	430b      	orrs	r3, r1
 8006636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a99      	ldr	r2, [pc, #612]	@ (80068c0 <UART_SetConfig+0x2c4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006664:	4313      	orrs	r3, r2
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a90      	ldr	r2, [pc, #576]	@ (80068c4 <UART_SetConfig+0x2c8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d126      	bne.n	80066d4 <UART_SetConfig+0xd8>
 8006686:	4b90      	ldr	r3, [pc, #576]	@ (80068c8 <UART_SetConfig+0x2cc>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b03      	cmp	r3, #3
 8006692:	d81b      	bhi.n	80066cc <UART_SetConfig+0xd0>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <UART_SetConfig+0xa0>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b2:	e116      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ba:	e112      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066bc:	2304      	movs	r3, #4
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c2:	e10e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066c4:	2308      	movs	r3, #8
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ca:	e10a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d2:	e106      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7c      	ldr	r2, [pc, #496]	@ (80068cc <UART_SetConfig+0x2d0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d138      	bne.n	8006750 <UART_SetConfig+0x154>
 80066de:	4b7a      	ldr	r3, [pc, #488]	@ (80068c8 <UART_SetConfig+0x2cc>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	d82d      	bhi.n	8006748 <UART_SetConfig+0x14c>
 80066ec:	a201      	add	r2, pc, #4	@ (adr r2, 80066f4 <UART_SetConfig+0xf8>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006749 	.word	0x08006749
 8006704:	08006739 	.word	0x08006739
 8006708:	08006749 	.word	0x08006749
 800670c:	08006749 	.word	0x08006749
 8006710:	08006749 	.word	0x08006749
 8006714:	08006731 	.word	0x08006731
 8006718:	08006749 	.word	0x08006749
 800671c:	08006749 	.word	0x08006749
 8006720:	08006749 	.word	0x08006749
 8006724:	08006741 	.word	0x08006741
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672e:	e0d8      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006736:	e0d4      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800673e:	e0d0      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006746:	e0cc      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674e:	e0c8      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5e      	ldr	r2, [pc, #376]	@ (80068d0 <UART_SetConfig+0x2d4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d125      	bne.n	80067a6 <UART_SetConfig+0x1aa>
 800675a:	4b5b      	ldr	r3, [pc, #364]	@ (80068c8 <UART_SetConfig+0x2cc>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006760:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006764:	2b30      	cmp	r3, #48	@ 0x30
 8006766:	d016      	beq.n	8006796 <UART_SetConfig+0x19a>
 8006768:	2b30      	cmp	r3, #48	@ 0x30
 800676a:	d818      	bhi.n	800679e <UART_SetConfig+0x1a2>
 800676c:	2b20      	cmp	r3, #32
 800676e:	d00a      	beq.n	8006786 <UART_SetConfig+0x18a>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d814      	bhi.n	800679e <UART_SetConfig+0x1a2>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <UART_SetConfig+0x182>
 8006778:	2b10      	cmp	r3, #16
 800677a:	d008      	beq.n	800678e <UART_SetConfig+0x192>
 800677c:	e00f      	b.n	800679e <UART_SetConfig+0x1a2>
 800677e:	2300      	movs	r3, #0
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006784:	e0ad      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006786:	2302      	movs	r3, #2
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678c:	e0a9      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800678e:	2304      	movs	r3, #4
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006794:	e0a5      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006796:	2308      	movs	r3, #8
 8006798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679c:	e0a1      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800679e:	2310      	movs	r3, #16
 80067a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067a4:	e09d      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4a      	ldr	r2, [pc, #296]	@ (80068d4 <UART_SetConfig+0x2d8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d125      	bne.n	80067fc <UART_SetConfig+0x200>
 80067b0:	4b45      	ldr	r3, [pc, #276]	@ (80068c8 <UART_SetConfig+0x2cc>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80067ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80067bc:	d016      	beq.n	80067ec <UART_SetConfig+0x1f0>
 80067be:	2bc0      	cmp	r3, #192	@ 0xc0
 80067c0:	d818      	bhi.n	80067f4 <UART_SetConfig+0x1f8>
 80067c2:	2b80      	cmp	r3, #128	@ 0x80
 80067c4:	d00a      	beq.n	80067dc <UART_SetConfig+0x1e0>
 80067c6:	2b80      	cmp	r3, #128	@ 0x80
 80067c8:	d814      	bhi.n	80067f4 <UART_SetConfig+0x1f8>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <UART_SetConfig+0x1d8>
 80067ce:	2b40      	cmp	r3, #64	@ 0x40
 80067d0:	d008      	beq.n	80067e4 <UART_SetConfig+0x1e8>
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x1f8>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067da:	e082      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e2:	e07e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ea:	e07a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f2:	e076      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067fa:	e072      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a35      	ldr	r2, [pc, #212]	@ (80068d8 <UART_SetConfig+0x2dc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d12a      	bne.n	800685c <UART_SetConfig+0x260>
 8006806:	4b30      	ldr	r3, [pc, #192]	@ (80068c8 <UART_SetConfig+0x2cc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006810:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006814:	d01a      	beq.n	800684c <UART_SetConfig+0x250>
 8006816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800681a:	d81b      	bhi.n	8006854 <UART_SetConfig+0x258>
 800681c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006820:	d00c      	beq.n	800683c <UART_SetConfig+0x240>
 8006822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006826:	d815      	bhi.n	8006854 <UART_SetConfig+0x258>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <UART_SetConfig+0x238>
 800682c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x248>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x258>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683a:	e052      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006842:	e04e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684a:	e04a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006852:	e046      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685a:	e042      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	@ (80068c0 <UART_SetConfig+0x2c4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d13a      	bne.n	80068dc <UART_SetConfig+0x2e0>
 8006866:	4b18      	ldr	r3, [pc, #96]	@ (80068c8 <UART_SetConfig+0x2cc>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006870:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006874:	d01a      	beq.n	80068ac <UART_SetConfig+0x2b0>
 8006876:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800687a:	d81b      	bhi.n	80068b4 <UART_SetConfig+0x2b8>
 800687c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006880:	d00c      	beq.n	800689c <UART_SetConfig+0x2a0>
 8006882:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006886:	d815      	bhi.n	80068b4 <UART_SetConfig+0x2b8>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <UART_SetConfig+0x298>
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006890:	d008      	beq.n	80068a4 <UART_SetConfig+0x2a8>
 8006892:	e00f      	b.n	80068b4 <UART_SetConfig+0x2b8>
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689a:	e022      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800689c:	2302      	movs	r3, #2
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e01e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068aa:	e01a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b2:	e016      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ba:	e012      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068bc:	efff69f3 	.word	0xefff69f3
 80068c0:	40008000 	.word	0x40008000
 80068c4:	40013800 	.word	0x40013800
 80068c8:	40021000 	.word	0x40021000
 80068cc:	40004400 	.word	0x40004400
 80068d0:	40004800 	.word	0x40004800
 80068d4:	40004c00 	.word	0x40004c00
 80068d8:	40005000 	.word	0x40005000
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a9f      	ldr	r2, [pc, #636]	@ (8006b64 <UART_SetConfig+0x568>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d17a      	bne.n	80069e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d824      	bhi.n	800693e <UART_SetConfig+0x342>
 80068f4:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <UART_SetConfig+0x300>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	08006921 	.word	0x08006921
 8006900:	0800693f 	.word	0x0800693f
 8006904:	08006929 	.word	0x08006929
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800692f 	.word	0x0800692f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	0800693f 	.word	0x0800693f
 8006918:	0800693f 	.word	0x0800693f
 800691c:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006920:	f7fe fc12 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 8006924:	61f8      	str	r0, [r7, #28]
        break;
 8006926:	e010      	b.n	800694a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b8f      	ldr	r3, [pc, #572]	@ (8006b68 <UART_SetConfig+0x56c>)
 800692a:	61fb      	str	r3, [r7, #28]
        break;
 800692c:	e00d      	b.n	800694a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fe fb73 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8006932:	61f8      	str	r0, [r7, #28]
        break;
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800693a:	61fb      	str	r3, [r7, #28]
        break;
 800693c:	e005      	b.n	800694a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80fb 	beq.w	8006b48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	4413      	add	r3, r2
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	429a      	cmp	r2, r3
 8006960:	d305      	bcc.n	800696e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	429a      	cmp	r2, r3
 800696c:	d903      	bls.n	8006976 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006974:	e0e8      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2200      	movs	r2, #0
 800697a:	461c      	mov	r4, r3
 800697c:	4615      	mov	r5, r2
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	022b      	lsls	r3, r5, #8
 8006988:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800698c:	0222      	lsls	r2, r4, #8
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6849      	ldr	r1, [r1, #4]
 8006992:	0849      	lsrs	r1, r1, #1
 8006994:	2000      	movs	r0, #0
 8006996:	4688      	mov	r8, r1
 8006998:	4681      	mov	r9, r0
 800699a:	eb12 0a08 	adds.w	sl, r2, r8
 800699e:	eb43 0b09 	adc.w	fp, r3, r9
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7fa f9f8 	bl	8000da8 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4613      	mov	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c6:	d308      	bcc.n	80069da <UART_SetConfig+0x3de>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ce:	d204      	bcs.n	80069da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	60da      	str	r2, [r3, #12]
 80069d8:	e0b6      	b.n	8006b48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069e0:	e0b2      	b.n	8006b48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ea:	d15e      	bne.n	8006aaa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069ec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d828      	bhi.n	8006a46 <UART_SetConfig+0x44a>
 80069f4:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <UART_SetConfig+0x400>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a29 	.word	0x08006a29
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a47 	.word	0x08006a47
 8006a0c:	08006a37 	.word	0x08006a37
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a47 	.word	0x08006a47
 8006a1c:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fe fb92 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 8006a24:	61f8      	str	r0, [r7, #28]
        break;
 8006a26:	e014      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a28:	f7fe fba4 	bl	8005174 <HAL_RCC_GetPCLK2Freq>
 8006a2c:	61f8      	str	r0, [r7, #28]
        break;
 8006a2e:	e010      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b4d      	ldr	r3, [pc, #308]	@ (8006b68 <UART_SetConfig+0x56c>)
 8006a32:	61fb      	str	r3, [r7, #28]
        break;
 8006a34:	e00d      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fe faef 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8006a3a:	61f8      	str	r0, [r7, #28]
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a42:	61fb      	str	r3, [r7, #28]
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d077      	beq.n	8006b48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	005a      	lsls	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	441a      	add	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b0f      	cmp	r3, #15
 8006a72:	d916      	bls.n	8006aa2 <UART_SetConfig+0x4a6>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a7a:	d212      	bcs.n	8006aa2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f023 030f 	bic.w	r3, r3, #15
 8006a84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	8afb      	ldrh	r3, [r7, #22]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	8afa      	ldrh	r2, [r7, #22]
 8006a9e:	60da      	str	r2, [r3, #12]
 8006aa0:	e052      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006aa8:	e04e      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d827      	bhi.n	8006b02 <UART_SetConfig+0x506>
 8006ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <UART_SetConfig+0x4bc>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006af3 	.word	0x08006af3
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006b03 	.word	0x08006b03
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe fb34 	bl	8005148 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	61f8      	str	r0, [r7, #28]
        break;
 8006ae2:	e014      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7fe fb46 	bl	8005174 <HAL_RCC_GetPCLK2Freq>
 8006ae8:	61f8      	str	r0, [r7, #28]
        break;
 8006aea:	e010      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b1e      	ldr	r3, [pc, #120]	@ (8006b68 <UART_SetConfig+0x56c>)
 8006aee:	61fb      	str	r3, [r7, #28]
        break;
 8006af0:	e00d      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe fa91 	bl	8005018 <HAL_RCC_GetSysClockFreq>
 8006af6:	61f8      	str	r0, [r7, #28]
        break;
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afe:	61fb      	str	r3, [r7, #28]
        break;
 8006b00:	e005      	b.n	8006b0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d019      	beq.n	8006b48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	085a      	lsrs	r2, r3, #1
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	441a      	add	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d909      	bls.n	8006b42 <UART_SetConfig+0x546>
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b34:	d205      	bcs.n	8006b42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60da      	str	r2, [r3, #12]
 8006b40:	e002      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	@ 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b62:	bf00      	nop
 8006b64:	40008000 	.word	0x40008000
 8006b68:	00f42400 	.word	0x00f42400

08006b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01a      	beq.n	8006c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6a:	d10a      	bne.n	8006c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b098      	sub	sp, #96	@ 0x60
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cc0:	f7fb fae8 	bl	8002294 <HAL_GetTick>
 8006cc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d12e      	bne.n	8006d32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f88c 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d021      	beq.n	8006d32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e062      	b.n	8006df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d149      	bne.n	8006dd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f856 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d03c      	beq.n	8006dd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	623b      	str	r3, [r7, #32]
   return(result);
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dac:	61fa      	str	r2, [r7, #28]
 8006dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	69b9      	ldr	r1, [r7, #24]
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e011      	b.n	8006df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3758      	adds	r7, #88	@ 0x58
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e10:	e04f      	b.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d04b      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fb fa3b 	bl	8002294 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e04e      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d037      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b80      	cmp	r3, #128	@ 0x80
 8006e46:	d034      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b40      	cmp	r3, #64	@ 0x40
 8006e4c:	d031      	beq.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69db      	ldr	r3, [r3, #28]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d110      	bne.n	8006e7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2208      	movs	r2, #8
 8006e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 f8ff 	bl	8007068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e029      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e8c:	d111      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f8e5 	bl	8007068 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e00f      	b.n	8006ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	bf0c      	ite	eq
 8006ec2:	2301      	moveq	r3, #1
 8006ec4:	2300      	movne	r3, #0
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d0a0      	beq.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b097      	sub	sp, #92	@ 0x5c
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	d10e      	bne.n	8006f2e <UART_Start_Receive_IT+0x52>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <UART_Start_Receive_IT+0x48>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f22:	e02d      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22ff      	movs	r2, #255	@ 0xff
 8006f28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f2c:	e028      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <UART_Start_Receive_IT+0x76>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <UART_Start_Receive_IT+0x6c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	22ff      	movs	r2, #255	@ 0xff
 8006f42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f46:	e01b      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	227f      	movs	r2, #127	@ 0x7f
 8006f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f50:	e016      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f5a:	d10d      	bne.n	8006f78 <UART_Start_Receive_IT+0x9c>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <UART_Start_Receive_IT+0x92>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	227f      	movs	r2, #127	@ 0x7f
 8006f68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f6c:	e008      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	223f      	movs	r2, #63	@ 0x3f
 8006f72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f76:	e003      	b.n	8006f80 <UART_Start_Receive_IT+0xa4>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2222      	movs	r2, #34	@ 0x22
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3308      	adds	r3, #8
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa2:	f043 0301 	orr.w	r3, r3, #1
 8006fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fb0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006fb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e5      	bne.n	8006f90 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fcc:	d107      	bne.n	8006fde <UART_Start_Receive_IT+0x102>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d103      	bne.n	8006fde <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a21      	ldr	r2, [pc, #132]	@ (8007060 <UART_Start_Receive_IT+0x184>)
 8006fda:	669a      	str	r2, [r3, #104]	@ 0x68
 8006fdc:	e002      	b.n	8006fe4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a20      	ldr	r2, [pc, #128]	@ (8007064 <UART_Start_Receive_IT+0x188>)
 8006fe2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d019      	beq.n	8007020 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
 800700c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e6      	bne.n	8006fec <UART_Start_Receive_IT+0x110>
 800701e:	e018      	b.n	8007052 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	613b      	str	r3, [r7, #16]
   return(result);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f043 0320 	orr.w	r3, r3, #32
 8007034:	653b      	str	r3, [r7, #80]	@ 0x50
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	69f9      	ldr	r1, [r7, #28]
 8007044:	6a3a      	ldr	r2, [r7, #32]
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	61bb      	str	r3, [r7, #24]
   return(result);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e6      	bne.n	8007020 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	375c      	adds	r7, #92	@ 0x5c
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	08007365 	.word	0x08007365
 8007064:	080071a9 	.word	0x080071a9

08007068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b095      	sub	sp, #84	@ 0x54
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800708e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007090:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007094:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e6      	bne.n	8007070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	e853 3f00 	ldrex	r3, [r3]
 80070b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f023 0301 	bic.w	r3, r3, #1
 80070b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3308      	adds	r3, #8
 80070c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e5      	bne.n	80070a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d118      	bne.n	8007110 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f023 0310 	bic.w	r3, r3, #16
 80070f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	6979      	ldr	r1, [r7, #20]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	613b      	str	r3, [r7, #16]
   return(result);
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007124:	bf00      	nop
 8007126:	3754      	adds	r7, #84	@ 0x54
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fa42 	bl	80065d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800714c:	bf00      	nop
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	60bb      	str	r3, [r7, #8]
   return(result);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007170:	61fb      	str	r3, [r7, #28]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6979      	ldr	r1, [r7, #20]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fa0e 	bl	80065bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a0:	bf00      	nop
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b09c      	sub	sp, #112	@ 0x70
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c0:	2b22      	cmp	r3, #34	@ 0x22
 80071c2:	f040 80be 	bne.w	8007342 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80071cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80071d4:	b2d9      	uxtb	r1, r3
 80071d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e0:	400a      	ands	r2, r1
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 80a3 	bne.w	8007356 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800721e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007220:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800722e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007230:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800723c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e6      	bne.n	8007210 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	667b      	str	r3, [r7, #100]	@ 0x64
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007262:	647a      	str	r2, [r7, #68]	@ 0x44
 8007264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a34      	ldr	r2, [pc, #208]	@ (8007360 <UART_RxISR_8BIT+0x1b8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d01f      	beq.n	80072d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d018      	beq.n	80072d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	623b      	str	r3, [r7, #32]
   return(result);
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c8:	e841 2300 	strex	r3, r2, [r1]
 80072cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1e6      	bne.n	80072a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d12e      	bne.n	800733a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007300:	61fb      	str	r3, [r7, #28]
 8007302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	69b9      	ldr	r1, [r7, #24]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	617b      	str	r3, [r7, #20]
   return(result);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b10      	cmp	r3, #16
 8007320:	d103      	bne.n	800732a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2210      	movs	r2, #16
 8007328:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff f956 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007338:	e00d      	b.n	8007356 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fa ff02 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 8007340:	e009      	b.n	8007356 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	8b1b      	ldrh	r3, [r3, #24]
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0208 	orr.w	r2, r2, #8
 8007352:	b292      	uxth	r2, r2
 8007354:	831a      	strh	r2, [r3, #24]
}
 8007356:	bf00      	nop
 8007358:	3770      	adds	r7, #112	@ 0x70
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40008000 	.word	0x40008000

08007364 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b09c      	sub	sp, #112	@ 0x70
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007372:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800737c:	2b22      	cmp	r3, #34	@ 0x22
 800737e:	f040 80be 	bne.w	80074fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007388:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007390:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007392:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007396:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800739a:	4013      	ands	r3, r2
 800739c:	b29a      	uxth	r2, r3
 800739e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80073a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a6:	1c9a      	adds	r2, r3, #2
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 80a3 	bne.w	8007512 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80073ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e6      	bne.n	80073cc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	663b      	str	r3, [r7, #96]	@ 0x60
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3308      	adds	r3, #8
 800741c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800741e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800742c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a34      	ldr	r2, [pc, #208]	@ (800751c <UART_RxISR_16BIT+0x1b8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d01f      	beq.n	8007490 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d018      	beq.n	8007490 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	61fb      	str	r3, [r7, #28]
   return(result);
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007472:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800747e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800748a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e6      	bne.n	800745e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007494:	2b01      	cmp	r3, #1
 8007496:	d12e      	bne.n	80074f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0310 	bic.w	r3, r3, #16
 80074b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80074bc:	61bb      	str	r3, [r7, #24]
 80074be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6979      	ldr	r1, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e6      	bne.n	800749e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d103      	bne.n	80074e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2210      	movs	r2, #16
 80074e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff f878 	bl	80065e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074f4:	e00d      	b.n	8007512 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa fe24 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 80074fc:	e009      	b.n	8007512 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	8b1b      	ldrh	r3, [r3, #24]
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0208 	orr.w	r2, r2, #8
 800750e:	b292      	uxth	r2, r2
 8007510:	831a      	strh	r2, [r3, #24]
}
 8007512:	bf00      	nop
 8007514:	3770      	adds	r7, #112	@ 0x70
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40008000 	.word	0x40008000

08007520 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0
}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 800756a:	b480      	push	{r7}
 800756c:	af00      	add	r7, sp, #0
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0

}
 8007590:	bf00      	nop
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 80075ae:	b480      	push	{r7}
 80075b0:	af00      	add	r7, sp, #0

}
 80075b2:	bf00      	nop
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 80075c2:	4b19      	ldr	r3, [pc, #100]	@ (8007628 <OSInitHookBegin+0x6c>)
 80075c4:	60bb      	str	r3, [r7, #8]
    size = OS_CPU_EXCEPT_STK_SIZE;
 80075c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075ca:	60fb      	str	r3, [r7, #12]
    while (size > 0u) {
 80075cc:	e007      	b.n	80075de <OSInitHookBegin+0x22>
        size--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
       *pstk++ = (OS_STK)0;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	60ba      	str	r2, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f4      	bne.n	80075ce <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 80075e4:	4b11      	ldr	r3, [pc, #68]	@ (800762c <OSInitHookBegin+0x70>)
 80075e6:	4a12      	ldr	r2, [pc, #72]	@ (8007630 <OSInitHookBegin+0x74>)
 80075e8:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80075ea:	4b10      	ldr	r3, [pc, #64]	@ (800762c <OSInitHookBegin+0x70>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f023 0307 	bic.w	r3, r3, #7
 80075f2:	461a      	mov	r2, r3
 80075f4:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <OSInitHookBegin+0x70>)
 80075f6:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    reg_val = OS_CPU_CM_FP_FPCCR;                               /* Check the floating point mode.                       */
 80075f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007634 <OSInitHookBegin+0x78>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	607b      	str	r3, [r7, #4]
    if ((reg_val & OS_CPU_CM_FPCCR_LAZY_STK) != OS_CPU_CM_FPCCR_LAZY_STK) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007604:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007608:	d001      	beq.n	800760e <OSInitHookBegin+0x52>
        while (1u) {                                            /* See Note (2).                                        */
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <OSInitHookBegin+0x4e>
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 800760e:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <OSInitHookBegin+0x7c>)
 8007610:	2200      	movs	r2, #0
 8007612:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 8007614:	4b09      	ldr	r3, [pc, #36]	@ (800763c <OSInitHookBegin+0x80>)
 8007616:	2240      	movs	r2, #64	@ 0x40
 8007618:	601a      	str	r2, [r3, #0]
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	20006358 	.word	0x20006358
 800762c:	20006758 	.word	0x20006758
 8007630:	20006758 	.word	0x20006758
 8007634:	e000ef34 	.word	0xe000ef34
 8007638:	2000675c 	.word	0x2000675c
 800763c:	20006760 	.word	0x20006760

08007640 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0

}
 8007644:	bf00      	nop
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff ff6c 	bl	8007534 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff ff6b 	bl	8007548 <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 800767e:	f7ff ff6d 	bl	800755c <App_TaskIdleHook>
#endif
}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}

08007686 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ff72 	bl	8007578 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 80076a0:	f7ff ff63 	bl	800756a <App_TaskStatHook>
#endif
}
 80076a4:	bf00      	nop
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3304      	adds	r3, #4
 80076ba:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0307 	bic.w	r3, r3, #7
 80076c2:	617b      	str	r3, [r7, #20]
                                                                /* Registers stacked as if auto-saved on exception      */
#if (OS_CPU_ARM_FP_EN > 0u)                                     /* FPU auto-saved registers.                            */
     --p_stk;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	3b04      	subs	r3, #4
 80076c8:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x02000000u;                           /* FPSCR                                                */
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	3b04      	subs	r3, #4
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80076d6:	601a      	str	r2, [r3, #0]
                                                                /* Initialize S0-S15 floating point registers           */
    *(--p_stk) = (OS_STK)0x41700000u;                           /* S15                                                  */
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	3b04      	subs	r3, #4
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4a93      	ldr	r2, [pc, #588]	@ (8007930 <OSTaskStkInit+0x288>)
 80076e2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41600000u;                           /* S14                                                  */
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	3b04      	subs	r3, #4
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	4a91      	ldr	r2, [pc, #580]	@ (8007934 <OSTaskStkInit+0x28c>)
 80076ee:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41500000u;                           /* S13                                                  */
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	3b04      	subs	r3, #4
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4a8f      	ldr	r2, [pc, #572]	@ (8007938 <OSTaskStkInit+0x290>)
 80076fa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41400000u;                           /* S12                                                  */
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	3b04      	subs	r3, #4
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4a8d      	ldr	r2, [pc, #564]	@ (800793c <OSTaskStkInit+0x294>)
 8007706:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41300000u;                           /* S11                                                  */
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	3b04      	subs	r3, #4
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	4a8b      	ldr	r2, [pc, #556]	@ (8007940 <OSTaskStkInit+0x298>)
 8007712:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41200000u;                           /* S10                                                  */
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	3b04      	subs	r3, #4
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4a89      	ldr	r2, [pc, #548]	@ (8007944 <OSTaskStkInit+0x29c>)
 800771e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41100000u;                           /* S9                                                   */
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	3b04      	subs	r3, #4
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	4a87      	ldr	r2, [pc, #540]	@ (8007948 <OSTaskStkInit+0x2a0>)
 800772a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41000000u;                           /* S8                                                   */
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	3b04      	subs	r3, #4
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8007738:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40E00000u;                           /* S7                                                   */
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	3b04      	subs	r3, #4
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4a82      	ldr	r2, [pc, #520]	@ (800794c <OSTaskStkInit+0x2a4>)
 8007744:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40C00000u;                           /* S6                                                   */
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	3b04      	subs	r3, #4
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	4a80      	ldr	r2, [pc, #512]	@ (8007950 <OSTaskStkInit+0x2a8>)
 8007750:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40A00000u;                           /* S5                                                   */
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3b04      	subs	r3, #4
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4a7e      	ldr	r2, [pc, #504]	@ (8007954 <OSTaskStkInit+0x2ac>)
 800775c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40800000u;                           /* S4                                                   */
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	3b04      	subs	r3, #4
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800776a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3b04      	subs	r3, #4
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4a78      	ldr	r2, [pc, #480]	@ (8007958 <OSTaskStkInit+0x2b0>)
 8007776:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	3b04      	subs	r3, #4
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007784:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	3b04      	subs	r3, #4
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007792:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	3b04      	subs	r3, #4
 8007798:	617b      	str	r3, [r7, #20]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	3b04      	subs	r3, #4
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077ac:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	3b04      	subs	r3, #4
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	4a66      	ldr	r2, [pc, #408]	@ (800795c <OSTaskStkInit+0x2b4>)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	3b04      	subs	r3, #4
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 80077d2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	3b04      	subs	r3, #4
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 80077e0:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 80077ee:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	3b04      	subs	r3, #4
 80077f4:	617b      	str	r3, [r7, #20]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 80077fc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	3b04      	subs	r3, #4
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	3b04      	subs	r3, #4
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f06f 0212 	mvn.w	r2, #18
 8007816:	601a      	str	r2, [r3, #0]
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	3b04      	subs	r3, #4
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8007824:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3b04      	subs	r3, #4
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 8007832:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	3b04      	subs	r3, #4
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 8007840:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	3b04      	subs	r3, #4
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800784e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	3b04      	subs	r3, #4
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800785c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	3b04      	subs	r3, #4
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800786a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3b04      	subs	r3, #4
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 8007878:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	3b04      	subs	r3, #4
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 8007886:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
                                                                /* Initialize S16-S31 floating point registers          */
    *(--p_stk) = (OS_STK)0x41F80000u;                           /* S31                                                  */
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	3b04      	subs	r3, #4
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4a33      	ldr	r2, [pc, #204]	@ (8007960 <OSTaskStkInit+0x2b8>)
 8007892:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41F00000u;                           /* S30                                                  */
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3b04      	subs	r3, #4
 8007898:	617b      	str	r3, [r7, #20]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	4a31      	ldr	r2, [pc, #196]	@ (8007964 <OSTaskStkInit+0x2bc>)
 800789e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E80000u;                           /* S29                                                  */
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	3b04      	subs	r3, #4
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	4a2f      	ldr	r2, [pc, #188]	@ (8007968 <OSTaskStkInit+0x2c0>)
 80078aa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41E00000u;                           /* S28                                                  */
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	3b04      	subs	r3, #4
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	4a2d      	ldr	r2, [pc, #180]	@ (800796c <OSTaskStkInit+0x2c4>)
 80078b6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D80000u;                           /* S27                                                  */
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	3b04      	subs	r3, #4
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007970 <OSTaskStkInit+0x2c8>)
 80078c2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41D00000u;                           /* S26                                                  */
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	3b04      	subs	r3, #4
 80078c8:	617b      	str	r3, [r7, #20]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	4a29      	ldr	r2, [pc, #164]	@ (8007974 <OSTaskStkInit+0x2cc>)
 80078ce:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C80000u;                           /* S25                                                  */
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	3b04      	subs	r3, #4
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	4a27      	ldr	r2, [pc, #156]	@ (8007978 <OSTaskStkInit+0x2d0>)
 80078da:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41C00000u;                           /* S24                                                  */
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	3b04      	subs	r3, #4
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	4a25      	ldr	r2, [pc, #148]	@ (800797c <OSTaskStkInit+0x2d4>)
 80078e6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B80000u;                           /* S23                                                  */
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	3b04      	subs	r3, #4
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	4a23      	ldr	r2, [pc, #140]	@ (8007980 <OSTaskStkInit+0x2d8>)
 80078f2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41B00000u;                           /* S22                                                  */
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3b04      	subs	r3, #4
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	4a21      	ldr	r2, [pc, #132]	@ (8007984 <OSTaskStkInit+0x2dc>)
 80078fe:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A80000u;                           /* S21                                                  */
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	3b04      	subs	r3, #4
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	4a1f      	ldr	r2, [pc, #124]	@ (8007988 <OSTaskStkInit+0x2e0>)
 800790a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41A00000u;                           /* S20                                                  */
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	3b04      	subs	r3, #4
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	4a1d      	ldr	r2, [pc, #116]	@ (800798c <OSTaskStkInit+0x2e4>)
 8007916:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41980000u;                           /* S19                                                  */
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	3b04      	subs	r3, #4
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	4a1b      	ldr	r2, [pc, #108]	@ (8007990 <OSTaskStkInit+0x2e8>)
 8007922:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3b04      	subs	r3, #4
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	e032      	b.n	8007994 <OSTaskStkInit+0x2ec>
 800792e:	bf00      	nop
 8007930:	41700000 	.word	0x41700000
 8007934:	41600000 	.word	0x41600000
 8007938:	41500000 	.word	0x41500000
 800793c:	41400000 	.word	0x41400000
 8007940:	41300000 	.word	0x41300000
 8007944:	41200000 	.word	0x41200000
 8007948:	41100000 	.word	0x41100000
 800794c:	40e00000 	.word	0x40e00000
 8007950:	40c00000 	.word	0x40c00000
 8007954:	40a00000 	.word	0x40a00000
 8007958:	40400000 	.word	0x40400000
 800795c:	08009d99 	.word	0x08009d99
 8007960:	41f80000 	.word	0x41f80000
 8007964:	41f00000 	.word	0x41f00000
 8007968:	41e80000 	.word	0x41e80000
 800796c:	41e00000 	.word	0x41e00000
 8007970:	41d80000 	.word	0x41d80000
 8007974:	41d00000 	.word	0x41d00000
 8007978:	41c80000 	.word	0x41c80000
 800797c:	41c00000 	.word	0x41c00000
 8007980:	41b80000 	.word	0x41b80000
 8007984:	41b00000 	.word	0x41b00000
 8007988:	41a80000 	.word	0x41a80000
 800798c:	41a00000 	.word	0x41a00000
 8007990:	41980000 	.word	0x41980000
 8007994:	4a0a      	ldr	r2, [pc, #40]	@ (80079c0 <OSTaskStkInit+0x318>)
 8007996:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	3b04      	subs	r3, #4
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	4a08      	ldr	r2, [pc, #32]	@ (80079c4 <OSTaskStkInit+0x31c>)
 80079a2:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3b04      	subs	r3, #4
 80079a8:	617b      	str	r3, [r7, #20]
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 80079b0:	601a      	str	r2, [r3, #0]
#endif

    return (p_stk);
 80079b2:	697b      	ldr	r3, [r7, #20]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	41900000 	.word	0x41900000
 80079c4:	41880000 	.word	0x41880000

080079c8 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	af00      	add	r7, sp, #0

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
 80079cc:	4b07      	ldr	r3, [pc, #28]	@ (80079ec <OSTaskSwHook+0x24>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7f8 fbfc 	bl	80001d0 <OS_CPU_FP_Reg_Push>
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 80079d8:	f7ff fdd8 	bl	800758c <App_TaskSwHook>
#endif

    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
 80079dc:	4b04      	ldr	r3, [pc, #16]	@ (80079f0 <OSTaskSwHook+0x28>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7f8 fbfd 	bl	80001e2 <OS_CPU_FP_Reg_Pop>
#endif
}
 80079e8:	bf00      	nop
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20006cd8 	.word	0x20006cd8
 80079f0:	20006ce0 	.word	0x20006ce0

080079f4 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fdcc 	bl	800759a <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8007a02:	bf00      	nop
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 8007a10:	f7ff fdcd 	bl	80075ae <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8007a14:	4b08      	ldr	r3, [pc, #32]	@ (8007a38 <OSTimeTickHook+0x2c>)
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	4b06      	ldr	r3, [pc, #24]	@ (8007a38 <OSTimeTickHook+0x2c>)
 8007a1e:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 8007a20:	4b05      	ldr	r3, [pc, #20]	@ (8007a38 <OSTimeTickHook+0x2c>)
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	2b63      	cmp	r3, #99	@ 0x63
 8007a26:	d904      	bls.n	8007a32 <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 8007a28:	4b03      	ldr	r3, [pc, #12]	@ (8007a38 <OSTimeTickHook+0x2c>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 8007a2e:	f002 fab3 	bl	8009f98 <OSTmrSignal>
    }
#endif
}
 8007a32:	bf00      	nop
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	2000675c 	.word	0x2000675c

08007a3c <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 8007a42:	2040      	movs	r0, #64	@ 0x40
 8007a44:	f7f8 fbd3 	bl	80001ee <OS_CPU_SR_Save>
 8007a48:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 8007a4a:	f000 f951 	bl	8007cf0 <OSIntEnter>
    OS_EXIT_CRITICAL();
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7f8 fbdb 	bl	800020a <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 8007a54:	f000 fa42 	bl	8007edc <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 8007a58:	f000 f964 	bl	8007d24 <OSIntExit>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8007a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b5c <OSDebugInit+0xf8>)
 8007a6c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8007a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b60 <OSDebugInit+0xfc>)
 8007a70:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8007a72:	4b3c      	ldr	r3, [pc, #240]	@ (8007b64 <OSDebugInit+0x100>)
 8007a74:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8007a76:	4b3c      	ldr	r3, [pc, #240]	@ (8007b68 <OSDebugInit+0x104>)
 8007a78:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8007a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b6c <OSDebugInit+0x108>)
 8007a7c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8007a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b70 <OSDebugInit+0x10c>)
 8007a80:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8007a82:	4b3c      	ldr	r3, [pc, #240]	@ (8007b74 <OSDebugInit+0x110>)
 8007a84:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8007a86:	4b3c      	ldr	r3, [pc, #240]	@ (8007b78 <OSDebugInit+0x114>)
 8007a88:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8007a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b7c <OSDebugInit+0x118>)
 8007a8c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8007a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b80 <OSDebugInit+0x11c>)
 8007a90:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8007a92:	4b3c      	ldr	r3, [pc, #240]	@ (8007b84 <OSDebugInit+0x120>)
 8007a94:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8007a96:	4b3c      	ldr	r3, [pc, #240]	@ (8007b88 <OSDebugInit+0x124>)
 8007a98:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8007a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8007b8c <OSDebugInit+0x128>)
 8007a9c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8007a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b90 <OSDebugInit+0x12c>)
 8007aa0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8007aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8007b94 <OSDebugInit+0x130>)
 8007aa4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8007aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8007b98 <OSDebugInit+0x134>)
 8007aa8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8007aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8007b9c <OSDebugInit+0x138>)
 8007aac:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8007aae:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba0 <OSDebugInit+0x13c>)
 8007ab0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8007ab2:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba4 <OSDebugInit+0x140>)
 8007ab4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba8 <OSDebugInit+0x144>)
 8007ab8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8007aba:	4b3c      	ldr	r3, [pc, #240]	@ (8007bac <OSDebugInit+0x148>)
 8007abc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8007abe:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb0 <OSDebugInit+0x14c>)
 8007ac0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8007ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb4 <OSDebugInit+0x150>)
 8007ac4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8007ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb8 <OSDebugInit+0x154>)
 8007ac8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8007aca:	4b3c      	ldr	r3, [pc, #240]	@ (8007bbc <OSDebugInit+0x158>)
 8007acc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8007ace:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc0 <OSDebugInit+0x15c>)
 8007ad0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8007ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc4 <OSDebugInit+0x160>)
 8007ad4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8007ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8007bc8 <OSDebugInit+0x164>)
 8007ad8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8007ada:	4b3c      	ldr	r3, [pc, #240]	@ (8007bcc <OSDebugInit+0x168>)
 8007adc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8007ade:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd0 <OSDebugInit+0x16c>)
 8007ae0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8007ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd4 <OSDebugInit+0x170>)
 8007ae4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8007ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd8 <OSDebugInit+0x174>)
 8007ae8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8007aea:	4b3c      	ldr	r3, [pc, #240]	@ (8007bdc <OSDebugInit+0x178>)
 8007aec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8007aee:	4b3c      	ldr	r3, [pc, #240]	@ (8007be0 <OSDebugInit+0x17c>)
 8007af0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8007af2:	4b3c      	ldr	r3, [pc, #240]	@ (8007be4 <OSDebugInit+0x180>)
 8007af4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8007af6:	4b3c      	ldr	r3, [pc, #240]	@ (8007be8 <OSDebugInit+0x184>)
 8007af8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8007afa:	4b3c      	ldr	r3, [pc, #240]	@ (8007bec <OSDebugInit+0x188>)
 8007afc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8007afe:	4b3c      	ldr	r3, [pc, #240]	@ (8007bf0 <OSDebugInit+0x18c>)
 8007b00:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8007b02:	4b3c      	ldr	r3, [pc, #240]	@ (8007bf4 <OSDebugInit+0x190>)
 8007b04:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8007b06:	4b3c      	ldr	r3, [pc, #240]	@ (8007bf8 <OSDebugInit+0x194>)
 8007b08:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 8007b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8007bfc <OSDebugInit+0x198>)
 8007b0c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8007b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c00 <OSDebugInit+0x19c>)
 8007b10:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8007b12:	4b3c      	ldr	r3, [pc, #240]	@ (8007c04 <OSDebugInit+0x1a0>)
 8007b14:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8007b16:	4b3c      	ldr	r3, [pc, #240]	@ (8007c08 <OSDebugInit+0x1a4>)
 8007b18:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 8007b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c0c <OSDebugInit+0x1a8>)
 8007b1c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 8007b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c10 <OSDebugInit+0x1ac>)
 8007b20:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8007b22:	4b3c      	ldr	r3, [pc, #240]	@ (8007c14 <OSDebugInit+0x1b0>)
 8007b24:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8007b26:	4b3c      	ldr	r3, [pc, #240]	@ (8007c18 <OSDebugInit+0x1b4>)
 8007b28:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 8007b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c1c <OSDebugInit+0x1b8>)
 8007b2c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 8007b2e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c20 <OSDebugInit+0x1bc>)
 8007b30:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 8007b32:	4b3c      	ldr	r3, [pc, #240]	@ (8007c24 <OSDebugInit+0x1c0>)
 8007b34:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8007b36:	4b3c      	ldr	r3, [pc, #240]	@ (8007c28 <OSDebugInit+0x1c4>)
 8007b38:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 8007b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c2c <OSDebugInit+0x1c8>)
 8007b3c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 8007b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c30 <OSDebugInit+0x1cc>)
 8007b40:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8007b42:	4b3c      	ldr	r3, [pc, #240]	@ (8007c34 <OSDebugInit+0x1d0>)
 8007b44:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8007b46:	4b3c      	ldr	r3, [pc, #240]	@ (8007c38 <OSDebugInit+0x1d4>)
 8007b48:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 8007b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c3c <OSDebugInit+0x1d8>)
 8007b4c:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	0800d17c 	.word	0x0800d17c
 8007b60:	0800d180 	.word	0x0800d180
 8007b64:	0800d186 	.word	0x0800d186
 8007b68:	0800d188 	.word	0x0800d188
 8007b6c:	0800d184 	.word	0x0800d184
 8007b70:	0800d18a 	.word	0x0800d18a
 8007b74:	0800d18c 	.word	0x0800d18c
 8007b78:	0800d18e 	.word	0x0800d18e
 8007b7c:	0800d190 	.word	0x0800d190
 8007b80:	0800d192 	.word	0x0800d192
 8007b84:	0800d194 	.word	0x0800d194
 8007b88:	0800d196 	.word	0x0800d196
 8007b8c:	0800d198 	.word	0x0800d198
 8007b90:	0800d19a 	.word	0x0800d19a
 8007b94:	0800d19c 	.word	0x0800d19c
 8007b98:	0800d19e 	.word	0x0800d19e
 8007b9c:	0800d1a0 	.word	0x0800d1a0
 8007ba0:	0800d1a2 	.word	0x0800d1a2
 8007ba4:	0800d1a4 	.word	0x0800d1a4
 8007ba8:	0800d1a6 	.word	0x0800d1a6
 8007bac:	0800d1a8 	.word	0x0800d1a8
 8007bb0:	0800d1aa 	.word	0x0800d1aa
 8007bb4:	0800d1ac 	.word	0x0800d1ac
 8007bb8:	0800d1ae 	.word	0x0800d1ae
 8007bbc:	0800d1b0 	.word	0x0800d1b0
 8007bc0:	0800d1b2 	.word	0x0800d1b2
 8007bc4:	0800d1b4 	.word	0x0800d1b4
 8007bc8:	0800d1b6 	.word	0x0800d1b6
 8007bcc:	0800d1b8 	.word	0x0800d1b8
 8007bd0:	0800d1ba 	.word	0x0800d1ba
 8007bd4:	0800d1bc 	.word	0x0800d1bc
 8007bd8:	0800d1be 	.word	0x0800d1be
 8007bdc:	0800d1c0 	.word	0x0800d1c0
 8007be0:	0800d1c2 	.word	0x0800d1c2
 8007be4:	0800d1c4 	.word	0x0800d1c4
 8007be8:	0800d1c6 	.word	0x0800d1c6
 8007bec:	0800d1c8 	.word	0x0800d1c8
 8007bf0:	0800d1ca 	.word	0x0800d1ca
 8007bf4:	0800d1cc 	.word	0x0800d1cc
 8007bf8:	0800d1ce 	.word	0x0800d1ce
 8007bfc:	0800d1d0 	.word	0x0800d1d0
 8007c00:	0800d1d2 	.word	0x0800d1d2
 8007c04:	0800d1d4 	.word	0x0800d1d4
 8007c08:	0800d1d6 	.word	0x0800d1d6
 8007c0c:	200076cc 	.word	0x200076cc
 8007c10:	20007b50 	.word	0x20007b50
 8007c14:	0800d1da 	.word	0x0800d1da
 8007c18:	0800d1dc 	.word	0x0800d1dc
 8007c1c:	0800d1de 	.word	0x0800d1de
 8007c20:	0800d1e0 	.word	0x0800d1e0
 8007c24:	0800d1e2 	.word	0x0800d1e2
 8007c28:	0800d1e4 	.word	0x0800d1e4
 8007c2c:	0800d1e6 	.word	0x0800d1e6
 8007c30:	0800d1e8 	.word	0x0800d1e8
 8007c34:	0800d1ea 	.word	0x0800d1ea
 8007c38:	0800d1d8 	.word	0x0800d1d8
 8007c3c:	0800d1ec 	.word	0x0800d1ec

08007c40 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d103      	bne.n	8007c5e <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	701a      	strb	r2, [r3, #0]
        return;
 8007c5c:	e025      	b.n	8007caa <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	220c      	movs	r2, #12
 8007c68:	701a      	strb	r2, [r3, #0]
        return;
 8007c6a:	e01e      	b.n	8007caa <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8007c6c:	4b10      	ldr	r3, [pc, #64]	@ (8007cb0 <OSEventNameSet+0x70>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2212      	movs	r2, #18
 8007c78:	701a      	strb	r2, [r3, #0]
        return;
 8007c7a:	e016      	b.n	8007caa <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d903      	bls.n	8007c8e <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
             return;
 8007c8c:	e00d      	b.n	8007caa <OSEventNameSet+0x6a>
             break;
 8007c8e:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 8007c90:	2040      	movs	r0, #64	@ 0x40
 8007c92:	f7f8 faac 	bl	80001ee <OS_CPU_SR_Save>
 8007c96:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8007c9e:	6978      	ldr	r0, [r7, #20]
 8007ca0:	f7f8 fab3 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
}
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20006ac0 	.word	0x20006ac0

08007cb4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 8007cb8:	f7ff fc80 	bl	80075bc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 8007cbc:	f000 fb64 	bl	8008388 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 8007cc0:	f000 fba0 	bl	8008404 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 8007cc4:	f000 fc1c 	bl	8008500 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 8007cc8:	f000 fb14 	bl	80082f4 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8007ccc:	f001 f9d8 	bl	8009080 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8007cd0:	f001 fa96 	bl	8009200 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8007cd4:	f001 fc5c 	bl	8009590 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 8007cd8:	f000 fbc6 	bl	8008468 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8007cdc:	f000 fbea 	bl	80084b4 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8007ce0:	f002 f96c 	bl	8009fbc <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8007ce4:	f7ff fcac 	bl	8007640 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 8007ce8:	f7ff febc 	bl	8007a64 <OSDebugInit>
#endif
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8007cf4:	4b09      	ldr	r3, [pc, #36]	@ (8007d1c <OSIntEnter+0x2c>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d109      	bne.n	8007d10 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8007cfc:	4b08      	ldr	r3, [pc, #32]	@ (8007d20 <OSIntEnter+0x30>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2bff      	cmp	r3, #255	@ 0xff
 8007d02:	d005      	beq.n	8007d10 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8007d04:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <OSIntEnter+0x30>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	4b04      	ldr	r3, [pc, #16]	@ (8007d20 <OSIntEnter+0x30>)
 8007d0e:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20006ad0 	.word	0x20006ad0
 8007d20:	20006ac0 	.word	0x20006ac0

08007d24 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 8007d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007da8 <OSIntExit+0x84>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d134      	bne.n	8007da0 <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8007d36:	2040      	movs	r0, #64	@ 0x40
 8007d38:	f7f8 fa59 	bl	80001ee <OS_CPU_SR_Save>
 8007d3c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 8007d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dac <OSIntExit+0x88>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <OSIntExit+0x2e>
            OSIntNesting--;
 8007d46:	4b19      	ldr	r3, [pc, #100]	@ (8007dac <OSIntExit+0x88>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	4b17      	ldr	r3, [pc, #92]	@ (8007dac <OSIntExit+0x88>)
 8007d50:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8007d52:	4b16      	ldr	r3, [pc, #88]	@ (8007dac <OSIntExit+0x88>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d11f      	bne.n	8007d9a <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8007d5a:	4b15      	ldr	r3, [pc, #84]	@ (8007db0 <OSIntExit+0x8c>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d11b      	bne.n	8007d9a <OSIntExit+0x76>
                OS_SchedNew();
 8007d62:	f000 fc77 	bl	8008654 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8007d66:	4b13      	ldr	r3, [pc, #76]	@ (8007db4 <OSIntExit+0x90>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4b12      	ldr	r3, [pc, #72]	@ (8007db8 <OSIntExit+0x94>)
 8007d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d72:	4a12      	ldr	r2, [pc, #72]	@ (8007dbc <OSIntExit+0x98>)
 8007d74:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8007d76:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <OSIntExit+0x90>)
 8007d78:	781a      	ldrb	r2, [r3, #0]
 8007d7a:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <OSIntExit+0x9c>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d00b      	beq.n	8007d9a <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8007d82:	4b0e      	ldr	r3, [pc, #56]	@ (8007dbc <OSIntExit+0x98>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d88:	3201      	adds	r2, #1
 8007d8a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 8007d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <OSIntExit+0xa0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3301      	adds	r3, #1
 8007d92:	4a0c      	ldr	r2, [pc, #48]	@ (8007dc4 <OSIntExit+0xa0>)
 8007d94:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8007d96:	f7f8 fa81 	bl	800029c <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7f8 fa35 	bl	800020a <OS_CPU_SR_Restore>
    }
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20006ad0 	.word	0x20006ad0
 8007dac:	20006ac0 	.word	0x20006ac0
 8007db0:	20006ac1 	.word	0x20006ac1
 8007db4:	20006ac3 	.word	0x20006ac3
 8007db8:	20006ce8 	.word	0x20006ce8
 8007dbc:	20006ce0 	.word	0x20006ce0
 8007dc0:	20006ac2 	.word	0x20006ac2
 8007dc4:	20006764 	.word	0x20006764

08007dc8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8007dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e0c <OSSchedLock+0x44>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d114      	bne.n	8007e04 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 8007dda:	2040      	movs	r0, #64	@ 0x40
 8007ddc:	f7f8 fa07 	bl	80001ee <OS_CPU_SR_Save>
 8007de0:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8007de2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <OSSchedLock+0x48>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 8007dea:	4b0a      	ldr	r3, [pc, #40]	@ (8007e14 <OSSchedLock+0x4c>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2bff      	cmp	r3, #255	@ 0xff
 8007df0:	d005      	beq.n	8007dfe <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8007df2:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <OSSchedLock+0x4c>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <OSSchedLock+0x4c>)
 8007dfc:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7f8 fa03 	bl	800020a <OS_CPU_SR_Restore>
    }
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20006ad0 	.word	0x20006ad0
 8007e10:	20006ac0 	.word	0x20006ac0
 8007e14:	20006ac1 	.word	0x20006ac1

08007e18 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8007e22:	4b17      	ldr	r3, [pc, #92]	@ (8007e80 <OSSchedUnlock+0x68>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d126      	bne.n	8007e78 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 8007e2a:	2040      	movs	r0, #64	@ 0x40
 8007e2c:	f7f8 f9df 	bl	80001ee <OS_CPU_SR_Save>
 8007e30:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <OSSchedUnlock+0x6c>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d11b      	bne.n	8007e72 <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8007e3a:	4b13      	ldr	r3, [pc, #76]	@ (8007e88 <OSSchedUnlock+0x70>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d013      	beq.n	8007e6a <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8007e42:	4b11      	ldr	r3, [pc, #68]	@ (8007e88 <OSSchedUnlock+0x70>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <OSSchedUnlock+0x70>)
 8007e4c:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e88 <OSSchedUnlock+0x70>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7f8 f9d7 	bl	800020a <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 8007e5c:	f000 fbb8 	bl	80085d0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8007e60:	e00a      	b.n	8007e78 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7f8 f9d1 	bl	800020a <OS_CPU_SR_Restore>
}
 8007e68:	e006      	b.n	8007e78 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7f8 f9cd 	bl	800020a <OS_CPU_SR_Restore>
}
 8007e70:	e002      	b.n	8007e78 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7f8 f9c9 	bl	800020a <OS_CPU_SR_Restore>
}
 8007e78:	bf00      	nop
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20006ad0 	.word	0x20006ad0
 8007e84:	20006ac0 	.word	0x20006ac0
 8007e88:	20006ac1 	.word	0x20006ac1

08007e8c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8007e90:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec4 <OSStart+0x38>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d113      	bne.n	8007ec0 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8007e98:	f000 fbdc 	bl	8008654 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <OSStart+0x3c>)
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ecc <OSStart+0x40>)
 8007ea2:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8007ea4:	4b08      	ldr	r3, [pc, #32]	@ (8007ec8 <OSStart+0x3c>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4b09      	ldr	r3, [pc, #36]	@ (8007ed0 <OSStart+0x44>)
 8007eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eb0:	4a08      	ldr	r2, [pc, #32]	@ (8007ed4 <OSStart+0x48>)
 8007eb2:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8007eb4:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <OSStart+0x48>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a07      	ldr	r2, [pc, #28]	@ (8007ed8 <OSStart+0x4c>)
 8007eba:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 8007ebc:	f7f8 f9ae 	bl	800021c <OSStartHighRdy>
    }
}
 8007ec0:	bf00      	nop
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	20006ad0 	.word	0x20006ad0
 8007ec8:	20006ac3 	.word	0x20006ac3
 8007ecc:	20006ac2 	.word	0x20006ac2
 8007ed0:	20006ce8 	.word	0x20006ce8
 8007ed4:	20006ce0 	.word	0x20006ce0
 8007ed8:	20006cd8 	.word	0x20006cd8

08007edc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8007ee6:	f7ff fd91 	bl	8007a0c <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8007eea:	2040      	movs	r0, #64	@ 0x40
 8007eec:	f7f8 f97f 	bl	80001ee <OS_CPU_SR_Save>
 8007ef0:	6078      	str	r0, [r7, #4]
    OSTime++;
 8007ef2:	4b45      	ldr	r3, [pc, #276]	@ (8008008 <OSTimeTick+0x12c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	4a43      	ldr	r2, [pc, #268]	@ (8008008 <OSTimeTick+0x12c>)
 8007efa:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f7f8 f984 	bl	800020a <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 8007f02:	4b42      	ldr	r3, [pc, #264]	@ (800800c <OSTimeTick+0x130>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d17a      	bne.n	8008000 <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8007f0a:	4b41      	ldr	r3, [pc, #260]	@ (8008010 <OSTimeTick+0x134>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d00c      	beq.n	8007f2c <OSTimeTick+0x50>
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	dc10      	bgt.n	8007f38 <OSTimeTick+0x5c>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <OSTimeTick+0x44>
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d003      	beq.n	8007f26 <OSTimeTick+0x4a>
 8007f1e:	e00b      	b.n	8007f38 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 8007f20:	2301      	movs	r3, #1
 8007f22:	72fb      	strb	r3, [r7, #11]
                 break;
 8007f24:	e00e      	b.n	8007f44 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 8007f26:	2300      	movs	r3, #0
 8007f28:	72fb      	strb	r3, [r7, #11]
                 break;
 8007f2a:	e00b      	b.n	8007f44 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8007f30:	4b37      	ldr	r3, [pc, #220]	@ (8008010 <OSTimeTick+0x134>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	701a      	strb	r2, [r3, #0]
                 break;
 8007f36:	e005      	b.n	8007f44 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8007f3c:	4b34      	ldr	r3, [pc, #208]	@ (8008010 <OSTimeTick+0x134>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	701a      	strb	r2, [r3, #0]
                 break;
 8007f42:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d059      	beq.n	8007ffe <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8007f4a:	4b32      	ldr	r3, [pc, #200]	@ (8008014 <OSTimeTick+0x138>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8007f50:	e04f      	b.n	8007ff2 <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 8007f52:	2040      	movs	r0, #64	@ 0x40
 8007f54:	f7f8 f94b 	bl	80001ee <OS_CPU_SR_Save>
 8007f58:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d041      	beq.n	8007fe6 <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f66:	1e5a      	subs	r2, r3, #1
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	635a      	str	r2, [r3, #52]	@ 0x34
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d138      	bne.n	8007fe6 <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f7a:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00d      	beq.n	8007f9e <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f88:	f023 0337 	bic.w	r3, r3, #55	@ 0x37
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8007f9c:	e003      	b.n	8007fa6 <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fac:	f003 0308 	and.w	r3, r3, #8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d118      	bne.n	8007fe6 <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8007fba:	4b17      	ldr	r3, [pc, #92]	@ (8008018 <OSTimeTick+0x13c>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	4b15      	ldr	r3, [pc, #84]	@ (8008018 <OSTimeTick+0x13c>)
 8007fc4:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b13      	ldr	r3, [pc, #76]	@ (800801c <OSTimeTick+0x140>)
 8007fd0:	5c9a      	ldrb	r2, [r3, r2]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd8:	68f9      	ldr	r1, [r7, #12]
 8007fda:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <OSTimeTick+0x140>)
 8007fe4:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7f8 f90c 	bl	800020a <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007ff8:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ffa:	d1aa      	bne.n	8007f52 <OSTimeTick+0x76>
 8007ffc:	e000      	b.n	8008000 <OSTimeTick+0x124>
            return;
 8007ffe:	bf00      	nop
        }
    }
}
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200076b8 	.word	0x200076b8
 800800c:	20006ad0 	.word	0x20006ad0
 8008010:	200075d0 	.word	0x200075d0
 8008014:	20006ce4 	.word	0x20006ce4
 8008018:	20006ac4 	.word	0x20006ac4
 800801c:	20006ac8 	.word	0x20006ac8

08008020 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
	...

08008030 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4611      	mov	r1, r2
 800803c:	461a      	mov	r2, r3
 800803e:	460b      	mov	r3, r1
 8008040:	71fb      	strb	r3, [r7, #7]
 8008042:	4613      	mov	r3, r2
 8008044:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	7a9b      	ldrb	r3, [r3, #10]
 800804a:	461a      	mov	r2, r3
 800804c:	4b2f      	ldr	r3, [pc, #188]	@ (800810c <OS_EventTaskRdy+0xdc>)
 800804e:	5c9b      	ldrb	r3, [r3, r2]
 8008050:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8008052:	7dfb      	ldrb	r3, [r7, #23]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	7adb      	ldrb	r3, [r3, #11]
 800805a:	461a      	mov	r2, r3
 800805c:	4b2b      	ldr	r3, [pc, #172]	@ (800810c <OS_EventTaskRdy+0xdc>)
 800805e:	5c9b      	ldrb	r3, [r3, r2]
 8008060:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	b2da      	uxtb	r2, r3
 8008068:	7dbb      	ldrb	r3, [r7, #22]
 800806a:	4413      	add	r3, r2
 800806c:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 800806e:	7d7b      	ldrb	r3, [r7, #21]
 8008070:	4a27      	ldr	r2, [pc, #156]	@ (8008110 <OS_EventTaskRdy+0xe0>)
 8008072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008076:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	2200      	movs	r2, #0
 800807c:	635a      	str	r2, [r3, #52]	@ 0x34
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	629a      	str	r2, [r3, #40]	@ 0x28
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	43db      	mvns	r3, r3
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4013      	ands	r3, r2
 8008092:	b2da      	uxtb	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	79ba      	ldrb	r2, [r7, #6]
 800809e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d113      	bne.n	80080d8 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80080b6:	4b17      	ldr	r3, [pc, #92]	@ (8008114 <OS_EventTaskRdy+0xe4>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	4b15      	ldr	r3, [pc, #84]	@ (8008114 <OS_EventTaskRdy+0xe4>)
 80080c0:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	4a14      	ldr	r2, [pc, #80]	@ (8008118 <OS_EventTaskRdy+0xe8>)
 80080c6:	5cd1      	ldrb	r1, [r2, r3]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f893 203d 	ldrb.w	r2, [r3, #61]	@ 0x3d
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	b2d1      	uxtb	r1, r2
 80080d4:	4a10      	ldr	r2, [pc, #64]	@ (8008118 <OS_EventTaskRdy+0xe8>)
 80080d6:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 80080d8:	68f9      	ldr	r1, [r7, #12]
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f000 f876 	bl	80081cc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <OS_EventTaskRdy+0xd0>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6938      	ldr	r0, [r7, #16]
 80080f0:	f000 f89f 	bl	8008232 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventMultiPtr  = (OS_EVENT **)0;     /* No longer pending on multi list             */
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2200      	movs	r2, #0
 80080f8:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy  = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    return (prio);
 8008100:	7d7b      	ldrb	r3, [r7, #21]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	0800d1f0 	.word	0x0800d1f0
 8008110:	20006ce8 	.word	0x20006ce8
 8008114:	20006ac4 	.word	0x20006ac4
 8008118:	20006ac8 	.word	0x20006ac8

0800811c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 8008124:	4b26      	ldr	r3, [pc, #152]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 800812c:	4b24      	ldr	r3, [pc, #144]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008134:	461a      	mov	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4413      	add	r3, r2
 800813a:	7ada      	ldrb	r2, [r3, #11]
 800813c:	4b20      	ldr	r3, [pc, #128]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008144:	491e      	ldr	r1, [pc, #120]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 8008146:	6809      	ldr	r1, [r1, #0]
 8008148:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 800814c:	4313      	orrs	r3, r2
 800814e:	b2da      	uxtb	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	440b      	add	r3, r1
 8008154:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	7a9a      	ldrb	r2, [r3, #10]
 800815a:	4b19      	ldr	r3, [pc, #100]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008162:	4313      	orrs	r3, r2
 8008164:	b2da      	uxtb	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800816a:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008172:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	4a13      	ldr	r2, [pc, #76]	@ (80081c4 <OS_EventTaskWait+0xa8>)
 8008178:	5cd1      	ldrb	r1, [r2, r3]
 800817a:	4b11      	ldr	r3, [pc, #68]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008182:	43db      	mvns	r3, r3
 8008184:	b2da      	uxtb	r2, r3
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	400a      	ands	r2, r1
 800818a:	b2d1      	uxtb	r1, r2
 800818c:	4a0d      	ldr	r2, [pc, #52]	@ (80081c4 <OS_EventTaskWait+0xa8>)
 800818e:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	4a0c      	ldr	r2, [pc, #48]	@ (80081c4 <OS_EventTaskWait+0xa8>)
 8008194:	5cd3      	ldrb	r3, [r2, r3]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10b      	bne.n	80081b2 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800819a:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <OS_EventTaskWait+0xa4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80081a2:	43db      	mvns	r3, r3
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4b08      	ldr	r3, [pc, #32]	@ (80081c8 <OS_EventTaskWait+0xac>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	4013      	ands	r3, r2
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <OS_EventTaskWait+0xac>)
 80081b0:	701a      	strb	r2, [r3, #0]
    }
}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20006cd8 	.word	0x20006cd8
 80081c4:	20006ac8 	.word	0x20006ac8
 80081c8:	20006ac4 	.word	0x20006ac4

080081cc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081dc:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	4413      	add	r3, r2
 80081e4:	7ad9      	ldrb	r1, [r3, #11]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ec:	43db      	mvns	r3, r3
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	400a      	ands	r2, r1
 80081f4:	b2d1      	uxtb	r1, r2
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	4413      	add	r3, r2
 80081fa:	460a      	mov	r2, r1
 80081fc:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	4413      	add	r3, r2
 8008204:	7adb      	ldrb	r3, [r3, #11]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	7a9a      	ldrb	r2, [r3, #10]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008214:	43db      	mvns	r3, r3
 8008216:	b2db      	uxtb	r3, r3
 8008218:	4013      	ands	r3, r2
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	61da      	str	r2, [r3, #28]
}
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8008232:	b480      	push	{r7}
 8008234:	b087      	sub	sp, #28
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008242:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800824a:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008252:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800825e:	e022      	b.n	80082a6 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4413      	add	r3, r2
 8008266:	7ad9      	ldrb	r1, [r3, #11]
 8008268:	7b7b      	ldrb	r3, [r7, #13]
 800826a:	43db      	mvns	r3, r3
 800826c:	b2da      	uxtb	r2, r3
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	400a      	ands	r2, r1
 8008272:	b2d1      	uxtb	r1, r2
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4413      	add	r3, r2
 8008278:	460a      	mov	r2, r1
 800827a:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4413      	add	r3, r2
 8008282:	7adb      	ldrb	r3, [r3, #11]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d108      	bne.n	800829a <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	7a9a      	ldrb	r2, [r3, #10]
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	43db      	mvns	r3, r3
 8008290:	b2db      	uxtb	r3, r3
 8008292:	4013      	ands	r3, r2
 8008294:	b2da      	uxtb	r2, r3
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	3304      	adds	r3, #4
 800829e:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1d9      	bne.n	8008260 <OS_EventTaskRemoveMulti+0x2e>
    }
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
 80082cc:	e007      	b.n	80082de <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	4413      	add	r3, r2
 80082d4:	2200      	movs	r2, #0
 80082d6:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	3301      	adds	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b07      	cmp	r3, #7
 80082e2:	d9f4      	bls.n	80082ce <OS_EventWaitListInit+0x14>
    }
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 80082fa:	21f0      	movs	r1, #240	@ 0xf0
 80082fc:	481f      	ldr	r0, [pc, #124]	@ (800837c <OS_InitEventList+0x88>)
 80082fe:	f000 f94d 	bl	800859c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8008302:	2300      	movs	r3, #0
 8008304:	81fb      	strh	r3, [r7, #14]
 8008306:	e01e      	b.n	8008346 <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8008308:	89fb      	ldrh	r3, [r7, #14]
 800830a:	3301      	adds	r3, #1
 800830c:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 800830e:	89fa      	ldrh	r2, [r7, #14]
 8008310:	4613      	mov	r3, r2
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	4413      	add	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4a18      	ldr	r2, [pc, #96]	@ (800837c <OS_InitEventList+0x88>)
 800831a:	4413      	add	r3, r2
 800831c:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	4613      	mov	r3, r2
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	4413      	add	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	4a14      	ldr	r2, [pc, #80]	@ (800837c <OS_InitEventList+0x88>)
 800832a:	4413      	add	r3, r2
 800832c:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	683a      	ldr	r2, [r7, #0]
 8008338:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	4a10      	ldr	r2, [pc, #64]	@ (8008380 <OS_InitEventList+0x8c>)
 800833e:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8008340:	89fb      	ldrh	r3, [r7, #14]
 8008342:	3301      	adds	r3, #1
 8008344:	81fb      	strh	r3, [r7, #14]
 8008346:	89fb      	ldrh	r3, [r7, #14]
 8008348:	2b08      	cmp	r3, #8
 800834a:	d9dd      	bls.n	8008308 <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 800834c:	89fa      	ldrh	r2, [r7, #14]
 800834e:	4613      	mov	r3, r2
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	4413      	add	r3, r2
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	4a09      	ldr	r2, [pc, #36]	@ (800837c <OS_InitEventList+0x88>)
 8008358:	4413      	add	r3, r2
 800835a:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2200      	movs	r2, #0
 8008360:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	4a05      	ldr	r2, [pc, #20]	@ (8008380 <OS_InitEventList+0x8c>)
 800836c:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800836e:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <OS_InitEventList+0x90>)
 8008370:	4a02      	ldr	r2, [pc, #8]	@ (800837c <OS_InitEventList+0x88>)
 8008372:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8008374:	bf00      	nop
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	2000676c 	.word	0x2000676c
 8008380:	0800d0c0 	.word	0x0800d0c0
 8008384:	20006768 	.word	0x20006768

08008388 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 800838c:	4b12      	ldr	r3, [pc, #72]	@ (80083d8 <OS_InitMisc+0x50>)
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8008392:	4b12      	ldr	r3, [pc, #72]	@ (80083dc <OS_InitMisc+0x54>)
 8008394:	2200      	movs	r2, #0
 8008396:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8008398:	4b11      	ldr	r3, [pc, #68]	@ (80083e0 <OS_InitMisc+0x58>)
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800839e:	4b11      	ldr	r3, [pc, #68]	@ (80083e4 <OS_InitMisc+0x5c>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 80083a4:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <OS_InitMisc+0x60>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 80083aa:	4b10      	ldr	r3, [pc, #64]	@ (80083ec <OS_InitMisc+0x64>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 80083b0:	4b0f      	ldr	r3, [pc, #60]	@ (80083f0 <OS_InitMisc+0x68>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 80083b6:	4b0f      	ldr	r3, [pc, #60]	@ (80083f4 <OS_InitMisc+0x6c>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 80083bc:	4b0e      	ldr	r3, [pc, #56]	@ (80083f8 <OS_InitMisc+0x70>)
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 80083c2:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <OS_InitMisc+0x74>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 80083c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008400 <OS_InitMisc+0x78>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
#endif
}
 80083ce:	bf00      	nop
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	200076b8 	.word	0x200076b8
 80083dc:	20006ac0 	.word	0x20006ac0
 80083e0:	20006ac1 	.word	0x20006ac1
 80083e4:	20006ad1 	.word	0x20006ad1
 80083e8:	20006ad0 	.word	0x20006ad0
 80083ec:	20006764 	.word	0x20006764
 80083f0:	20006ad4 	.word	0x20006ad4
 80083f4:	200068b8 	.word	0x200068b8
 80083f8:	200068b4 	.word	0x200068b4
 80083fc:	200068bc 	.word	0x200068bc
 8008400:	200076b4 	.word	0x200076b4

08008404 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 800840a:	4b11      	ldr	r3, [pc, #68]	@ (8008450 <OS_InitRdyList+0x4c>)
 800840c:	2200      	movs	r2, #0
 800840e:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8008410:	2300      	movs	r3, #0
 8008412:	71fb      	strb	r3, [r7, #7]
 8008414:	e006      	b.n	8008424 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	4a0e      	ldr	r2, [pc, #56]	@ (8008454 <OS_InitRdyList+0x50>)
 800841a:	2100      	movs	r1, #0
 800841c:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	3301      	adds	r3, #1
 8008422:	71fb      	strb	r3, [r7, #7]
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b07      	cmp	r3, #7
 8008428:	d9f5      	bls.n	8008416 <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 800842a:	4b0b      	ldr	r3, [pc, #44]	@ (8008458 <OS_InitRdyList+0x54>)
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8008430:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <OS_InitRdyList+0x58>)
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8008436:	4b0a      	ldr	r3, [pc, #40]	@ (8008460 <OS_InitRdyList+0x5c>)
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 800843c:	4b09      	ldr	r3, [pc, #36]	@ (8008464 <OS_InitRdyList+0x60>)
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20006ac4 	.word	0x20006ac4
 8008454:	20006ac8 	.word	0x20006ac8
 8008458:	20006ac2 	.word	0x20006ac2
 800845c:	20006ac3 	.word	0x20006ac3
 8008460:	20006ce0 	.word	0x20006ce0
 8008464:	20006cd8 	.word	0x20006cd8

08008468 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800846e:	2303      	movs	r3, #3
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	2300      	movs	r3, #0
 8008474:	9303      	str	r3, [sp, #12]
 8008476:	2380      	movs	r3, #128	@ 0x80
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	4b0a      	ldr	r3, [pc, #40]	@ (80084a4 <OS_InitTaskIdle+0x3c>)
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	233f      	movs	r3, #63	@ 0x3f
 8008486:	4a08      	ldr	r2, [pc, #32]	@ (80084a8 <OS_InitTaskIdle+0x40>)
 8008488:	2100      	movs	r1, #0
 800848a:	4808      	ldr	r0, [pc, #32]	@ (80084ac <OS_InitTaskIdle+0x44>)
 800848c:	f001 f9d4 	bl	8009838 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8008490:	1dfb      	adds	r3, r7, #7
 8008492:	461a      	mov	r2, r3
 8008494:	4906      	ldr	r1, [pc, #24]	@ (80084b0 <OS_InitTaskIdle+0x48>)
 8008496:	203f      	movs	r0, #63	@ 0x3f
 8008498:	f001 fb32 	bl	8009b00 <OSTaskNameSet>
#endif
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20006ad8 	.word	0x20006ad8
 80084a8:	20006cd4 	.word	0x20006cd4
 80084ac:	0800869d 	.word	0x0800869d
 80084b0:	0800d0c4 	.word	0x0800d0c4

080084b4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 80084ba:	2303      	movs	r3, #3
 80084bc:	9304      	str	r3, [sp, #16]
 80084be:	2300      	movs	r3, #0
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	2380      	movs	r3, #128	@ 0x80
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	4b0a      	ldr	r3, [pc, #40]	@ (80084f0 <OS_InitTaskStat+0x3c>)
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	233e      	movs	r3, #62	@ 0x3e
 80084d2:	4a08      	ldr	r2, [pc, #32]	@ (80084f4 <OS_InitTaskStat+0x40>)
 80084d4:	2100      	movs	r1, #0
 80084d6:	4808      	ldr	r0, [pc, #32]	@ (80084f8 <OS_InitTaskStat+0x44>)
 80084d8:	f001 f9ae 	bl	8009838 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 80084dc:	1dfb      	adds	r3, r7, #7
 80084de:	461a      	mov	r2, r3
 80084e0:	4906      	ldr	r1, [pc, #24]	@ (80084fc <OS_InitTaskStat+0x48>)
 80084e2:	203e      	movs	r0, #62	@ 0x3e
 80084e4:	f001 fb0c 	bl	8009b00 <OSTaskNameSet>
#endif
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	200068c0 	.word	0x200068c0
 80084f4:	20006abc 	.word	0x20006abc
 80084f8:	080086cd 	.word	0x080086cd
 80084fc:	0800d0d4 	.word	0x0800d0d4

08008500 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8008506:	f44f 61fd 	mov.w	r1, #2024	@ 0x7e8
 800850a:	481f      	ldr	r0, [pc, #124]	@ (8008588 <OS_InitTCBList+0x88>)
 800850c:	f000 f846 	bl	800859c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8008510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008514:	481d      	ldr	r0, [pc, #116]	@ (800858c <OS_InitTCBList+0x8c>)
 8008516:	f000 f841 	bl	800859c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
 800851e:	e019      	b.n	8008554 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	3301      	adds	r3, #1
 8008524:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8008526:	7bfb      	ldrb	r3, [r7, #15]
 8008528:	225c      	movs	r2, #92	@ 0x5c
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	4a16      	ldr	r2, [pc, #88]	@ (8008588 <OS_InitTCBList+0x88>)
 8008530:	4413      	add	r3, r2
 8008532:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	225c      	movs	r2, #92	@ 0x5c
 8008538:	fb02 f303 	mul.w	r3, r2, r3
 800853c:	4a12      	ldr	r2, [pc, #72]	@ (8008588 <OS_InitTCBList+0x88>)
 800853e:	4413      	add	r3, r2
 8008540:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4a11      	ldr	r2, [pc, #68]	@ (8008590 <OS_InitTCBList+0x90>)
 800854c:	655a      	str	r2, [r3, #84]	@ 0x54
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	3301      	adds	r3, #1
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b14      	cmp	r3, #20
 8008558:	d9e2      	bls.n	8008520 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	225c      	movs	r2, #92	@ 0x5c
 800855e:	fb02 f303 	mul.w	r3, r2, r3
 8008562:	4a09      	ldr	r2, [pc, #36]	@ (8008588 <OS_InitTCBList+0x88>)
 8008564:	4413      	add	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2200      	movs	r2, #0
 800856c:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4a07      	ldr	r2, [pc, #28]	@ (8008590 <OS_InitTCBList+0x90>)
 8008572:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8008574:	4b07      	ldr	r3, [pc, #28]	@ (8008594 <OS_InitTCBList+0x94>)
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 800857a:	4b07      	ldr	r3, [pc, #28]	@ (8008598 <OS_InitTCBList+0x98>)
 800857c:	4a02      	ldr	r2, [pc, #8]	@ (8008588 <OS_InitTCBList+0x88>)
 800857e:	601a      	str	r2, [r3, #0]
}
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20006de8 	.word	0x20006de8
 800858c:	20006ce8 	.word	0x20006ce8
 8008590:	0800d0c0 	.word	0x0800d0c0
 8008594:	20006ce4 	.word	0x20006ce4
 8008598:	20006cdc 	.word	0x20006cdc

0800859c <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80085a8:	e007      	b.n	80085ba <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
        size--;
 80085b4:	887b      	ldrh	r3, [r7, #2]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 80085ba:	887b      	ldrh	r3, [r7, #2]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f4      	bne.n	80085aa <OS_MemClr+0xe>
    }
}
 80085c0:	bf00      	nop
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
	...

080085d0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80085d6:	2300      	movs	r3, #0
 80085d8:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 80085da:	2040      	movs	r0, #64	@ 0x40
 80085dc:	f7f7 fe07 	bl	80001ee <OS_CPU_SR_Save>
 80085e0:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 80085e2:	4b15      	ldr	r3, [pc, #84]	@ (8008638 <OS_Sched+0x68>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d11f      	bne.n	800862a <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 80085ea:	4b14      	ldr	r3, [pc, #80]	@ (800863c <OS_Sched+0x6c>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d11b      	bne.n	800862a <OS_Sched+0x5a>
            OS_SchedNew();
 80085f2:	f000 f82f 	bl	8008654 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 80085f6:	4b12      	ldr	r3, [pc, #72]	@ (8008640 <OS_Sched+0x70>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	4b11      	ldr	r3, [pc, #68]	@ (8008644 <OS_Sched+0x74>)
 80085fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008602:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <OS_Sched+0x78>)
 8008604:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8008606:	4b0e      	ldr	r3, [pc, #56]	@ (8008640 <OS_Sched+0x70>)
 8008608:	781a      	ldrb	r2, [r3, #0]
 800860a:	4b10      	ldr	r3, [pc, #64]	@ (800864c <OS_Sched+0x7c>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d00b      	beq.n	800862a <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8008612:	4b0d      	ldr	r3, [pc, #52]	@ (8008648 <OS_Sched+0x78>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008618:	3201      	adds	r2, #1
 800861a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 800861c:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <OS_Sched+0x80>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	4a0b      	ldr	r2, [pc, #44]	@ (8008650 <OS_Sched+0x80>)
 8008624:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 8008626:	f7f7 fe39 	bl	800029c <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7f7 fded 	bl	800020a <OS_CPU_SR_Restore>
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20006ac0 	.word	0x20006ac0
 800863c:	20006ac1 	.word	0x20006ac1
 8008640:	20006ac3 	.word	0x20006ac3
 8008644:	20006ce8 	.word	0x20006ce8
 8008648:	20006ce0 	.word	0x20006ce0
 800864c:	20006ac2 	.word	0x20006ac2
 8008650:	20006764 	.word	0x20006764

08008654 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 800865a:	4b0c      	ldr	r3, [pc, #48]	@ (800868c <OS_SchedNew+0x38>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4b0b      	ldr	r3, [pc, #44]	@ (8008690 <OS_SchedNew+0x3c>)
 8008662:	5c9b      	ldrb	r3, [r3, r2]
 8008664:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8008666:	79fb      	ldrb	r3, [r7, #7]
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	b2da      	uxtb	r2, r3
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	4909      	ldr	r1, [pc, #36]	@ (8008694 <OS_SchedNew+0x40>)
 8008670:	5ccb      	ldrb	r3, [r1, r3]
 8008672:	4619      	mov	r1, r3
 8008674:	4b06      	ldr	r3, [pc, #24]	@ (8008690 <OS_SchedNew+0x3c>)
 8008676:	5c5b      	ldrb	r3, [r3, r1]
 8008678:	4413      	add	r3, r2
 800867a:	b2da      	uxtb	r2, r3
 800867c:	4b06      	ldr	r3, [pc, #24]	@ (8008698 <OS_SchedNew+0x44>)
 800867e:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	20006ac4 	.word	0x20006ac4
 8008690:	0800d1f0 	.word	0x0800d1f0
 8008694:	20006ac8 	.word	0x20006ac8
 8008698:	20006ac3 	.word	0x20006ac3

0800869c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]
#endif

    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 80086a8:	2040      	movs	r0, #64	@ 0x40
 80086aa:	f7f7 fda0 	bl	80001ee <OS_CPU_SR_Save>
 80086ae:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 80086b0:	4b05      	ldr	r3, [pc, #20]	@ (80086c8 <OS_TaskIdle+0x2c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3301      	adds	r3, #1
 80086b6:	4a04      	ldr	r2, [pc, #16]	@ (80086c8 <OS_TaskIdle+0x2c>)
 80086b8:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f7f7 fda5 	bl	800020a <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 80086c0:	f7fe ffdb 	bl	800767a <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 80086c4:	bf00      	nop
 80086c6:	e7ef      	b.n	80086a8 <OS_TaskIdle+0xc>
 80086c8:	20006ad4 	.word	0x20006ad4

080086cc <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 80086d8:	e002      	b.n	80086e0 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 80086da:	20c8      	movs	r0, #200	@ 0xc8
 80086dc:	f001 fb8e 	bl	8009dfc <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 80086e0:	4b30      	ldr	r3, [pc, #192]	@ (80087a4 <OS_TaskStat+0xd8>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0f8      	beq.n	80086da <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 80086e8:	4b2f      	ldr	r3, [pc, #188]	@ (80087a8 <OS_TaskStat+0xdc>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2f      	ldr	r2, [pc, #188]	@ (80087ac <OS_TaskStat+0xe0>)
 80086ee:	fba2 2303 	umull	r2, r3, r2, r3
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	4a2c      	ldr	r2, [pc, #176]	@ (80087a8 <OS_TaskStat+0xdc>)
 80086f6:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 80086f8:	4b2b      	ldr	r3, [pc, #172]	@ (80087a8 <OS_TaskStat+0xdc>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d105      	bne.n	800870c <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 8008700:	4b2b      	ldr	r3, [pc, #172]	@ (80087b0 <OS_TaskStat+0xe4>)
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8008706:	20ff      	movs	r0, #255	@ 0xff
 8008708:	f001 fac2 	bl	8009c90 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 800870c:	2040      	movs	r0, #64	@ 0x40
 800870e:	f7f7 fd6e 	bl	80001ee <OS_CPU_SR_Save>
 8008712:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8008714:	4b24      	ldr	r3, [pc, #144]	@ (80087a8 <OS_TaskStat+0xdc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2264      	movs	r2, #100	@ 0x64
 800871a:	fb02 f303 	mul.w	r3, r2, r3
 800871e:	4a25      	ldr	r2, [pc, #148]	@ (80087b4 <OS_TaskStat+0xe8>)
 8008720:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7f7 fd71 	bl	800020a <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8008728:	2001      	movs	r0, #1
 800872a:	f001 fb67 	bl	8009dfc <OSTimeDly>

        OS_ENTER_CRITICAL();
 800872e:	2040      	movs	r0, #64	@ 0x40
 8008730:	f7f7 fd5d 	bl	80001ee <OS_CPU_SR_Save>
 8008734:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 8008736:	4b1f      	ldr	r3, [pc, #124]	@ (80087b4 <OS_TaskStat+0xe8>)
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f7f7 fd64 	bl	800020a <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8008742:	2064      	movs	r0, #100	@ 0x64
 8008744:	f001 fb5a 	bl	8009dfc <OSTimeDly>

        OS_ENTER_CRITICAL();
 8008748:	2040      	movs	r0, #64	@ 0x40
 800874a:	f7f7 fd50 	bl	80001ee <OS_CPU_SR_Save>
 800874e:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 8008750:	4b18      	ldr	r3, [pc, #96]	@ (80087b4 <OS_TaskStat+0xe8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a18      	ldr	r2, [pc, #96]	@ (80087b8 <OS_TaskStat+0xec>)
 8008756:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f7f7 fd56 	bl	800020a <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 800875e:	4b16      	ldr	r3, [pc, #88]	@ (80087b8 <OS_TaskStat+0xec>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b11      	ldr	r3, [pc, #68]	@ (80087a8 <OS_TaskStat+0xdc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	fbb2 f3f3 	udiv	r3, r2, r3
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8008770:	b2db      	uxtb	r3, r3
 8008772:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 8008774:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008778:	2b00      	cmp	r3, #0
 800877a:	db03      	blt.n	8008784 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 800877c:	7afa      	ldrb	r2, [r7, #11]
 800877e:	4b0c      	ldr	r3, [pc, #48]	@ (80087b0 <OS_TaskStat+0xe4>)
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	e00a      	b.n	800879a <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 8008784:	4b0a      	ldr	r3, [pc, #40]	@ (80087b0 <OS_TaskStat+0xe4>)
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 800878a:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <OS_TaskStat+0xec>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a07      	ldr	r2, [pc, #28]	@ (80087ac <OS_TaskStat+0xe0>)
 8008790:	fba2 2303 	umull	r2, r3, r2, r3
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	4a04      	ldr	r2, [pc, #16]	@ (80087a8 <OS_TaskStat+0xdc>)
 8008798:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 800879a:	f7fe ff7f 	bl	800769c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800879e:	f000 f80d 	bl	80087bc <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 80087a2:	e7c1      	b.n	8008728 <OS_TaskStat+0x5c>
 80087a4:	200068bc 	.word	0x200068bc
 80087a8:	200068b4 	.word	0x200068b4
 80087ac:	51eb851f 	.word	0x51eb851f
 80087b0:	200068b0 	.word	0x200068b0
 80087b4:	20006ad4 	.word	0x20006ad4
 80087b8:	200068b8 	.word	0x200068b8

080087bc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
 80087c6:	e023      	b.n	8008810 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 80087c8:	463a      	mov	r2, r7
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	4611      	mov	r1, r2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 f9f0 	bl	8009bb4 <OSTaskStkChk>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d115      	bne.n	800880a <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4a0f      	ldr	r2, [pc, #60]	@ (8008820 <OS_TaskStatStkChk+0x64>)
 80087e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e6:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00d      	beq.n	800880a <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d00a      	beq.n	800880a <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	441a      	add	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	64da      	str	r2, [r3, #76]	@ 0x4c
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	651a      	str	r2, [r3, #80]	@ 0x50
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	3301      	adds	r3, #1
 800880e:	73fb      	strb	r3, [r7, #15]
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	2b3f      	cmp	r3, #63	@ 0x3f
 8008814:	d9d8      	bls.n	80087c8 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20006ce8 	.word	0x20006ce8

08008824 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	461a      	mov	r2, r3
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
 8008834:	4613      	mov	r3, r2
 8008836:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8008838:	2300      	movs	r3, #0
 800883a:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 800883c:	2040      	movs	r0, #64	@ 0x40
 800883e:	f7f7 fcd6 	bl	80001ee <OS_CPU_SR_Save>
 8008842:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8008844:	4b6b      	ldr	r3, [pc, #428]	@ (80089f4 <OS_TCBInit+0x1d0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80c9 	beq.w	80089e4 <OS_TCBInit+0x1c0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	4a67      	ldr	r2, [pc, #412]	@ (80089f4 <OS_TCBInit+0x1d0>)
 8008858:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 800885a:	69b8      	ldr	r0, [r7, #24]
 800885c:	f7f7 fcd5 	bl	800020a <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	7bfa      	ldrb	r2, [r7, #15]
 800886a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2200      	movs	r2, #0
 8008882:	635a      	str	r2, [r3, #52]	@ 0x34

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008888:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800888e:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800889a:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	89ba      	ldrh	r2, [r7, #12]
 80088a0:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	08db      	lsrs	r3, r3, #3
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ca:	461a      	mov	r2, r3
 80088cc:	2301      	movs	r3, #1
 80088ce:	4093      	lsls	r3, r2
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80088de:	461a      	mov	r2, r3
 80088e0:	2301      	movs	r3, #1
 80088e2:	4093      	lsls	r3, r2
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	621a      	str	r2, [r3, #32]
        ptcb->OSTCBEventMultiRdy = (OS_EVENT  *)0;         /* No events readied for Multipend          */
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2200      	movs	r2, #0
 80088fc:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2200      	movs	r2, #0
 8008902:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2200      	movs	r2, #0
 8008908:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2200      	movs	r2, #0
 800890e:	641a      	str	r2, [r3, #64]	@ 0x40
        ptcb->OSTCBCyclesStart   = 0uL;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	2200      	movs	r2, #0
 8008914:	649a      	str	r2, [r3, #72]	@ 0x48
        ptcb->OSTCBCyclesTot     = 0uL;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2200      	movs	r2, #0
 800891a:	645a      	str	r2, [r3, #68]	@ 0x44
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2200      	movs	r2, #0
 8008920:	64da      	str	r2, [r3, #76]	@ 0x4c
        ptcb->OSTCBStkUsed       = 0uL;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2200      	movs	r2, #0
 8008926:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4a33      	ldr	r2, [pc, #204]	@ (80089f8 <OS_TCBInit+0x1d4>)
 800892c:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 800892e:	2300      	movs	r3, #0
 8008930:	77fb      	strb	r3, [r7, #31]
 8008932:	e008      	b.n	8008946 <OS_TCBInit+0x122>
            ptcb->OSTCBRegTbl[i] = 0u;
 8008934:	7ffa      	ldrb	r2, [r7, #31]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	3216      	adds	r2, #22
 800893a:	2100      	movs	r1, #0
 800893c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8008940:	7ffb      	ldrb	r3, [r7, #31]
 8008942:	3301      	adds	r3, #1
 8008944:	77fb      	strb	r3, [r7, #31]
 8008946:	7ffb      	ldrb	r3, [r7, #31]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0f3      	beq.n	8008934 <OS_TCBInit+0x110>
        }
#endif

        OSTCBInitHook(ptcb);
 800894c:	6978      	ldr	r0, [r7, #20]
 800894e:	f7ff f851 	bl	80079f4 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8008952:	2040      	movs	r0, #64	@ 0x40
 8008954:	f7f7 fc4b 	bl	80001ee <OS_CPU_SR_Save>
 8008958:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	4927      	ldr	r1, [pc, #156]	@ (80089fc <OS_TCBInit+0x1d8>)
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8008964:	69b8      	ldr	r0, [r7, #24]
 8008966:	f7f7 fc50 	bl	800020a <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800896a:	6978      	ldr	r0, [r7, #20]
 800896c:	f7fe fe6f 	bl	800764e <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 8008970:	2040      	movs	r0, #64	@ 0x40
 8008972:	f7f7 fc3c 	bl	80001ee <OS_CPU_SR_Save>
 8008976:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 8008978:	4b21      	ldr	r3, [pc, #132]	@ (8008a00 <OS_TCBInit+0x1dc>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2200      	movs	r2, #0
 8008984:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8008986:	4b1e      	ldr	r3, [pc, #120]	@ (8008a00 <OS_TCBInit+0x1dc>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <OS_TCBInit+0x172>
            OSTCBList->OSTCBPrev = ptcb;
 800898e:	4b1c      	ldr	r3, [pc, #112]	@ (8008a00 <OS_TCBInit+0x1dc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8008996:	4a1a      	ldr	r2, [pc, #104]	@ (8008a00 <OS_TCBInit+0x1dc>)
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80089a2:	4b18      	ldr	r3, [pc, #96]	@ (8008a04 <OS_TCBInit+0x1e0>)
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b16      	ldr	r3, [pc, #88]	@ (8008a04 <OS_TCBInit+0x1e0>)
 80089ac:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089b4:	461a      	mov	r2, r3
 80089b6:	4b14      	ldr	r3, [pc, #80]	@ (8008a08 <OS_TCBInit+0x1e4>)
 80089b8:	5c9a      	ldrb	r2, [r3, r2]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c0:	6979      	ldr	r1, [r7, #20]
 80089c2:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80089c6:	4313      	orrs	r3, r2
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008a08 <OS_TCBInit+0x1e4>)
 80089cc:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 80089ce:	4b0f      	ldr	r3, [pc, #60]	@ (8008a0c <OS_TCBInit+0x1e8>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	3301      	adds	r3, #1
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <OS_TCBInit+0x1e8>)
 80089d8:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 80089da:	69b8      	ldr	r0, [r7, #24]
 80089dc:	f7f7 fc15 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 80089e0:	2300      	movs	r3, #0
 80089e2:	e003      	b.n	80089ec <OS_TCBInit+0x1c8>
    }
    OS_EXIT_CRITICAL();
 80089e4:	69b8      	ldr	r0, [r7, #24]
 80089e6:	f7f7 fc10 	bl	800020a <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 80089ea:	2342      	movs	r3, #66	@ 0x42
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3720      	adds	r7, #32
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	20006cdc 	.word	0x20006cdc
 80089f8:	0800d0c0 	.word	0x0800d0c0
 80089fc:	20006ce8 	.word	0x20006ce8
 8008a00:	20006ce4 	.word	0x20006ce4
 8008a04:	20006ac4 	.word	0x20006ac4
 8008a08:	20006ac8 	.word	0x20006ac8
 8008a0c:	20006ad1 	.word	0x20006ad1

08008a10 <OSFlagCreate>:
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS  flags,
                            INT8U    *perr)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	6039      	str	r1, [r7, #0]
 8008a1a:	80fb      	strh	r3, [r7, #6]
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3u                        /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0u;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
        *perr = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
        return ((OS_FLAG_GRP *)0);
    }
#endif

    if (OSIntNesting > 0u) {                        /* See if called from ISR ...                      */
 8008a20:	4b1a      	ldr	r3, [pc, #104]	@ (8008a8c <OSFlagCreate+0x7c>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <OSFlagCreate+0x22>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2210      	movs	r2, #16
 8008a2c:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAG_GRP *)0);
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e028      	b.n	8008a84 <OSFlagCreate+0x74>
    }
    OS_ENTER_CRITICAL();
 8008a32:	2040      	movs	r0, #64	@ 0x40
 8008a34:	f7f7 fbdb 	bl	80001ee <OS_CPU_SR_Save>
 8008a38:	60f8      	str	r0, [r7, #12]
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 8008a3a:	4b15      	ldr	r3, [pc, #84]	@ (8008a90 <OSFlagCreate+0x80>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60bb      	str	r3, [r7, #8]
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d017      	beq.n	8008a76 <OSFlagCreate+0x66>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 8008a46:	4b12      	ldr	r3, [pc, #72]	@ (8008a90 <OSFlagCreate+0x80>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	4a10      	ldr	r2, [pc, #64]	@ (8008a90 <OSFlagCreate+0x80>)
 8008a4e:	6013      	str	r3, [r2, #0]
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	2205      	movs	r2, #5
 8008a54:	701a      	strb	r2, [r3, #0]
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	88fa      	ldrh	r2, [r7, #6]
 8008a5a:	811a      	strh	r2, [r3, #8]
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp->OSFlagName     = (INT8U *)(void *)"?";
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	4a0b      	ldr	r2, [pc, #44]	@ (8008a94 <OSFlagCreate+0x84>)
 8008a66:	60da      	str	r2, [r3, #12]
#endif
        OS_TRACE_FLAG_CREATE(pgrp, pgrp->OSFlagName);
        OS_EXIT_CRITICAL();
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7f7 fbce 	bl	800020a <OS_CPU_SR_Restore>
        *perr                = OS_ERR_NONE;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2200      	movs	r2, #0
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	e005      	b.n	8008a82 <OSFlagCreate+0x72>
    } else {
        OS_EXIT_CRITICAL();
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7f7 fbc7 	bl	800020a <OS_CPU_SR_Restore>
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2272      	movs	r2, #114	@ 0x72
 8008a80:	701a      	strb	r2, [r3, #0]
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 8008a82:	68bb      	ldr	r3, [r7, #8]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20006ac0 	.word	0x20006ac0
 8008a90:	200068ac 	.word	0x200068ac
 8008a94:	0800d0e4 	.word	0x0800d0e4

08008a98 <OSFlagPend>:
OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         wait_type,
                      INT32U        timeout,
                      INT8U        *perr)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b090      	sub	sp, #64	@ 0x40
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	607b      	str	r3, [r7, #4]
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	817b      	strh	r3, [r7, #10]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	727b      	strb	r3, [r7, #9]
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0u;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d104      	bne.n	8008abe <OSFlagPend+0x26>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8008ab4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ab6:	226e      	movs	r2, #110	@ 0x6e
 8008ab8:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAGS)0);
 8008aba:	2300      	movs	r3, #0
 8008abc:	e176      	b.n	8008dac <OSFlagPend+0x314>
    }
#endif

    OS_TRACE_FLAG_PEND_ENTER(pgrp, flags, timeout, wait_type);

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8008abe:	4b9f      	ldr	r3, [pc, #636]	@ (8008d3c <OSFlagPend+0x2a4>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <OSFlagPend+0x38>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 8008ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac8:	2202      	movs	r2, #2
 8008aca:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 8008acc:	2300      	movs	r3, #0
 8008ace:	e16d      	b.n	8008dac <OSFlagPend+0x314>
    }
    if (OSLockNesting > 0u) {                              /* See if called with scheduler locked ...  */
 8008ad0:	4b9b      	ldr	r3, [pc, #620]	@ (8008d40 <OSFlagPend+0x2a8>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <OSFlagPend+0x4a>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 8008ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ada:	220d      	movs	r2, #13
 8008adc:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e164      	b.n	8008dac <OSFlagPend+0x314>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b05      	cmp	r3, #5
 8008ae8:	d004      	beq.n	8008af4 <OSFlagPend+0x5c>
        *perr = OS_ERR_EVENT_TYPE;
 8008aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aec:	2201      	movs	r2, #1
 8008aee:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return ((OS_FLAGS)0);
 8008af0:	2300      	movs	r3, #0
 8008af2:	e15b      	b.n	8008dac <OSFlagPend+0x314>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8008af4:	7a7b      	ldrb	r3, [r7, #9]
 8008af6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 8008afe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d007      	beq.n	8008b16 <OSFlagPend+0x7e>
        wait_type &= (INT8U)~(INT8U)OS_FLAG_CONSUME;
 8008b06:	7a7b      	ldrb	r3, [r7, #9]
 8008b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b0c:	727b      	strb	r3, [r7, #9]
        consume    = OS_TRUE;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008b14:	e002      	b.n	8008b1c <OSFlagPend+0x84>
    } else {
        consume    = OS_FALSE;
 8008b16:	2300      	movs	r3, #0
 8008b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    OS_ENTER_CRITICAL();
 8008b1c:	2040      	movs	r0, #64	@ 0x40
 8008b1e:	f7f7 fb66 	bl	80001ee <OS_CPU_SR_Save>
 8008b22:	6338      	str	r0, [r7, #48]	@ 0x30
    switch (wait_type) {
 8008b24:	7a7b      	ldrb	r3, [r7, #9]
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	f200 80ca 	bhi.w	8008cc0 <OSFlagPend+0x228>
 8008b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b34 <OSFlagPend+0x9c>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008c03 	.word	0x08008c03
 8008b38:	08008c63 	.word	0x08008c63
 8008b3c:	08008b45 	.word	0x08008b45
 8008b40:	08008ba5 	.word	0x08008ba5
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	891a      	ldrh	r2, [r3, #8]
 8008b48:	897b      	ldrh	r3, [r7, #10]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8008b4e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008b50:	897b      	ldrh	r3, [r7, #10]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d118      	bne.n	8008b88 <OSFlagPend+0xf0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8008b56:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d108      	bne.n	8008b70 <OSFlagPend+0xd8>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;   /* Clear ONLY the flags we wanted    */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	891a      	ldrh	r2, [r3, #8]
 8008b62:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008b64:	43db      	mvns	r3, r3
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	4013      	ands	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8008b70:	4b74      	ldr	r3, [pc, #464]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008b76:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8008b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b7a:	f7f7 fb46 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8008b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b80:	2200      	movs	r2, #0
 8008b82:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8008b84:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008b86:	e111      	b.n	8008dac <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8008b88:	7a78      	ldrb	r0, [r7, #9]
 8008b8a:	897a      	ldrh	r2, [r7, #10]
 8008b8c:	f107 0114 	add.w	r1, r7, #20
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	4603      	mov	r3, r0
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f9fe 	bl	8008f98 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8008b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b9e:	f7f7 fb34 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8008ba2:	e097      	b.n	8008cd4 <OSFlagPend+0x23c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	891a      	ldrh	r2, [r3, #8]
 8008ba8:	897b      	ldrh	r3, [r7, #10]
 8008baa:	4013      	ands	r3, r2
 8008bac:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8008bae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d018      	beq.n	8008be6 <OSFlagPend+0x14e>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8008bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d108      	bne.n	8008bce <OSFlagPend+0x136>
                     pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;    /* Clear ONLY the flags that we got */
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	891a      	ldrh	r2, [r3, #8]
 8008bc0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8008bce:	4b5d      	ldr	r3, [pc, #372]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008bd4:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8008bd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bd8:	f7f7 fb17 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8008bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bde:	2200      	movs	r2, #0
 8008be0:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8008be2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008be4:	e0e2      	b.n	8008dac <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8008be6:	7a78      	ldrb	r0, [r7, #9]
 8008be8:	897a      	ldrh	r2, [r7, #10]
 8008bea:	f107 0114 	add.w	r1, r7, #20
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f9cf 	bl	8008f98 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8008bfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008bfc:	f7f7 fb05 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8008c00:	e068      	b.n	8008cd4 <OSFlagPend+0x23c>

#if OS_FLAG_WAIT_CLR_EN > 0u
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;    /* Extract only the bits we want     */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	891b      	ldrh	r3, [r3, #8]
 8008c06:	43db      	mvns	r3, r3
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	897b      	ldrh	r3, [r7, #10]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8008c10:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008c12:	897b      	ldrh	r3, [r7, #10]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d116      	bne.n	8008c46 <OSFlagPend+0x1ae>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8008c18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d106      	bne.n	8008c2e <OSFlagPend+0x196>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	891a      	ldrh	r2, [r3, #8]
 8008c24:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008c26:	4313      	orrs	r3, r2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8008c2e:	4b45      	ldr	r3, [pc, #276]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008c34:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8008c36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c38:	f7f7 fae7 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8008c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8008c42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008c44:	e0b2      	b.n	8008dac <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8008c46:	7a78      	ldrb	r0, [r7, #9]
 8008c48:	897a      	ldrh	r2, [r7, #10]
 8008c4a:	f107 0114 	add.w	r1, r7, #20
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	4603      	mov	r3, r0
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f000 f99f 	bl	8008f98 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8008c5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c5c:	f7f7 fad5 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8008c60:	e038      	b.n	8008cd4 <OSFlagPend+0x23c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & flags;   /* Extract only the bits we want      */
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	891b      	ldrh	r3, [r3, #8]
 8008c66:	43db      	mvns	r3, r3
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	897b      	ldrh	r3, [r7, #10]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8008c70:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d016      	beq.n	8008ca4 <OSFlagPend+0x20c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8008c76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d106      	bne.n	8008c8c <OSFlagPend+0x1f4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	891a      	ldrh	r2, [r3, #8]
 8008c82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008c84:	4313      	orrs	r3, r2
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	811a      	strh	r2, [r3, #8]
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8008c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8008c92:	861a      	strh	r2, [r3, #48]	@ 0x30
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
 8008c94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c96:	f7f7 fab8 	bl	800020a <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
 8008c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return (flags_rdy);
 8008ca0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ca2:	e083      	b.n	8008dac <OSFlagPend+0x314>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8008ca4:	7a78      	ldrb	r0, [r7, #9]
 8008ca6:	897a      	ldrh	r2, [r7, #10]
 8008ca8:	f107 0114 	add.w	r1, r7, #20
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f000 f970 	bl	8008f98 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
 8008cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cba:	f7f7 faa6 	bl	800020a <OS_CPU_SR_Restore>
             }
             break;
 8008cbe:	e009      	b.n	8008cd4 <OSFlagPend+0x23c>
#endif

        default:
             OS_EXIT_CRITICAL();
 8008cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cc2:	f7f7 faa2 	bl	800020a <OS_CPU_SR_Restore>
             flags_rdy = (OS_FLAGS)0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 8008cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ccc:	226f      	movs	r2, #111	@ 0x6f
 8008cce:	701a      	strb	r2, [r3, #0]
             OS_TRACE_FLAG_PEND_EXIT(*perr);
             return (flags_rdy);
 8008cd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008cd2:	e06b      	b.n	8008dac <OSFlagPend+0x314>
    }

    OS_Sched();                                            /* Find next HPT ready to run               */
 8008cd4:	f7ff fc7c 	bl	80085d0 <OS_Sched>
    OS_ENTER_CRITICAL();
 8008cd8:	2040      	movs	r0, #64	@ 0x40
 8008cda:	f7f7 fa88 	bl	80001ee <OS_CPU_SR_Save>
 8008cde:	6338      	str	r0, [r7, #48]	@ 0x30
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 8008ce0:	4b18      	ldr	r3, [pc, #96]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d02d      	beq.n	8008d48 <OSFlagPend+0x2b0>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 8008cec:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8008cf8:	4b12      	ldr	r3, [pc, #72]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        OS_FlagUnlink(&node);
 8008d02:	f107 0314 	add.w	r3, r7, #20
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fa4a 	bl	80091a0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d44 <OSFlagPend+0x2ac>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        OS_EXIT_CRITICAL();
 8008d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d18:	f7f7 fa77 	bl	800020a <OS_CPU_SR_Restore>
        flags_rdy                = (OS_FLAGS)0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        switch (pend_stat) {
 8008d20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d103      	bne.n	8008d30 <OSFlagPend+0x298>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                /* Indicate that we aborted   waiting       */
 8008d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d2a:	220e      	movs	r2, #14
 8008d2c:	701a      	strb	r2, [r3, #0]
                 break;
 8008d2e:	e003      	b.n	8008d38 <OSFlagPend+0x2a0>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                   /* Indicate that we timed-out waiting       */
 8008d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d32:	220a      	movs	r2, #10
 8008d34:	701a      	strb	r2, [r3, #0]
                 break;
 8008d36:	bf00      	nop
        }
        OS_TRACE_FLAG_PEND_EXIT(*perr);
        return (flags_rdy);
 8008d38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008d3a:	e037      	b.n	8008dac <OSFlagPend+0x314>
 8008d3c:	20006ac0 	.word	0x20006ac0
 8008d40:	20006ac1 	.word	0x20006ac1
 8008d44:	20006cd8 	.word	0x20006cd8
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 8008d48:	4b1a      	ldr	r3, [pc, #104]	@ (8008db4 <OSFlagPend+0x31c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8008d4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8008d50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d122      	bne.n	8008d9e <OSFlagPend+0x306>
        switch (wait_type) {
 8008d58:	7a7b      	ldrb	r3, [r7, #9]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	dc02      	bgt.n	8008d64 <OSFlagPend+0x2cc>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	da0d      	bge.n	8008d7e <OSFlagPend+0x2e6>
 8008d62:	e014      	b.n	8008d8e <OSFlagPend+0x2f6>
 8008d64:	3b02      	subs	r3, #2
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d811      	bhi.n	8008d8e <OSFlagPend+0x2f6>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= (OS_FLAGS)~flags_rdy;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	891a      	ldrh	r2, [r3, #8]
 8008d6e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008d70:	43db      	mvns	r3, r3
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	4013      	ands	r3, r2
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	811a      	strh	r2, [r3, #8]
                 break;
 8008d7c:	e00f      	b.n	8008d9e <OSFlagPend+0x306>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	891a      	ldrh	r2, [r3, #8]
 8008d82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008d84:	4313      	orrs	r3, r2
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	811a      	strh	r2, [r3, #8]
                 break;
 8008d8c:	e007      	b.n	8008d9e <OSFlagPend+0x306>
#endif
            default:
                 OS_EXIT_CRITICAL();
 8008d8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d90:	f7f7 fa3b 	bl	800020a <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8008d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d96:	226f      	movs	r2, #111	@ 0x6f
 8008d98:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_PEND_EXIT(*perr);
                 return ((OS_FLAGS)0);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e006      	b.n	8008dac <OSFlagPend+0x314>
        }
    }
    OS_EXIT_CRITICAL();
 8008d9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008da0:	f7f7 fa33 	bl	800020a <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 8008da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
    OS_TRACE_FLAG_PEND_EXIT(*perr);
    return (flags_rdy);
 8008daa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3738      	adds	r7, #56	@ 0x38
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20006cd8 	.word	0x20006cd8

08008db8 <OSFlagPost>:
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *pgrp,
                      OS_FLAGS      flags,
                      INT8U         opt,
                      INT8U        *perr)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	@ 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	607b      	str	r3, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	817b      	strh	r3, [r7, #10]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	727b      	strb	r3, [r7, #9]
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0u;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61fb      	str	r3, [r7, #28]
        return ((OS_FLAGS)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <OSFlagPost+0x26>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	226e      	movs	r2, #110	@ 0x6e
 8008dd8:	701a      	strb	r2, [r3, #0]
        return ((OS_FLAGS)0);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e0d7      	b.n	8008f8e <OSFlagPost+0x1d6>
    }
#endif

    OS_TRACE_FLAG_POST_ENTER(pgrp, flags, opt);

    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d004      	beq.n	8008df0 <OSFlagPost+0x38>
        *perr = OS_ERR_EVENT_TYPE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
        OS_TRACE_FLAG_POST_EXIT(*perr);
        return ((OS_FLAGS)0);
 8008dec:	2300      	movs	r3, #0
 8008dee:	e0ce      	b.n	8008f8e <OSFlagPost+0x1d6>
    }

    OS_ENTER_CRITICAL();
 8008df0:	2040      	movs	r0, #64	@ 0x40
 8008df2:	f7f7 f9fc 	bl	80001ee <OS_CPU_SR_Save>
 8008df6:	61f8      	str	r0, [r7, #28]
    switch (opt) {
 8008df8:	7a7b      	ldrb	r3, [r7, #9]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <OSFlagPost+0x4c>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d00a      	beq.n	8008e18 <OSFlagPost+0x60>
 8008e02:	e011      	b.n	8008e28 <OSFlagPost+0x70>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= (OS_FLAGS)~flags;  /* Clear the flags specified in the group         */
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	891a      	ldrh	r2, [r3, #8]
 8008e08:	897b      	ldrh	r3, [r7, #10]
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	4013      	ands	r3, r2
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	811a      	strh	r2, [r3, #8]
             break;
 8008e16:	e00f      	b.n	8008e38 <OSFlagPost+0x80>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	891a      	ldrh	r2, [r3, #8]
 8008e1c:	897b      	ldrh	r3, [r7, #10]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	811a      	strh	r2, [r3, #8]
             break;
 8008e26:	e007      	b.n	8008e38 <OSFlagPost+0x80>

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
 8008e28:	69f8      	ldr	r0, [r7, #28]
 8008e2a:	f7f7 f9ee 	bl	800020a <OS_CPU_SR_Restore>
             *perr = OS_ERR_FLAG_INVALID_OPT;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2271      	movs	r2, #113	@ 0x71
 8008e32:	701a      	strb	r2, [r3, #0]
             OS_TRACE_FLAG_POST_EXIT(*perr);
             return ((OS_FLAGS)0);
 8008e34:	2300      	movs	r3, #0
 8008e36:	e0aa      	b.n	8008f8e <OSFlagPost+0x1d6>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	627b      	str	r3, [r7, #36]	@ 0x24
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8008e44:	e088      	b.n	8008f58 <OSFlagPost+0x1a0>
        switch (pnode->OSFlagNodeWaitType) {
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	7c9b      	ldrb	r3, [r3, #18]
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d872      	bhi.n	8008f34 <OSFlagPost+0x17c>
 8008e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e54 <OSFlagPost+0x9c>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008ec9 	.word	0x08008ec9
 8008e58:	08008f01 	.word	0x08008f01
 8008e5c:	08008e65 	.word	0x08008e65
 8008e60:	08008e99 	.word	0x08008e99
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	891a      	ldrh	r2, [r3, #8]
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	8a1b      	ldrh	r3, [r3, #16]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	8a1b      	ldrh	r3, [r3, #16]
 8008e74:	8b3a      	ldrh	r2, [r7, #24]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d164      	bne.n	8008f44 <OSFlagPost+0x18c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8008e7a:	8b3b      	ldrh	r3, [r7, #24]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008e82:	f000 f93f 	bl	8009104 <OS_FlagTaskRdy>
 8008e86:	4603      	mov	r3, r0
 8008e88:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d159      	bne.n	8008f44 <OSFlagPost+0x18c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8008e96:	e055      	b.n	8008f44 <OSFlagPost+0x18c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	891a      	ldrh	r2, [r3, #8]
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9e:	8a1b      	ldrh	r3, [r3, #16]
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
 8008ea4:	8b3b      	ldrh	r3, [r7, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d04e      	beq.n	8008f48 <OSFlagPost+0x190>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8008eaa:	8b3b      	ldrh	r3, [r7, #24]
 8008eac:	2200      	movs	r2, #0
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008eb2:	f000 f927 	bl	8009104 <OS_FlagTaskRdy>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d143      	bne.n	8008f48 <OSFlagPost+0x190>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8008ec6:	e03f      	b.n	8008f48 <OSFlagPost+0x190>

#if OS_FLAG_WAIT_CLR_EN > 0u
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	891b      	ldrh	r3, [r3, #8]
 8008ecc:	43db      	mvns	r3, r3
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	8a1b      	ldrh	r3, [r3, #16]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy == pnode->OSFlagNodeFlags) {   /* Make task RTR, event(s) Rx'd          */
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	8a1b      	ldrh	r3, [r3, #16]
 8008edc:	8b3a      	ldrh	r2, [r7, #24]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d134      	bne.n	8008f4c <OSFlagPost+0x194>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8008ee2:	8b3b      	ldrh	r3, [r7, #24]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008eea:	f000 f90b 	bl	8009104 <OS_FlagTaskRdy>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d129      	bne.n	8008f4c <OSFlagPost+0x194>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8008efe:	e025      	b.n	8008f4c <OSFlagPost+0x194>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	891b      	ldrh	r3, [r3, #8]
 8008f04:	43db      	mvns	r3, r3
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	8a1b      	ldrh	r3, [r3, #16]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	833b      	strh	r3, [r7, #24]
                 if (flags_rdy != (OS_FLAGS)0) {              /* Make task RTR, event(s) Rx'd          */
 8008f10:	8b3b      	ldrh	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d01c      	beq.n	8008f50 <OSFlagPost+0x198>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy, OS_STAT_PEND_OK);
 8008f16:	8b3b      	ldrh	r3, [r7, #24]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f1e:	f000 f8f1 	bl	8009104 <OS_FlagTaskRdy>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]
                     if (rdy == OS_TRUE) {
 8008f26:	7dfb      	ldrb	r3, [r7, #23]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d111      	bne.n	8008f50 <OSFlagPost+0x198>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                     }
                 }
                 break;
 8008f32:	e00d      	b.n	8008f50 <OSFlagPost+0x198>
#endif
            default:
                 OS_EXIT_CRITICAL();
 8008f34:	69f8      	ldr	r0, [r7, #28]
 8008f36:	f7f7 f968 	bl	800020a <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	226f      	movs	r2, #111	@ 0x6f
 8008f3e:	701a      	strb	r2, [r3, #0]
                 OS_TRACE_FLAG_POST_EXIT(*perr);
                 return ((OS_FLAGS)0);
 8008f40:	2300      	movs	r3, #0
 8008f42:	e024      	b.n	8008f8e <OSFlagPost+0x1d6>
                 break;
 8008f44:	bf00      	nop
 8008f46:	e004      	b.n	8008f52 <OSFlagPost+0x19a>
                 break;
 8008f48:	bf00      	nop
 8008f4a:	e002      	b.n	8008f52 <OSFlagPost+0x19a>
                 break;
 8008f4c:	bf00      	nop
 8008f4e:	e000      	b.n	8008f52 <OSFlagPost+0x19a>
                 break;
 8008f50:	bf00      	nop
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 8008f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	627b      	str	r3, [r7, #36]	@ 0x24
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f47f af73 	bne.w	8008e46 <OSFlagPost+0x8e>
    }
    OS_EXIT_CRITICAL();
 8008f60:	69f8      	ldr	r0, [r7, #28]
 8008f62:	f7f7 f952 	bl	800020a <OS_CPU_SR_Restore>
    if (sched == OS_TRUE) {
 8008f66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <OSFlagPost+0x1ba>
        OS_Sched();
 8008f6e:	f7ff fb2f 	bl	80085d0 <OS_Sched>
    }
    OS_ENTER_CRITICAL();
 8008f72:	2040      	movs	r0, #64	@ 0x40
 8008f74:	f7f7 f93b 	bl	80001ee <OS_CPU_SR_Save>
 8008f78:	61f8      	str	r0, [r7, #28]
    flags_cur = pgrp->OSFlagFlags;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	891b      	ldrh	r3, [r3, #8]
 8008f7e:	837b      	strh	r3, [r7, #26]
    OS_EXIT_CRITICAL();
 8008f80:	69f8      	ldr	r0, [r7, #28]
 8008f82:	f7f7 f942 	bl	800020a <OS_CPU_SR_Restore>
    *perr     = OS_ERR_NONE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	701a      	strb	r2, [r3, #0]
    OS_TRACE_FLAG_POST_EXIT(*perr);

    return (flags_cur);
 8008f8c:	8b7b      	ldrh	r3, [r7, #26]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3728      	adds	r7, #40	@ 0x28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop

08008f98 <OS_FlagBlock>:
static  void  OS_FlagBlock (OS_FLAG_GRP  *pgrp,
                            OS_FLAG_NODE *pnode,
                            OS_FLAGS      flags,
                            INT8U         wait_type,
                            INT32U        timeout)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	80fb      	strh	r3, [r7, #6]
 8008faa:	4613      	mov	r3, r2
 8008fac:	717b      	strb	r3, [r7, #5]
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 8008fae:	4b31      	ldr	r3, [pc, #196]	@ (8009074 <OS_FlagBlock+0xdc>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8008fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8009074 <OS_FlagBlock+0xdc>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0220 	orr.w	r2, r2, #32
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 8008fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8009074 <OS_FlagBlock+0xdc>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 8008fce:	4b29      	ldr	r3, [pc, #164]	@ (8009074 <OS_FlagBlock+0xdc>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6a3a      	ldr	r2, [r7, #32]
 8008fd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if OS_TASK_DEL_EN > 0u
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 8008fd6:	4b27      	ldr	r3, [pc, #156]	@ (8009074 <OS_FlagBlock+0xdc>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	821a      	strh	r2, [r3, #16]
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	797a      	ldrb	r2, [r7, #5]
 8008fe8:	749a      	strb	r2, [r3, #18]
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 8008fea:	4b22      	ldr	r3, [pc, #136]	@ (8009074 <OS_FlagBlock+0xdc>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	609a      	str	r2, [r3, #8]
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	601a      	str	r2, [r3, #0]
    pnode->OSFlagNodePrev     = (void *)0;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	605a      	str	r2, [r3, #4]
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	60da      	str	r2, [r3, #12]
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	617b      	str	r3, [r7, #20]
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <OS_FlagBlock+0x80>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	605a      	str	r2, [r3, #4]
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	605a      	str	r2, [r3, #4]

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 800901e:	4b15      	ldr	r3, [pc, #84]	@ (8009074 <OS_FlagBlock+0xdc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009026:	74fb      	strb	r3, [r7, #19]
    OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8009028:	7cfb      	ldrb	r3, [r7, #19]
 800902a:	4a13      	ldr	r2, [pc, #76]	@ (8009078 <OS_FlagBlock+0xe0>)
 800902c:	5cd1      	ldrb	r1, [r2, r3]
 800902e:	4b11      	ldr	r3, [pc, #68]	@ (8009074 <OS_FlagBlock+0xdc>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009036:	43db      	mvns	r3, r3
 8009038:	b2da      	uxtb	r2, r3
 800903a:	7cfb      	ldrb	r3, [r7, #19]
 800903c:	400a      	ands	r2, r1
 800903e:	b2d1      	uxtb	r1, r2
 8009040:	4a0d      	ldr	r2, [pc, #52]	@ (8009078 <OS_FlagBlock+0xe0>)
 8009042:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0x00u) {
 8009044:	7cfb      	ldrb	r3, [r7, #19]
 8009046:	4a0c      	ldr	r2, [pc, #48]	@ (8009078 <OS_FlagBlock+0xe0>)
 8009048:	5cd3      	ldrb	r3, [r2, r3]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <OS_FlagBlock+0xce>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 800904e:	4b09      	ldr	r3, [pc, #36]	@ (8009074 <OS_FlagBlock+0xdc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009056:	43db      	mvns	r3, r3
 8009058:	b2da      	uxtb	r2, r3
 800905a:	4b08      	ldr	r3, [pc, #32]	@ (800907c <OS_FlagBlock+0xe4>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	4013      	ands	r3, r2
 8009060:	b2da      	uxtb	r2, r3
 8009062:	4b06      	ldr	r3, [pc, #24]	@ (800907c <OS_FlagBlock+0xe4>)
 8009064:	701a      	strb	r2, [r3, #0]
    }
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20006cd8 	.word	0x20006cd8
 8009078:	20006ac8 	.word	0x20006ac8
 800907c:	20006ac4 	.word	0x20006ac4

08009080 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8009086:	2150      	movs	r1, #80	@ 0x50
 8009088:	481b      	ldr	r0, [pc, #108]	@ (80090f8 <OS_FlagInit+0x78>)
 800908a:	f7ff fa87 	bl	800859c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 800908e:	2300      	movs	r3, #0
 8009090:	81fb      	strh	r3, [r7, #14]
 8009092:	e018      	b.n	80090c6 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8009094:	89fb      	ldrh	r3, [r7, #14]
 8009096:	3301      	adds	r3, #1
 8009098:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 800909a:	89fb      	ldrh	r3, [r7, #14]
 800909c:	011b      	lsls	r3, r3, #4
 800909e:	4a16      	ldr	r2, [pc, #88]	@ (80090f8 <OS_FlagInit+0x78>)
 80090a0:	4413      	add	r3, r2
 80090a2:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 80090a4:	88fb      	ldrh	r3, [r7, #6]
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	4a13      	ldr	r2, [pc, #76]	@ (80090f8 <OS_FlagInit+0x78>)
 80090aa:	4413      	add	r3, r2
 80090ac:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	4a0f      	ldr	r2, [pc, #60]	@ (80090fc <OS_FlagInit+0x7c>)
 80090be:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80090c0:	89fb      	ldrh	r3, [r7, #14]
 80090c2:	3301      	adds	r3, #1
 80090c4:	81fb      	strh	r3, [r7, #14]
 80090c6:	89fb      	ldrh	r3, [r7, #14]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d9e3      	bls.n	8009094 <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 80090cc:	89fb      	ldrh	r3, [r7, #14]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	4a09      	ldr	r2, [pc, #36]	@ (80090f8 <OS_FlagInit+0x78>)
 80090d2:	4413      	add	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2200      	movs	r2, #0
 80090da:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2200      	movs	r2, #0
 80090e0:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4a05      	ldr	r2, [pc, #20]	@ (80090fc <OS_FlagInit+0x7c>)
 80090e6:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80090e8:	4b05      	ldr	r3, [pc, #20]	@ (8009100 <OS_FlagInit+0x80>)
 80090ea:	4a03      	ldr	r2, [pc, #12]	@ (80090f8 <OS_FlagInit+0x78>)
 80090ec:	601a      	str	r2, [r3, #0]
#endif
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	2000685c 	.word	0x2000685c
 80090fc:	0800d0e4 	.word	0x0800d0e4
 8009100:	200068ac 	.word	0x200068ac

08009104 <OS_FlagTaskRdy>:
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode,
                                 OS_FLAGS      flags_rdy,
                                 INT8U         pend_stat)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	807b      	strh	r3, [r7, #2]
 8009110:	4613      	mov	r3, r2
 8009112:	707b      	strb	r3, [r7, #1]
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBDly       = 0u;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2200      	movs	r2, #0
 800911e:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	887a      	ldrh	r2, [r7, #2]
 8009124:	861a      	strh	r2, [r3, #48]	@ 0x30
    ptcb->OSTCBStat     &= (INT8U)~(INT8U)OS_STAT_FLAG;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800912c:	f023 0320 	bic.w	r3, r3, #32
 8009130:	b2da      	uxtb	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend  = pend_stat;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	787a      	ldrb	r2, [r7, #1]
 800913c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009146:	2b00      	cmp	r3, #0
 8009148:	d11b      	bne.n	8009182 <OS_FlagTaskRdy+0x7e>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 8009150:	4b11      	ldr	r3, [pc, #68]	@ (8009198 <OS_FlagTaskRdy+0x94>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	4313      	orrs	r3, r2
 8009156:	b2da      	uxtb	r2, r3
 8009158:	4b0f      	ldr	r3, [pc, #60]	@ (8009198 <OS_FlagTaskRdy+0x94>)
 800915a:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009162:	461a      	mov	r2, r3
 8009164:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <OS_FlagTaskRdy+0x98>)
 8009166:	5c9a      	ldrb	r2, [r3, r2]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8009174:	4313      	orrs	r3, r2
 8009176:	b2da      	uxtb	r2, r3
 8009178:	4b08      	ldr	r3, [pc, #32]	@ (800919c <OS_FlagTaskRdy+0x98>)
 800917a:	545a      	strb	r2, [r3, r1]
        OS_TRACE_TASK_READY(ptcb);
        sched                   = OS_TRUE;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
 8009180:	e001      	b.n	8009186 <OS_FlagTaskRdy+0x82>
    } else {
        sched                   = OS_FALSE;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]
    }
    OS_FlagUnlink(pnode);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f80a 	bl	80091a0 <OS_FlagUnlink>
    return (sched);
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20006ac4 	.word	0x20006ac4
 800919c:	20006ac8 	.word	0x20006ac8

080091a0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10c      	bne.n	80091d4 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00c      	beq.n	80091e6 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	2200      	movs	r2, #0
 80091d0:	605a      	str	r2, [r3, #4]
 80091d2:	e008      	b.n	80091e6 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2200      	movs	r2, #0
 80091f0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8009206:	2178      	movs	r1, #120	@ 0x78
 8009208:	481a      	ldr	r0, [pc, #104]	@ (8009274 <OS_MemInit+0x74>)
 800920a:	f7ff f9c7 	bl	800859c <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800920e:	2300      	movs	r3, #0
 8009210:	80fb      	strh	r3, [r7, #6]
 8009212:	e017      	b.n	8009244 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	4613      	mov	r3, r2
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	4413      	add	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4a15      	ldr	r2, [pc, #84]	@ (8009274 <OS_MemInit+0x74>)
 8009220:	4413      	add	r3, r2
 8009222:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	4613      	mov	r3, r2
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	4413      	add	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	4a10      	ldr	r2, [pc, #64]	@ (8009274 <OS_MemInit+0x74>)
 8009232:	441a      	add	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	4a0f      	ldr	r2, [pc, #60]	@ (8009278 <OS_MemInit+0x78>)
 800923c:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	3301      	adds	r3, #1
 8009242:	80fb      	strh	r3, [r7, #6]
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	2b03      	cmp	r3, #3
 8009248:	d9e4      	bls.n	8009214 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 800924a:	88fa      	ldrh	r2, [r7, #6]
 800924c:	4613      	mov	r3, r2
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	4413      	add	r3, r2
 8009252:	00db      	lsls	r3, r3, #3
 8009254:	4a07      	ldr	r2, [pc, #28]	@ (8009274 <OS_MemInit+0x74>)
 8009256:	4413      	add	r3, r2
 8009258:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2200      	movs	r2, #0
 800925e:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	4a05      	ldr	r2, [pc, #20]	@ (8009278 <OS_MemInit+0x78>)
 8009264:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8009266:	4b05      	ldr	r3, [pc, #20]	@ (800927c <OS_MemInit+0x7c>)
 8009268:	4a02      	ldr	r2, [pc, #8]	@ (8009274 <OS_MemInit+0x74>)
 800926a:	601a      	str	r2, [r3, #0]
#endif
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	200075d8 	.word	0x200075d8
 8009278:	0800d0e8 	.word	0x0800d0e8
 800927c:	200075d4 	.word	0x200075d4

08009280 <OSQCreate>:
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void    **start,
                      INT16U    size)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	460b      	mov	r3, r1
 800928a:	807b      	strh	r3, [r7, #2]
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800928c:	2300      	movs	r3, #0
 800928e:	613b      	str	r3, [r7, #16]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 8009290:	4b31      	ldr	r3, [pc, #196]	@ (8009358 <OSQCreate+0xd8>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <OSQCreate+0x1c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 8009298:	2300      	movs	r3, #0
 800929a:	e059      	b.n	8009350 <OSQCreate+0xd0>
    }
    OS_ENTER_CRITICAL();
 800929c:	2040      	movs	r0, #64	@ 0x40
 800929e:	f7f6 ffa6 	bl	80001ee <OS_CPU_SR_Save>
 80092a2:	6138      	str	r0, [r7, #16]
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 80092a4:	4b2d      	ldr	r3, [pc, #180]	@ (800935c <OSQCreate+0xdc>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	617b      	str	r3, [r7, #20]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 80092aa:	4b2c      	ldr	r3, [pc, #176]	@ (800935c <OSQCreate+0xdc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d004      	beq.n	80092bc <OSQCreate+0x3c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80092b2:	4b2a      	ldr	r3, [pc, #168]	@ (800935c <OSQCreate+0xdc>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a28      	ldr	r2, [pc, #160]	@ (800935c <OSQCreate+0xdc>)
 80092ba:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 80092bc:	6938      	ldr	r0, [r7, #16]
 80092be:	f7f6 ffa4 	bl	800020a <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d042      	beq.n	800934e <OSQCreate+0xce>
        OS_ENTER_CRITICAL();
 80092c8:	2040      	movs	r0, #64	@ 0x40
 80092ca:	f7f6 ff90 	bl	80001ee <OS_CPU_SR_Save>
 80092ce:	6138      	str	r0, [r7, #16]
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 80092d0:	4b23      	ldr	r3, [pc, #140]	@ (8009360 <OSQCreate+0xe0>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	60fb      	str	r3, [r7, #12]
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d02c      	beq.n	8009336 <OSQCreate+0xb6>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 80092dc:	4b20      	ldr	r3, [pc, #128]	@ (8009360 <OSQCreate+0xe0>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009360 <OSQCreate+0xe0>)
 80092e4:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL();
 80092e6:	6938      	ldr	r0, [r7, #16]
 80092e8:	f7f6 ff8f 	bl	800020a <OS_CPU_SR_Restore>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	605a      	str	r2, [r3, #4]
            pq->OSQEnd             = &start[size];
 80092f2:	887b      	ldrh	r3, [r7, #2]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	441a      	add	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	609a      	str	r2, [r3, #8]
            pq->OSQIn              = start;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	60da      	str	r2, [r3, #12]
            pq->OSQOut             = start;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	611a      	str	r2, [r3, #16]
            pq->OSQSize            = size;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	887a      	ldrh	r2, [r7, #2]
 800930e:	829a      	strh	r2, [r3, #20]
            pq->OSQEntries         = 0u;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	82da      	strh	r2, [r3, #22]
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	2202      	movs	r2, #2
 800931a:	701a      	strb	r2, [r3, #0]
            pevent->OSEventCnt     = 0u;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	2200      	movs	r2, #0
 8009320:	811a      	strh	r2, [r3, #8]
            pevent->OSEventPtr     = pq;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
            pevent->OSEventName    = (INT8U *)(void *)"?";
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	4a0e      	ldr	r2, [pc, #56]	@ (8009364 <OSQCreate+0xe4>)
 800932c:	615a      	str	r2, [r3, #20]
#endif
            OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f7fe ffc3 	bl	80082ba <OS_EventWaitListInit>
 8009334:	e00b      	b.n	800934e <OSQCreate+0xce>

            OS_TRACE_Q_CREATE(pevent, pevent->OSEventName);
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 8009336:	4b09      	ldr	r3, [pc, #36]	@ (800935c <OSQCreate+0xdc>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	605a      	str	r2, [r3, #4]
            OSEventFreeList    = pevent;
 800933e:	4a07      	ldr	r2, [pc, #28]	@ (800935c <OSQCreate+0xdc>)
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL();
 8009344:	6938      	ldr	r0, [r7, #16]
 8009346:	f7f6 ff60 	bl	800020a <OS_CPU_SR_Restore>
            pevent = (OS_EVENT *)0;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
        }
    }
    return (pevent);
 800934e:	697b      	ldr	r3, [r7, #20]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3718      	adds	r7, #24
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20006ac0 	.word	0x20006ac0
 800935c:	20006768 	.word	0x20006768
 8009360:	20007650 	.word	0x20007650
 8009364:	0800d0ec 	.word	0x0800d0ec

08009368 <OSQPend>:
*/

void  *OSQPend (OS_EVENT  *pevent,
                INT32U     timeout,
                INT8U     *perr)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8009374:	2300      	movs	r3, #0
 8009376:	61bb      	str	r3, [r7, #24]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d104      	bne.n	8009388 <OSQPend+0x20>
        *perr = OS_ERR_PEVENT_NULL;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2204      	movs	r2, #4
 8009382:	701a      	strb	r2, [r3, #0]
        return ((void *)0);
 8009384:	2300      	movs	r3, #0
 8009386:	e0a5      	b.n	80094d4 <OSQPend+0x16c>
    }
#endif

    OS_TRACE_Q_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d004      	beq.n	800939a <OSQPend+0x32>
        *perr = OS_ERR_EVENT_TYPE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
 8009396:	2300      	movs	r3, #0
 8009398:	e09c      	b.n	80094d4 <OSQPend+0x16c>
    }
    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 800939a:	4b50      	ldr	r3, [pc, #320]	@ (80094dc <OSQPend+0x174>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d004      	beq.n	80093ac <OSQPend+0x44>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
 80093a8:	2300      	movs	r3, #0
 80093aa:	e093      	b.n	80094d4 <OSQPend+0x16c>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
 80093ac:	4b4c      	ldr	r3, [pc, #304]	@ (80094e0 <OSQPend+0x178>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <OSQPend+0x56>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	220d      	movs	r2, #13
 80093b8:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return ((void *)0);
 80093ba:	2300      	movs	r3, #0
 80093bc:	e08a      	b.n	80094d4 <OSQPend+0x16c>
    }
    OS_ENTER_CRITICAL();
 80093be:	2040      	movs	r0, #64	@ 0x40
 80093c0:	f7f6 ff15 	bl	80001ee <OS_CPU_SR_Save>
 80093c4:	61b8      	str	r0, [r7, #24]
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	617b      	str	r3, [r7, #20]
    if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	8adb      	ldrh	r3, [r3, #22]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01e      	beq.n	8009412 <OSQPend+0xaa>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	1d19      	adds	r1, r3, #4
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	6111      	str	r1, [r2, #16]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	61fb      	str	r3, [r7, #28]
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	8adb      	ldrh	r3, [r3, #22]
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	82da      	strh	r2, [r3, #22]
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d103      	bne.n	8009402 <OSQPend+0x9a>
            pq->OSQOut = pq->OSQStart;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	685a      	ldr	r2, [r3, #4]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	611a      	str	r2, [r3, #16]
        }
        OS_EXIT_CRITICAL();
 8009402:	69b8      	ldr	r0, [r7, #24]
 8009404:	f7f6 ff01 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
        OS_TRACE_Q_PEND_EXIT(*perr);
        return (pmsg);                           /* Return message received                            */
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	e060      	b.n	80094d4 <OSQPend+0x16c>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 8009412:	4b34      	ldr	r3, [pc, #208]	@ (80094e4 <OSQPend+0x17c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800941a:	4b32      	ldr	r3, [pc, #200]	@ (80094e4 <OSQPend+0x17c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f042 0204 	orr.w	r2, r2, #4
 8009422:	b2d2      	uxtb	r2, r2
 8009424:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8009428:	4b2e      	ldr	r3, [pc, #184]	@ (80094e4 <OSQPend+0x17c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 8009432:	4b2c      	ldr	r3, [pc, #176]	@ (80094e4 <OSQPend+0x17c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7fe fe6e 	bl	800811c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8009440:	69b8      	ldr	r0, [r7, #24]
 8009442:	f7f6 fee2 	bl	800020a <OS_CPU_SR_Restore>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 8009446:	f7ff f8c3 	bl	80085d0 <OS_Sched>
    OS_ENTER_CRITICAL();
 800944a:	2040      	movs	r0, #64	@ 0x40
 800944c:	f7f6 fecf 	bl	80001ee <OS_CPU_SR_Save>
 8009450:	61b8      	str	r0, [r7, #24]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8009452:	4b24      	ldr	r3, [pc, #144]	@ (80094e4 <OSQPend+0x17c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <OSQPend+0xfc>
 800945e:	2b02      	cmp	r3, #2
 8009460:	d008      	beq.n	8009474 <OSQPend+0x10c>
 8009462:	e00d      	b.n	8009480 <OSQPend+0x118>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 8009464:	4b1f      	ldr	r3, [pc, #124]	@ (80094e4 <OSQPend+0x17c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946a:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_NONE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	701a      	strb	r2, [r3, #0]
             break;
 8009472:	e011      	b.n	8009498 <OSQPend+0x130>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220e      	movs	r2, #14
 800947c:	701a      	strb	r2, [r3, #0]
             break;
 800947e:	e00b      	b.n	8009498 <OSQPend+0x130>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8009480:	4b18      	ldr	r3, [pc, #96]	@ (80094e4 <OSQPend+0x17c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fea0 	bl	80081cc <OS_EventTaskRemove>
             pmsg = (void *)0;
 800948c:	2300      	movs	r3, #0
 800948e:	61fb      	str	r3, [r7, #28]
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	220a      	movs	r2, #10
 8009494:	701a      	strb	r2, [r3, #0]
             break;
 8009496:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8009498:	4b12      	ldr	r3, [pc, #72]	@ (80094e4 <OSQPend+0x17c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80094a2:	4b10      	ldr	r3, [pc, #64]	@ (80094e4 <OSQPend+0x17c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80094ac:	4b0d      	ldr	r3, [pc, #52]	@ (80094e4 <OSQPend+0x17c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2200      	movs	r2, #0
 80094b2:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80094b4:	4b0b      	ldr	r3, [pc, #44]	@ (80094e4 <OSQPend+0x17c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2200      	movs	r2, #0
 80094ba:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 80094bc:	4b09      	ldr	r3, [pc, #36]	@ (80094e4 <OSQPend+0x17c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2200      	movs	r2, #0
 80094c2:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 80094c4:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <OSQPend+0x17c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	629a      	str	r2, [r3, #40]	@ 0x28
    OS_EXIT_CRITICAL();
 80094cc:	69b8      	ldr	r0, [r7, #24]
 80094ce:	f7f6 fe9c 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_Q_PEND_EXIT(*perr);

    return (pmsg);                                    /* Return received message                       */
 80094d2:	69fb      	ldr	r3, [r7, #28]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3720      	adds	r7, #32
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20006ac0 	.word	0x20006ac0
 80094e0:	20006ac1 	.word	0x20006ac1
 80094e4:	20006cd8 	.word	0x20006cd8

080094e8 <OSQPost>:
*/

#if OS_Q_POST_EN > 0u
INT8U  OSQPost (OS_EVENT  *pevent,
                void      *pmsg)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <OSQPost+0x18>
        return (OS_ERR_PEVENT_NULL);
 80094fc:	2304      	movs	r3, #4
 80094fe:	e043      	b.n	8009588 <OSQPost+0xa0>
    }
#endif

    OS_TRACE_Q_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d001      	beq.n	800950c <OSQPost+0x24>
        OS_TRACE_Q_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 8009508:	2301      	movs	r3, #1
 800950a:	e03d      	b.n	8009588 <OSQPost+0xa0>
    }
    OS_ENTER_CRITICAL();
 800950c:	2040      	movs	r0, #64	@ 0x40
 800950e:	f7f6 fe6e 	bl	80001ee <OS_CPU_SR_Save>
 8009512:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7a9b      	ldrb	r3, [r3, #10]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <OSQPost+0x4e>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 800951c:	2300      	movs	r3, #0
 800951e:	2204      	movs	r2, #4
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fe fd84 	bl	8008030 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7f6 fe6e 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                                    /* Find highest priority task ready to run      */
 800952e:	f7ff f84f 	bl	80085d0 <OS_Sched>
        OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8009532:	2300      	movs	r3, #0
 8009534:	e028      	b.n	8009588 <OSQPost+0xa0>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	60bb      	str	r3, [r7, #8]
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	8ada      	ldrh	r2, [r3, #22]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	8a9b      	ldrh	r3, [r3, #20]
 8009544:	429a      	cmp	r2, r3
 8009546:	d304      	bcc.n	8009552 <OSQPost+0x6a>
        OS_EXIT_CRITICAL();
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7f6 fe5e 	bl	800020a <OS_CPU_SR_Restore>
        OS_TRACE_Q_POST_EXIT(OS_ERR_Q_FULL);
        return (OS_ERR_Q_FULL);
 800954e:	231e      	movs	r3, #30
 8009550:	e01a      	b.n	8009588 <OSQPost+0xa0>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	1d19      	adds	r1, r3, #4
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	60d1      	str	r1, [r2, #12]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	601a      	str	r2, [r3, #0]
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	8adb      	ldrh	r3, [r3, #22]
 8009564:	3301      	adds	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	82da      	strh	r2, [r3, #22]
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	429a      	cmp	r2, r3
 8009576:	d103      	bne.n	8009580 <OSQPost+0x98>
        pq->OSQIn = pq->OSQStart;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	60da      	str	r2, [r3, #12]
    }
    OS_EXIT_CRITICAL();
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7f6 fe42 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_Q_POST_EXIT(OS_ERR_NONE);

    return (OS_ERR_NONE);
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8009596:	2160      	movs	r1, #96	@ 0x60
 8009598:	4819      	ldr	r0, [pc, #100]	@ (8009600 <OS_QInit+0x70>)
 800959a:	f7fe ffff 	bl	800859c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 800959e:	2300      	movs	r3, #0
 80095a0:	81fb      	strh	r3, [r7, #14]
 80095a2:	e018      	b.n	80095d6 <OS_QInit+0x46>
        ix_next = ix + 1u;
 80095a4:	89fb      	ldrh	r3, [r7, #14]
 80095a6:	3301      	adds	r3, #1
 80095a8:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 80095aa:	89fa      	ldrh	r2, [r7, #14]
 80095ac:	4613      	mov	r3, r2
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	4413      	add	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4a12      	ldr	r2, [pc, #72]	@ (8009600 <OS_QInit+0x70>)
 80095b6:	4413      	add	r3, r2
 80095b8:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 80095ba:	88fa      	ldrh	r2, [r7, #6]
 80095bc:	4613      	mov	r3, r2
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	4413      	add	r3, r2
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009600 <OS_QInit+0x70>)
 80095c6:	4413      	add	r3, r2
 80095c8:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	683a      	ldr	r2, [r7, #0]
 80095ce:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 80095d0:	89fb      	ldrh	r3, [r7, #14]
 80095d2:	3301      	adds	r3, #1
 80095d4:	81fb      	strh	r3, [r7, #14]
 80095d6:	89fb      	ldrh	r3, [r7, #14]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d9e3      	bls.n	80095a4 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 80095dc:	89fa      	ldrh	r2, [r7, #14]
 80095de:	4613      	mov	r3, r2
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	4413      	add	r3, r2
 80095e4:	00db      	lsls	r3, r3, #3
 80095e6:	4a06      	ldr	r2, [pc, #24]	@ (8009600 <OS_QInit+0x70>)
 80095e8:	4413      	add	r3, r2
 80095ea:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 80095f2:	4b04      	ldr	r3, [pc, #16]	@ (8009604 <OS_QInit+0x74>)
 80095f4:	4a02      	ldr	r2, [pc, #8]	@ (8009600 <OS_QInit+0x70>)
 80095f6:	601a      	str	r2, [r3, #0]
#endif
}
 80095f8:	bf00      	nop
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20007654 	.word	0x20007654
 8009604:	20007650 	.word	0x20007650

08009608 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	4603      	mov	r3, r0
 8009610:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8009616:	4b18      	ldr	r3, [pc, #96]	@ (8009678 <OSSemCreate+0x70>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800961e:	2300      	movs	r3, #0
 8009620:	e025      	b.n	800966e <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 8009622:	2040      	movs	r0, #64	@ 0x40
 8009624:	f7f6 fde3 	bl	80001ee <OS_CPU_SR_Save>
 8009628:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 800962a:	4b14      	ldr	r3, [pc, #80]	@ (800967c <OSSemCreate+0x74>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 8009630:	4b12      	ldr	r3, [pc, #72]	@ (800967c <OSSemCreate+0x74>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8009638:	4b10      	ldr	r3, [pc, #64]	@ (800967c <OSSemCreate+0x74>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	4a0f      	ldr	r2, [pc, #60]	@ (800967c <OSSemCreate+0x74>)
 8009640:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f7f6 fde1 	bl	800020a <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00e      	beq.n	800966c <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2203      	movs	r2, #3
 8009652:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2200      	movs	r2, #0
 800965e:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	4a07      	ldr	r2, [pc, #28]	@ (8009680 <OSSemCreate+0x78>)
 8009664:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8009666:	68b8      	ldr	r0, [r7, #8]
 8009668:	f7fe fe27 	bl	80082ba <OS_EventWaitListInit>

        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 800966c:	68bb      	ldr	r3, [r7, #8]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20006ac0 	.word	0x20006ac0
 800967c:	20006768 	.word	0x20006768
 8009680:	0800d0f0 	.word	0x0800d0f0

08009684 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8009690:	2300      	movs	r3, #0
 8009692:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2204      	movs	r2, #4
 800969e:	701a      	strb	r2, [r3, #0]
        return;
 80096a0:	e080      	b.n	80097a4 <OSSemPend+0x120>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d003      	beq.n	80096b2 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80096b0:	e078      	b.n	80097a4 <OSSemPend+0x120>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80096b2:	4b3e      	ldr	r3, [pc, #248]	@ (80097ac <OSSemPend+0x128>)
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2202      	movs	r2, #2
 80096be:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80096c0:	e070      	b.n	80097a4 <OSSemPend+0x120>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 80096c2:	4b3b      	ldr	r3, [pc, #236]	@ (80097b0 <OSSemPend+0x12c>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	220d      	movs	r2, #13
 80096ce:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80096d0:	e068      	b.n	80097a4 <OSSemPend+0x120>
    }
    OS_ENTER_CRITICAL();
 80096d2:	2040      	movs	r0, #64	@ 0x40
 80096d4:	f7f6 fd8b 	bl	80001ee <OS_CPU_SR_Save>
 80096d8:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	891b      	ldrh	r3, [r3, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00c      	beq.n	80096fc <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	891b      	ldrh	r3, [r3, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80096ee:	6978      	ldr	r0, [r7, #20]
 80096f0:	f7f6 fd8b 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80096fa:	e053      	b.n	80097a4 <OSSemPend+0x120>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80096fc:	4b2d      	ldr	r3, [pc, #180]	@ (80097b4 <OSSemPend+0x130>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8009704:	4b2b      	ldr	r3, [pc, #172]	@ (80097b4 <OSSemPend+0x130>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0201 	orr.w	r2, r2, #1
 800970c:	b2d2      	uxtb	r2, r2
 800970e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8009712:	4b28      	ldr	r3, [pc, #160]	@ (80097b4 <OSSemPend+0x130>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 800971c:	4b25      	ldr	r3, [pc, #148]	@ (80097b4 <OSSemPend+0x130>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	635a      	str	r2, [r3, #52]	@ 0x34
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7fe fcf9 	bl	800811c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 800972a:	6978      	ldr	r0, [r7, #20]
 800972c:	f7f6 fd6d 	bl	800020a <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 8009730:	f7fe ff4e 	bl	80085d0 <OS_Sched>
    OS_ENTER_CRITICAL();
 8009734:	2040      	movs	r0, #64	@ 0x40
 8009736:	f7f6 fd5a 	bl	80001ee <OS_CPU_SR_Save>
 800973a:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 800973c:	4b1d      	ldr	r3, [pc, #116]	@ (80097b4 <OSSemPend+0x130>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <OSSemPend+0xca>
 8009748:	2b02      	cmp	r3, #2
 800974a:	d004      	beq.n	8009756 <OSSemPend+0xd2>
 800974c:	e007      	b.n	800975e <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	701a      	strb	r2, [r3, #0]
             break;
 8009754:	e00d      	b.n	8009772 <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	220e      	movs	r2, #14
 800975a:	701a      	strb	r2, [r3, #0]
             break;
 800975c:	e009      	b.n	8009772 <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800975e:	4b15      	ldr	r3, [pc, #84]	@ (80097b4 <OSSemPend+0x130>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68f9      	ldr	r1, [r7, #12]
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe fd31 	bl	80081cc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	220a      	movs	r2, #10
 800976e:	701a      	strb	r2, [r3, #0]
             break;
 8009770:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8009772:	4b10      	ldr	r3, [pc, #64]	@ (80097b4 <OSSemPend+0x130>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 800977c:	4b0d      	ldr	r3, [pc, #52]	@ (80097b4 <OSSemPend+0x130>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8009786:	4b0b      	ldr	r3, [pc, #44]	@ (80097b4 <OSSemPend+0x130>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 800978e:	4b09      	ldr	r3, [pc, #36]	@ (80097b4 <OSSemPend+0x130>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	621a      	str	r2, [r3, #32]
    OSTCBCur->OSTCBEventMultiRdy = (OS_EVENT  *)0;
 8009796:	4b07      	ldr	r3, [pc, #28]	@ (80097b4 <OSSemPend+0x130>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
    OS_EXIT_CRITICAL();
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f7f6 fd33 	bl	800020a <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20006ac0 	.word	0x20006ac0
 80097b0:	20006ac1 	.word	0x20006ac1
 80097b4:	20006cd8 	.word	0x20006cd8

080097b8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 80097ca:	2304      	movs	r3, #4
 80097cc:	e02f      	b.n	800982e <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d001      	beq.n	80097da <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 80097d6:	2301      	movs	r3, #1
 80097d8:	e029      	b.n	800982e <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 80097da:	2040      	movs	r0, #64	@ 0x40
 80097dc:	f7f6 fd07 	bl	80001ee <OS_CPU_SR_Save>
 80097e0:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	7a9b      	ldrb	r3, [r3, #10]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00c      	beq.n	8009804 <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 80097ea:	2300      	movs	r3, #0
 80097ec:	2201      	movs	r2, #1
 80097ee:	2100      	movs	r1, #0
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7fe fc1d 	bl	8008030 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7f6 fd07 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 80097fc:	f7fe fee8 	bl	80085d0 <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8009800:	2300      	movs	r3, #0
 8009802:	e014      	b.n	800982e <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	891b      	ldrh	r3, [r3, #8]
 8009808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800980c:	4293      	cmp	r3, r2
 800980e:	d00a      	beq.n	8009826 <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	891b      	ldrh	r3, [r3, #8]
 8009814:	3301      	adds	r3, #1
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7f6 fcf4 	bl	800020a <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 8009822:	2300      	movs	r3, #0
 8009824:	e003      	b.n	800982e <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f7f6 fcef 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 800982c:	2333      	movs	r3, #51	@ 0x33
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b08c      	sub	sp, #48	@ 0x30
 800983c:	af04      	add	r7, sp, #16
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 800984a:	78fb      	ldrb	r3, [r7, #3]
 800984c:	2b3f      	cmp	r3, #63	@ 0x3f
 800984e:	d901      	bls.n	8009854 <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8009850:	232a      	movs	r3, #42	@ 0x2a
 8009852:	e052      	b.n	80098fa <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 8009854:	2040      	movs	r0, #64	@ 0x40
 8009856:	f7f6 fcca 	bl	80001ee <OS_CPU_SR_Save>
 800985a:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 800985c:	4b29      	ldr	r3, [pc, #164]	@ (8009904 <OSTaskCreateExt+0xcc>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 8009864:	69f8      	ldr	r0, [r7, #28]
 8009866:	f7f6 fcd0 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 800986a:	233c      	movs	r3, #60	@ 0x3c
 800986c:	e045      	b.n	80098fa <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	4a25      	ldr	r2, [pc, #148]	@ (8009908 <OSTaskCreateExt+0xd0>)
 8009872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d13b      	bne.n	80098f2 <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <OSTaskCreateExt+0xd0>)
 800987e:	2101      	movs	r1, #1
 8009880:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 8009884:	69f8      	ldr	r0, [r7, #28]
 8009886:	f7f6 fcc0 	bl	800020a <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 800988a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800988c:	461a      	mov	r2, r3
 800988e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009890:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009892:	f000 fa8f 	bl	8009db4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8009896:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	68b9      	ldr	r1, [r7, #8]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f7fd ff03 	bl	80076a8 <OSTaskStkInit>
 80098a2:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80098a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80098a6:	78f8      	ldrb	r0, [r7, #3]
 80098a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80098aa:	9302      	str	r3, [sp, #8]
 80098ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b8:	69b9      	ldr	r1, [r7, #24]
 80098ba:	f7fe ffb3 	bl	8008824 <OS_TCBInit>
 80098be:	4603      	mov	r3, r0
 80098c0:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 80098c8:	4b10      	ldr	r3, [pc, #64]	@ (800990c <OSTaskCreateExt+0xd4>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d10e      	bne.n	80098ee <OSTaskCreateExt+0xb6>
                OS_Sched();
 80098d0:	f7fe fe7e 	bl	80085d0 <OS_Sched>
 80098d4:	e00b      	b.n	80098ee <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 80098d6:	2040      	movs	r0, #64	@ 0x40
 80098d8:	f7f6 fc89 	bl	80001ee <OS_CPU_SR_Save>
 80098dc:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	4a09      	ldr	r2, [pc, #36]	@ (8009908 <OSTaskCreateExt+0xd0>)
 80098e2:	2100      	movs	r1, #0
 80098e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 80098e8:	69f8      	ldr	r0, [r7, #28]
 80098ea:	f7f6 fc8e 	bl	800020a <OS_CPU_SR_Restore>
        }
        return (err);
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	e003      	b.n	80098fa <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 80098f2:	69f8      	ldr	r0, [r7, #28]
 80098f4:	f7f6 fc89 	bl	800020a <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 80098f8:	2328      	movs	r3, #40	@ 0x28
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20006ac0 	.word	0x20006ac0
 8009908:	20006ce8 	.word	0x20006ce8
 800990c:	20006ad0 	.word	0x20006ad0

08009910 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 800991e:	4b6d      	ldr	r3, [pc, #436]	@ (8009ad4 <OSTaskDel+0x1c4>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 8009926:	2340      	movs	r3, #64	@ 0x40
 8009928:	e0d0      	b.n	8009acc <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	2b3f      	cmp	r3, #63	@ 0x3f
 800992e:	d101      	bne.n	8009934 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8009930:	233e      	movs	r3, #62	@ 0x3e
 8009932:	e0cb      	b.n	8009acc <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b3e      	cmp	r3, #62	@ 0x3e
 8009938:	d904      	bls.n	8009944 <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2bff      	cmp	r3, #255	@ 0xff
 800993e:	d001      	beq.n	8009944 <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 8009940:	232a      	movs	r3, #42	@ 0x2a
 8009942:	e0c3      	b.n	8009acc <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 8009944:	2040      	movs	r0, #64	@ 0x40
 8009946:	f7f6 fc52 	bl	80001ee <OS_CPU_SR_Save>
 800994a:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	2bff      	cmp	r3, #255	@ 0xff
 8009950:	d104      	bne.n	800995c <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8009952:	4b61      	ldr	r3, [pc, #388]	@ (8009ad8 <OSTaskDel+0x1c8>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800995a:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	4a5f      	ldr	r2, [pc, #380]	@ (8009adc <OSTaskDel+0x1cc>)
 8009960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009964:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 800996c:	6978      	ldr	r0, [r7, #20]
 800996e:	f7f6 fc4c 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8009972:	2343      	movs	r3, #67	@ 0x43
 8009974:	e0aa      	b.n	8009acc <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d104      	bne.n	8009986 <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 800997c:	6978      	ldr	r0, [r7, #20]
 800997e:	f7f6 fc44 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8009982:	233d      	movs	r3, #61	@ 0x3d
 8009984:	e0a2      	b.n	8009acc <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800998c:	461a      	mov	r2, r3
 800998e:	4b54      	ldr	r3, [pc, #336]	@ (8009ae0 <OSTaskDel+0x1d0>)
 8009990:	5c9a      	ldrb	r2, [r3, r2]
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009998:	43db      	mvns	r3, r3
 800999a:	b2db      	uxtb	r3, r3
 800999c:	6939      	ldr	r1, [r7, #16]
 800999e:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 80099a2:	4013      	ands	r3, r2
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	4b4e      	ldr	r3, [pc, #312]	@ (8009ae0 <OSTaskDel+0x1d0>)
 80099a8:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099b0:	461a      	mov	r2, r3
 80099b2:	4b4b      	ldr	r3, [pc, #300]	@ (8009ae0 <OSTaskDel+0x1d0>)
 80099b4:	5c9b      	ldrb	r3, [r3, r2]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099c0:	43db      	mvns	r3, r3
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	4b47      	ldr	r3, [pc, #284]	@ (8009ae4 <OSTaskDel+0x1d4>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	4013      	ands	r3, r2
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	4b45      	ldr	r3, [pc, #276]	@ (8009ae4 <OSTaskDel+0x1d4>)
 80099ce:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	4619      	mov	r1, r3
 80099de:	6938      	ldr	r0, [r7, #16]
 80099e0:	f7fe fbf4 	bl	80081cc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	4619      	mov	r1, r3
 80099f2:	6938      	ldr	r0, [r7, #16]
 80099f4:	f7fe fc1d 	bl	8008232 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fc:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff fbcb 	bl	80091a0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	635a      	str	r2, [r3, #52]	@ 0x34
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8009a20:	4b31      	ldr	r3, [pc, #196]	@ (8009ae8 <OSTaskDel+0x1d8>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2bff      	cmp	r3, #255	@ 0xff
 8009a26:	d005      	beq.n	8009a34 <OSTaskDel+0x124>
        OSLockNesting++;
 8009a28:	4b2f      	ldr	r3, [pc, #188]	@ (8009ae8 <OSTaskDel+0x1d8>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	4b2d      	ldr	r3, [pc, #180]	@ (8009ae8 <OSTaskDel+0x1d8>)
 8009a32:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8009a34:	6978      	ldr	r0, [r7, #20]
 8009a36:	f7f6 fbe8 	bl	800020a <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8009a3a:	f7fe faf1 	bl	8008020 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8009a3e:	2040      	movs	r0, #64	@ 0x40
 8009a40:	f7f6 fbd5 	bl	80001ee <OS_CPU_SR_Save>
 8009a44:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8009a46:	4b28      	ldr	r3, [pc, #160]	@ (8009ae8 <OSTaskDel+0x1d8>)
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d005      	beq.n	8009a5a <OSTaskDel+0x14a>
        OSLockNesting--;
 8009a4e:	4b26      	ldr	r3, [pc, #152]	@ (8009ae8 <OSTaskDel+0x1d8>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	4b24      	ldr	r3, [pc, #144]	@ (8009ae8 <OSTaskDel+0x1d8>)
 8009a58:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8009a5a:	6938      	ldr	r0, [r7, #16]
 8009a5c:	f7fd fe02 	bl	8007664 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8009a60:	4b22      	ldr	r3, [pc, #136]	@ (8009aec <OSTaskDel+0x1dc>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	4b20      	ldr	r3, [pc, #128]	@ (8009aec <OSTaskDel+0x1dc>)
 8009a6a:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8009adc <OSTaskDel+0x1cc>)
 8009a70:	2100      	movs	r1, #0
 8009a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d108      	bne.n	8009a90 <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	2200      	movs	r2, #0
 8009a84:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	4a19      	ldr	r2, [pc, #100]	@ (8009af0 <OSTaskDel+0x1e0>)
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	e009      	b.n	8009aa4 <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	6952      	ldr	r2, [r2, #20]
 8009a98:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	6992      	ldr	r2, [r2, #24]
 8009aa2:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8009aa4:	4b13      	ldr	r3, [pc, #76]	@ (8009af4 <OSTaskDel+0x1e4>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8009aac:	4a11      	ldr	r2, [pc, #68]	@ (8009af4 <OSTaskDel+0x1e4>)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	4a10      	ldr	r2, [pc, #64]	@ (8009af8 <OSTaskDel+0x1e8>)
 8009ab6:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
    OS_EXIT_CRITICAL();
 8009ab8:	6978      	ldr	r0, [r7, #20]
 8009aba:	f7f6 fba6 	bl	800020a <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8009abe:	4b0f      	ldr	r3, [pc, #60]	@ (8009afc <OSTaskDel+0x1ec>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8009ac6:	f7fe fd83 	bl	80085d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3718      	adds	r7, #24
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	20006ac0 	.word	0x20006ac0
 8009ad8:	20006cd8 	.word	0x20006cd8
 8009adc:	20006ce8 	.word	0x20006ce8
 8009ae0:	20006ac8 	.word	0x20006ac8
 8009ae4:	20006ac4 	.word	0x20006ac4
 8009ae8:	20006ac1 	.word	0x20006ac1
 8009aec:	20006ad1 	.word	0x20006ad1
 8009af0:	20006ce4 	.word	0x20006ce4
 8009af4:	20006cdc 	.word	0x20006cdc
 8009af8:	0800d0f4 	.word	0x0800d0f4
 8009afc:	20006ad0 	.word	0x20006ad0

08009b00 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
 8009b0c:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b16:	d906      	bls.n	8009b26 <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2bff      	cmp	r3, #255	@ 0xff
 8009b1c:	d003      	beq.n	8009b26 <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	222a      	movs	r2, #42	@ 0x2a
 8009b22:	701a      	strb	r2, [r3, #0]
            return;
 8009b24:	e03c      	b.n	8009ba0 <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	220c      	movs	r2, #12
 8009b30:	701a      	strb	r2, [r3, #0]
        return;
 8009b32:	e035      	b.n	8009ba0 <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8009b34:	4b1c      	ldr	r3, [pc, #112]	@ (8009ba8 <OSTaskNameSet+0xa8>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2212      	movs	r2, #18
 8009b40:	701a      	strb	r2, [r3, #0]
        return;
 8009b42:	e02d      	b.n	8009ba0 <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8009b44:	2040      	movs	r0, #64	@ 0x40
 8009b46:	f7f6 fb52 	bl	80001ee <OS_CPU_SR_Save>
 8009b4a:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	2bff      	cmp	r3, #255	@ 0xff
 8009b50:	d104      	bne.n	8009b5c <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 8009b52:	4b16      	ldr	r3, [pc, #88]	@ (8009bac <OSTaskNameSet+0xac>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009b5a:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4a14      	ldr	r2, [pc, #80]	@ (8009bb0 <OSTaskNameSet+0xb0>)
 8009b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b64:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8009b6c:	6978      	ldr	r0, [r7, #20]
 8009b6e:	f7f6 fb4c 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2243      	movs	r2, #67	@ 0x43
 8009b76:	701a      	strb	r2, [r3, #0]
        return;
 8009b78:	e012      	b.n	8009ba0 <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d106      	bne.n	8009b8e <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8009b80:	6978      	ldr	r0, [r7, #20]
 8009b82:	f7f6 fb42 	bl	800020a <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2243      	movs	r2, #67	@ 0x43
 8009b8a:	701a      	strb	r2, [r3, #0]
        return;
 8009b8c:	e008      	b.n	8009ba0 <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	655a      	str	r2, [r3, #84]	@ 0x54
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8009b94:	6978      	ldr	r0, [r7, #20]
 8009b96:	f7f6 fb38 	bl	800020a <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	701a      	strb	r2, [r3, #0]
}
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20006ac0 	.word	0x20006ac0
 8009bac:	20006cd8 	.word	0x20006cd8
 8009bb0:	20006ce8 	.word	0x20006ce8

08009bb4 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6039      	str	r1, [r7, #0]
 8009bbe:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8009bc8:	d904      	bls.n	8009bd4 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8009bca:	79fb      	ldrb	r3, [r7, #7]
 8009bcc:	2bff      	cmp	r3, #255	@ 0xff
 8009bce:	d001      	beq.n	8009bd4 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8009bd0:	232a      	movs	r3, #42	@ 0x2a
 8009bd2:	e054      	b.n	8009c7e <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8009bda:	2309      	movs	r3, #9
 8009bdc:	e04f      	b.n	8009c7e <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2200      	movs	r2, #0
 8009be8:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8009bea:	2040      	movs	r0, #64	@ 0x40
 8009bec:	f7f6 faff 	bl	80001ee <OS_CPU_SR_Save>
 8009bf0:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8009bf2:	79fb      	ldrb	r3, [r7, #7]
 8009bf4:	2bff      	cmp	r3, #255	@ 0xff
 8009bf6:	d104      	bne.n	8009c02 <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8009bf8:	4b23      	ldr	r3, [pc, #140]	@ (8009c88 <OSTaskStkChk+0xd4>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009c00:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	4a21      	ldr	r2, [pc, #132]	@ (8009c8c <OSTaskStkChk+0xd8>)
 8009c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c0a:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 8009c12:	6978      	ldr	r0, [r7, #20]
 8009c14:	f7f6 faf9 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8009c18:	2343      	movs	r3, #67	@ 0x43
 8009c1a:	e030      	b.n	8009c7e <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d104      	bne.n	8009c2c <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 8009c22:	6978      	ldr	r0, [r7, #20]
 8009c24:	f7f6 faf1 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8009c28:	2343      	movs	r3, #67	@ 0x43
 8009c2a:	e028      	b.n	8009c7e <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	8a1b      	ldrh	r3, [r3, #16]
 8009c30:	f003 0301 	and.w	r3, r3, #1
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8009c38:	6978      	ldr	r0, [r7, #20]
 8009c3a:	f7f6 fae6 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8009c3e:	2345      	movs	r3, #69	@ 0x45
 8009c40:	e01d      	b.n	8009c7e <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8009c52:	6978      	ldr	r0, [r7, #20]
 8009c54:	f7f6 fad9 	bl	800020a <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8009c58:	e002      	b.n	8009c60 <OSTaskStkChk+0xac>
        nfree++;
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	1d1a      	adds	r2, r3, #4
 8009c64:	61fa      	str	r2, [r7, #28]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0f6      	beq.n	8009c5a <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	69ba      	ldr	r2, [r7, #24]
 8009c70:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3720      	adds	r7, #32
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20006cd8 	.word	0x20006cd8
 8009c8c:	20006ce8 	.word	0x20006ce8

08009c90 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	4603      	mov	r3, r0
 8009c98:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8009c9e:	79fb      	ldrb	r3, [r7, #7]
 8009ca0:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ca2:	d101      	bne.n	8009ca8 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8009ca4:	2347      	movs	r3, #71	@ 0x47
 8009ca6:	e06a      	b.n	8009d7e <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cac:	d904      	bls.n	8009cb8 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	2bff      	cmp	r3, #255	@ 0xff
 8009cb2:	d001      	beq.n	8009cb8 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8009cb4:	232a      	movs	r3, #42	@ 0x2a
 8009cb6:	e062      	b.n	8009d7e <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8009cb8:	2040      	movs	r0, #64	@ 0x40
 8009cba:	f7f6 fa98 	bl	80001ee <OS_CPU_SR_Save>
 8009cbe:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8009cc0:	79fb      	ldrb	r3, [r7, #7]
 8009cc2:	2bff      	cmp	r3, #255	@ 0xff
 8009cc4:	d107      	bne.n	8009cd6 <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8009cc6:	4b30      	ldr	r3, [pc, #192]	@ (8009d88 <OSTaskSuspend+0xf8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009cce:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	75fb      	strb	r3, [r7, #23]
 8009cd4:	e00b      	b.n	8009cee <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8009cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8009d88 <OSTaskSuspend+0xf8>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009cde:	79fa      	ldrb	r2, [r7, #7]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d102      	bne.n	8009cea <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
 8009ce8:	e001      	b.n	8009cee <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8009cea:	2300      	movs	r3, #0
 8009cec:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	4a26      	ldr	r2, [pc, #152]	@ (8009d8c <OSTaskSuspend+0xfc>)
 8009cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cf6:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d104      	bne.n	8009d08 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 8009cfe:	6938      	ldr	r0, [r7, #16]
 8009d00:	f7f6 fa83 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8009d04:	2348      	movs	r3, #72	@ 0x48
 8009d06:	e03a      	b.n	8009d7e <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d104      	bne.n	8009d18 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 8009d0e:	6938      	ldr	r0, [r7, #16]
 8009d10:	f7f6 fa7b 	bl	800020a <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8009d14:	2343      	movs	r3, #67	@ 0x43
 8009d16:	e032      	b.n	8009d7e <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d1e:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8009d20:	7afb      	ldrb	r3, [r7, #11]
 8009d22:	4a1b      	ldr	r2, [pc, #108]	@ (8009d90 <OSTaskSuspend+0x100>)
 8009d24:	5cd1      	ldrb	r1, [r2, r3]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	400a      	ands	r2, r1
 8009d34:	b2d1      	uxtb	r1, r2
 8009d36:	4a16      	ldr	r2, [pc, #88]	@ (8009d90 <OSTaskSuspend+0x100>)
 8009d38:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8009d3a:	7afb      	ldrb	r3, [r7, #11]
 8009d3c:	4a14      	ldr	r2, [pc, #80]	@ (8009d90 <OSTaskSuspend+0x100>)
 8009d3e:	5cd3      	ldrb	r3, [r2, r3]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10a      	bne.n	8009d5a <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d4a:	43db      	mvns	r3, r3
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b11      	ldr	r3, [pc, #68]	@ (8009d94 <OSTaskSuspend+0x104>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	4013      	ands	r3, r2
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	4b0f      	ldr	r3, [pc, #60]	@ (8009d94 <OSTaskSuspend+0x104>)
 8009d58:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d60:	f043 0308 	orr.w	r3, r3, #8
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    OS_EXIT_CRITICAL();
 8009d6c:	6938      	ldr	r0, [r7, #16]
 8009d6e:	f7f6 fa4c 	bl	800020a <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d101      	bne.n	8009d7c <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8009d78:	f7fe fc2a 	bl	80085d0 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20006cd8 	.word	0x20006cd8
 8009d8c:	20006ce8 	.word	0x20006ce8
 8009d90:	20006ac8 	.word	0x20006ac8
 8009d94:	20006ac4 	.word	0x20006ac4

08009d98 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8009d9c:	4b04      	ldr	r3, [pc, #16]	@ (8009db0 <OS_TaskReturn+0x18>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fd fc70 	bl	8007686 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8009da6:	20ff      	movs	r0, #255	@ 0xff
 8009da8:	f7ff fdb2 	bl	8009910 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8009dac:	bf00      	nop
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20006cd8 	.word	0x20006cd8

08009db4 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8009dc2:	88fb      	ldrh	r3, [r7, #6]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d010      	beq.n	8009dee <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8009dd6:	e007      	b.n	8009de8 <OS_TaskStkClr+0x34>
                size--;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	1d1a      	adds	r2, r3, #4
 8009de2:	60fa      	str	r2, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1f4      	bne.n	8009dd8 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8009e04:	2300      	movs	r3, #0
 8009e06:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8009e08:	4b21      	ldr	r3, [pc, #132]	@ (8009e90 <OSTimeDly+0x94>)
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d138      	bne.n	8009e82 <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8009e10:	4b20      	ldr	r3, [pc, #128]	@ (8009e94 <OSTimeDly+0x98>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d136      	bne.n	8009e86 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d034      	beq.n	8009e88 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 8009e1e:	2040      	movs	r0, #64	@ 0x40
 8009e20:	f7f6 f9e5 	bl	80001ee <OS_CPU_SR_Save>
 8009e24:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8009e26:	4b1c      	ldr	r3, [pc, #112]	@ (8009e98 <OSTimeDly+0x9c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e2e:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8009e30:	7afb      	ldrb	r3, [r7, #11]
 8009e32:	4a1a      	ldr	r2, [pc, #104]	@ (8009e9c <OSTimeDly+0xa0>)
 8009e34:	5cd1      	ldrb	r1, [r2, r3]
 8009e36:	4b18      	ldr	r3, [pc, #96]	@ (8009e98 <OSTimeDly+0x9c>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e3e:	43db      	mvns	r3, r3
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	400a      	ands	r2, r1
 8009e46:	b2d1      	uxtb	r1, r2
 8009e48:	4a14      	ldr	r2, [pc, #80]	@ (8009e9c <OSTimeDly+0xa0>)
 8009e4a:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	4a13      	ldr	r2, [pc, #76]	@ (8009e9c <OSTimeDly+0xa0>)
 8009e50:	5cd3      	ldrb	r3, [r2, r3]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10b      	bne.n	8009e6e <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8009e56:	4b10      	ldr	r3, [pc, #64]	@ (8009e98 <OSTimeDly+0x9c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e5e:	43db      	mvns	r3, r3
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea0 <OSTimeDly+0xa4>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	4013      	ands	r3, r2
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea0 <OSTimeDly+0xa4>)
 8009e6c:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8009e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009e98 <OSTimeDly+0x9c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	635a      	str	r2, [r3, #52]	@ 0x34
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f7f6 f9c7 	bl	800020a <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8009e7c:	f7fe fba8 	bl	80085d0 <OS_Sched>
 8009e80:	e002      	b.n	8009e88 <OSTimeDly+0x8c>
        return;
 8009e82:	bf00      	nop
 8009e84:	e000      	b.n	8009e88 <OSTimeDly+0x8c>
        return;
 8009e86:	bf00      	nop
    }
}
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	20006ac0 	.word	0x20006ac0
 8009e94:	20006ac1 	.word	0x20006ac1
 8009e98:	20006cd8 	.word	0x20006cd8
 8009e9c:	20006ac8 	.word	0x20006ac8
 8009ea0:	20006ac4 	.word	0x20006ac4

08009ea4 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	71fb      	strb	r3, [r7, #7]
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	71bb      	strb	r3, [r7, #6]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	717b      	strb	r3, [r7, #5]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8009ec2:	4b27      	ldr	r3, [pc, #156]	@ (8009f60 <OSTimeDlyHMSM+0xbc>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 8009eca:	2355      	movs	r3, #85	@ 0x55
 8009ecc:	e043      	b.n	8009f56 <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8009ece:	4b25      	ldr	r3, [pc, #148]	@ (8009f64 <OSTimeDlyHMSM+0xc0>)
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8009ed6:	2332      	movs	r3, #50	@ 0x32
 8009ed8:	e03d      	b.n	8009f56 <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 8009eda:	79fb      	ldrb	r3, [r7, #7]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10a      	bne.n	8009ef6 <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 8009ee0:	79bb      	ldrb	r3, [r7, #6]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d107      	bne.n	8009ef6 <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 8009ee6:	797b      	ldrb	r3, [r7, #5]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 8009eec:	887b      	ldrh	r3, [r7, #2]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 8009ef2:	2354      	movs	r3, #84	@ 0x54
 8009ef4:	e02f      	b.n	8009f56 <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 8009ef6:	79bb      	ldrb	r3, [r7, #6]
 8009ef8:	2b3b      	cmp	r3, #59	@ 0x3b
 8009efa:	d901      	bls.n	8009f00 <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 8009efc:	2351      	movs	r3, #81	@ 0x51
 8009efe:	e02a      	b.n	8009f56 <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 8009f00:	797b      	ldrb	r3, [r7, #5]
 8009f02:	2b3b      	cmp	r3, #59	@ 0x3b
 8009f04:	d901      	bls.n	8009f0a <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 8009f06:	2352      	movs	r3, #82	@ 0x52
 8009f08:	e025      	b.n	8009f56 <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 8009f0a:	887b      	ldrh	r3, [r7, #2]
 8009f0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f10:	d301      	bcc.n	8009f16 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 8009f12:	2353      	movs	r3, #83	@ 0x53
 8009f14:	e01f      	b.n	8009f56 <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8009f1c:	fb02 f103 	mul.w	r1, r2, r3
 8009f20:	79ba      	ldrb	r2, [r7, #6]
 8009f22:	4613      	mov	r3, r2
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	18ca      	adds	r2, r1, r3
 8009f2c:	797b      	ldrb	r3, [r7, #5]
 8009f2e:	4413      	add	r3, r2
 8009f30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009f34:	fb03 f202 	mul.w	r2, r3, r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 8009f38:	887b      	ldrh	r3, [r7, #2]
 8009f3a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009f3e:	fb01 f303 	mul.w	r3, r1, r3
 8009f42:	4909      	ldr	r1, [pc, #36]	@ (8009f68 <OSTimeDlyHMSM+0xc4>)
 8009f44:	fba1 1303 	umull	r1, r3, r1, r3
 8009f48:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 8009f4a:	4413      	add	r3, r2
 8009f4c:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff ff54 	bl	8009dfc <OSTimeDly>
    return (OS_ERR_NONE);
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd90      	pop	{r4, r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20006ac0 	.word	0x20006ac0
 8009f64:	20006ac1 	.word	0x20006ac1
 8009f68:	10624dd3 	.word	0x10624dd3

08009f6c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8009f72:	2300      	movs	r3, #0
 8009f74:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8009f76:	2040      	movs	r0, #64	@ 0x40
 8009f78:	f7f6 f939 	bl	80001ee <OS_CPU_SR_Save>
 8009f7c:	6078      	str	r0, [r7, #4]
    ticks = OSTime;
 8009f7e:	4b05      	ldr	r3, [pc, #20]	@ (8009f94 <OSTimeGet+0x28>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7f6 f940 	bl	800020a <OS_CPU_SR_Restore>
    return (ticks);
 8009f8a:	683b      	ldr	r3, [r7, #0]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	200076b8 	.word	0x200076b8

08009f98 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 8009f9e:	4b06      	ldr	r3, [pc, #24]	@ (8009fb8 <OSTmrSignal+0x20>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff fc08 	bl	80097b8 <OSSemPost>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	71fb      	strb	r3, [r7, #7]
    return (err);
 8009fac:	79fb      	ldrb	r3, [r7, #7]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200076c8 	.word	0x200076c8

08009fbc <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 8009fc2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009fc6:	4838      	ldr	r0, [pc, #224]	@ (800a0a8 <OSTmr_Init+0xec>)
 8009fc8:	f7fe fae8 	bl	800859c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8009fcc:	2138      	movs	r1, #56	@ 0x38
 8009fce:	4837      	ldr	r0, [pc, #220]	@ (800a0ac <OSTmr_Init+0xf0>)
 8009fd0:	f7fe fae4 	bl	800859c <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	82fb      	strh	r3, [r7, #22]
 8009fd8:	e022      	b.n	800a020 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8009fda:	8afb      	ldrh	r3, [r7, #22]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 8009fe0:	8afa      	ldrh	r2, [r7, #22]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	4a2f      	ldr	r2, [pc, #188]	@ (800a0a8 <OSTmr_Init+0xec>)
 8009fec:	4413      	add	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 8009ff0:	89fa      	ldrh	r2, [r7, #14]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	4a2b      	ldr	r2, [pc, #172]	@ (800a0a8 <OSTmr_Init+0xec>)
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	2264      	movs	r2, #100	@ 0x64
 800a004:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	4a26      	ldr	r2, [pc, #152]	@ (800a0b0 <OSTmr_Init+0xf4>)
 800a018:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800a01a:	8afb      	ldrh	r3, [r7, #22]
 800a01c:	3301      	adds	r3, #1
 800a01e:	82fb      	strh	r3, [r7, #22]
 800a020:	8afb      	ldrh	r3, [r7, #22]
 800a022:	2b0e      	cmp	r3, #14
 800a024:	d9d9      	bls.n	8009fda <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800a026:	8afa      	ldrh	r2, [r7, #22]
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	4a1d      	ldr	r2, [pc, #116]	@ (800a0a8 <OSTmr_Init+0xec>)
 800a032:	4413      	add	r3, r2
 800a034:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2264      	movs	r2, #100	@ 0x64
 800a03a:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	2200      	movs	r2, #0
 800a048:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	4a18      	ldr	r2, [pc, #96]	@ (800a0b0 <OSTmr_Init+0xf4>)
 800a04e:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 800a050:	4b18      	ldr	r3, [pc, #96]	@ (800a0b4 <OSTmr_Init+0xf8>)
 800a052:	2200      	movs	r2, #0
 800a054:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 800a056:	4b18      	ldr	r3, [pc, #96]	@ (800a0b8 <OSTmr_Init+0xfc>)
 800a058:	2200      	movs	r2, #0
 800a05a:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 800a05c:	4b17      	ldr	r3, [pc, #92]	@ (800a0bc <OSTmr_Init+0x100>)
 800a05e:	2210      	movs	r2, #16
 800a060:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800a062:	4b17      	ldr	r3, [pc, #92]	@ (800a0c0 <OSTmr_Init+0x104>)
 800a064:	4a10      	ldr	r2, [pc, #64]	@ (800a0a8 <OSTmr_Init+0xec>)
 800a066:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 800a068:	2001      	movs	r0, #1
 800a06a:	f7ff facd 	bl	8009608 <OSSemCreate>
 800a06e:	4603      	mov	r3, r0
 800a070:	4a14      	ldr	r2, [pc, #80]	@ (800a0c4 <OSTmr_Init+0x108>)
 800a072:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 800a074:	2000      	movs	r0, #0
 800a076:	f7ff fac7 	bl	8009608 <OSSemCreate>
 800a07a:	4603      	mov	r3, r0
 800a07c:	4a12      	ldr	r2, [pc, #72]	@ (800a0c8 <OSTmr_Init+0x10c>)
 800a07e:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 800a080:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <OSTmr_Init+0x108>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	1dfa      	adds	r2, r7, #7
 800a086:	4911      	ldr	r1, [pc, #68]	@ (800a0cc <OSTmr_Init+0x110>)
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fd fdd9 	bl	8007c40 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 800a08e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c8 <OSTmr_Init+0x10c>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	1dfa      	adds	r2, r7, #7
 800a094:	490e      	ldr	r1, [pc, #56]	@ (800a0d0 <OSTmr_Init+0x114>)
 800a096:	4618      	mov	r0, r3
 800a098:	f7fd fdd2 	bl	8007c40 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 800a09c:	f000 f81a 	bl	800a0d4 <OSTmr_InitTask>
}
 800a0a0:	bf00      	nop
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	200076cc 	.word	0x200076cc
 800a0ac:	20007b50 	.word	0x20007b50
 800a0b0:	0800d0f8 	.word	0x0800d0f8
 800a0b4:	200076c0 	.word	0x200076c0
 800a0b8:	200076be 	.word	0x200076be
 800a0bc:	200076bc 	.word	0x200076bc
 800a0c0:	2000794c 	.word	0x2000794c
 800a0c4:	200076c4 	.word	0x200076c4
 800a0c8:	200076c8 	.word	0x200076c8
 800a0cc:	0800d0fc 	.word	0x0800d0fc
 800a0d0:	0800d110 	.word	0x0800d110

0800a0d4 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 800a0da:	2303      	movs	r3, #3
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	2380      	movs	r3, #128	@ 0x80
 800a0e4:	9302      	str	r3, [sp, #8]
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <OSTmr_InitTask+0x3c>)
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	233d      	movs	r3, #61	@ 0x3d
 800a0f2:	4a08      	ldr	r2, [pc, #32]	@ (800a114 <OSTmr_InitTask+0x40>)
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4808      	ldr	r0, [pc, #32]	@ (800a118 <OSTmr_InitTask+0x44>)
 800a0f8:	f7ff fb9e 	bl	8009838 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 800a0fc:	1dfb      	adds	r3, r7, #7
 800a0fe:	461a      	mov	r2, r3
 800a100:	4906      	ldr	r1, [pc, #24]	@ (800a11c <OSTmr_InitTask+0x48>)
 800a102:	203d      	movs	r0, #61	@ 0x3d
 800a104:	f7ff fcfc 	bl	8009b00 <OSTaskNameSet>
#endif
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20007950 	.word	0x20007950
 800a114:	20007b4c 	.word	0x20007b4c
 800a118:	0800a2a1 	.word	0x0800a2a1
 800a11c:	0800d124 	.word	0x0800d124

0800a120 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2203      	movs	r2, #3
 800a130:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d107      	bne.n	800a14a <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	69da      	ldr	r2, [r3, #28]
 800a13e:	4b2b      	ldr	r3, [pc, #172]	@ (800a1ec <OSTmr_Link+0xcc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	441a      	add	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	615a      	str	r2, [r3, #20]
 800a148:	e012      	b.n	800a170 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d107      	bne.n	800a162 <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69da      	ldr	r2, [r3, #28]
 800a156:	4b25      	ldr	r3, [pc, #148]	@ (800a1ec <OSTmr_Link+0xcc>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	441a      	add	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	615a      	str	r2, [r3, #20]
 800a160:	e006      	b.n	800a170 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699a      	ldr	r2, [r3, #24]
 800a166:	4b21      	ldr	r3, [pc, #132]	@ (800a1ec <OSTmr_Link+0xcc>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	441a      	add	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	695a      	ldr	r2, [r3, #20]
 800a174:	4b1e      	ldr	r3, [pc, #120]	@ (800a1f0 <OSTmr_Link+0xd0>)
 800a176:	fba3 1302 	umull	r1, r3, r3, r2
 800a17a:	1ad1      	subs	r1, r2, r3
 800a17c:	0849      	lsrs	r1, r1, #1
 800a17e:	440b      	add	r3, r1
 800a180:	0899      	lsrs	r1, r3, #2
 800a182:	460b      	mov	r3, r1
 800a184:	00db      	lsls	r3, r3, #3
 800a186:	1a5b      	subs	r3, r3, r1
 800a188:	1ad1      	subs	r1, r2, r3
 800a18a:	460b      	mov	r3, r1
 800a18c:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800a18e:	8afb      	ldrh	r3, [r7, #22]
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	4a18      	ldr	r2, [pc, #96]	@ (800a1f4 <OSTmr_Link+0xd4>)
 800a194:	4413      	add	r3, r2
 800a196:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d109      	bne.n	800a1b4 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	809a      	strh	r2, [r3, #4]
 800a1b2:	e011      	b.n	800a1d8 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	889b      	ldrh	r3, [r3, #4]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	611a      	str	r2, [r3, #16]
}
 800a1de:	bf00      	nop
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	200076c0 	.word	0x200076c0
 800a1f0:	24924925 	.word	0x24924925
 800a1f4:	20007b50 	.word	0x20007b50

0800a1f8 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	695a      	ldr	r2, [r3, #20]
 800a204:	4b24      	ldr	r3, [pc, #144]	@ (800a298 <OSTmr_Unlink+0xa0>)
 800a206:	fba3 1302 	umull	r1, r3, r3, r2
 800a20a:	1ad1      	subs	r1, r2, r3
 800a20c:	0849      	lsrs	r1, r1, #1
 800a20e:	440b      	add	r3, r1
 800a210:	0899      	lsrs	r1, r3, #2
 800a212:	460b      	mov	r3, r1
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	1a5b      	subs	r3, r3, r1
 800a218:	1ad1      	subs	r1, r2, r3
 800a21a:	460b      	mov	r3, r1
 800a21c:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800a21e:	8afb      	ldrh	r3, [r7, #22]
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	4a1e      	ldr	r2, [pc, #120]	@ (800a29c <OSTmr_Unlink+0xa4>)
 800a224:	4413      	add	r3, r2
 800a226:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d10c      	bne.n	800a24c <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d012      	beq.n	800a26a <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	611a      	str	r2, [r3, #16]
 800a24a:	e00e      	b.n	800a26a <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68db      	ldr	r3, [r3, #12]
 800a256:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2201      	movs	r2, #1
 800a26e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    ptmr->OSTmrNext  = (void *)0;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	889b      	ldrh	r3, [r3, #4]
 800a282:	3b01      	subs	r3, #1
 800a284:	b29a      	uxth	r2, r3
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	809a      	strh	r2, [r3, #4]
}
 800a28a:	bf00      	nop
 800a28c:	371c      	adds	r7, #28
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	24924925 	.word	0x24924925
 800a29c:	20007b50 	.word	0x20007b50

0800a2a0 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800a2a8:	4b2a      	ldr	r3, [pc, #168]	@ (800a354 <OSTmr_Task+0xb4>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f107 020b 	add.w	r2, r7, #11
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff f9e6 	bl	8009684 <OSSemPend>
        OSSchedLock();
 800a2b8:	f7fd fd86 	bl	8007dc8 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 800a2bc:	4b26      	ldr	r3, [pc, #152]	@ (800a358 <OSTmr_Task+0xb8>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	4a25      	ldr	r2, [pc, #148]	@ (800a358 <OSTmr_Task+0xb8>)
 800a2c4:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 800a2c6:	4b24      	ldr	r3, [pc, #144]	@ (800a358 <OSTmr_Task+0xb8>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b24      	ldr	r3, [pc, #144]	@ (800a35c <OSTmr_Task+0xbc>)
 800a2cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d0:	1ad1      	subs	r1, r2, r3
 800a2d2:	0849      	lsrs	r1, r1, #1
 800a2d4:	440b      	add	r3, r1
 800a2d6:	0899      	lsrs	r1, r3, #2
 800a2d8:	460b      	mov	r3, r1
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	1a5b      	subs	r3, r3, r1
 800a2de:	1ad1      	subs	r1, r2, r3
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 800a2e4:	8b7b      	ldrh	r3, [r7, #26]
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a360 <OSTmr_Task+0xc0>)
 800a2ea:	4413      	add	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800a2f4:	e027      	b.n	800a346 <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	695a      	ldr	r2, [r3, #20]
 800a300:	4b15      	ldr	r3, [pc, #84]	@ (800a358 <OSTmr_Task+0xb8>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	429a      	cmp	r2, r3
 800a306:	d11c      	bne.n	800a342 <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 800a308:	69f8      	ldr	r0, [r7, #28]
 800a30a:	f7ff ff75 	bl	800a1f8 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a314:	2b02      	cmp	r3, #2
 800a316:	d104      	bne.n	800a322 <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 800a318:	2101      	movs	r1, #1
 800a31a:	69f8      	ldr	r0, [r7, #28]
 800a31c:	f7ff ff00 	bl	800a120 <OSTmr_Link>
 800a320:	e003      	b.n	800a32a <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2202      	movs	r2, #2
 800a326:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4611      	mov	r1, r2
 800a33e:	69f8      	ldr	r0, [r7, #28]
 800a340:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1d4      	bne.n	800a2f6 <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 800a34c:	f7fd fd64 	bl	8007e18 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800a350:	e7aa      	b.n	800a2a8 <OSTmr_Task+0x8>
 800a352:	bf00      	nop
 800a354:	200076c8 	.word	0x200076c8
 800a358:	200076c0 	.word	0x200076c0
 800a35c:	24924925 	.word	0x24924925
 800a360:	20007b50 	.word	0x20007b50

0800a364 <atoi>:
 800a364:	220a      	movs	r2, #10
 800a366:	2100      	movs	r1, #0
 800a368:	f000 b87a 	b.w	800a460 <strtol>

0800a36c <_strtol_l.constprop.0>:
 800a36c:	2b24      	cmp	r3, #36	@ 0x24
 800a36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a372:	4686      	mov	lr, r0
 800a374:	4690      	mov	r8, r2
 800a376:	d801      	bhi.n	800a37c <_strtol_l.constprop.0+0x10>
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d106      	bne.n	800a38a <_strtol_l.constprop.0+0x1e>
 800a37c:	f000 ffe2 	bl	800b344 <__errno>
 800a380:	2316      	movs	r3, #22
 800a382:	6003      	str	r3, [r0, #0]
 800a384:	2000      	movs	r0, #0
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	4834      	ldr	r0, [pc, #208]	@ (800a45c <_strtol_l.constprop.0+0xf0>)
 800a38c:	460d      	mov	r5, r1
 800a38e:	462a      	mov	r2, r5
 800a390:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a394:	5d06      	ldrb	r6, [r0, r4]
 800a396:	f016 0608 	ands.w	r6, r6, #8
 800a39a:	d1f8      	bne.n	800a38e <_strtol_l.constprop.0+0x22>
 800a39c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a39e:	d12d      	bne.n	800a3fc <_strtol_l.constprop.0+0x90>
 800a3a0:	782c      	ldrb	r4, [r5, #0]
 800a3a2:	2601      	movs	r6, #1
 800a3a4:	1c95      	adds	r5, r2, #2
 800a3a6:	f033 0210 	bics.w	r2, r3, #16
 800a3aa:	d109      	bne.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a3ac:	2c30      	cmp	r4, #48	@ 0x30
 800a3ae:	d12a      	bne.n	800a406 <_strtol_l.constprop.0+0x9a>
 800a3b0:	782a      	ldrb	r2, [r5, #0]
 800a3b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3b6:	2a58      	cmp	r2, #88	@ 0x58
 800a3b8:	d125      	bne.n	800a406 <_strtol_l.constprop.0+0x9a>
 800a3ba:	786c      	ldrb	r4, [r5, #1]
 800a3bc:	2310      	movs	r3, #16
 800a3be:	3502      	adds	r5, #2
 800a3c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a3c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	fbbc f9f3 	udiv	r9, ip, r3
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a3d8:	2f09      	cmp	r7, #9
 800a3da:	d81b      	bhi.n	800a414 <_strtol_l.constprop.0+0xa8>
 800a3dc:	463c      	mov	r4, r7
 800a3de:	42a3      	cmp	r3, r4
 800a3e0:	dd27      	ble.n	800a432 <_strtol_l.constprop.0+0xc6>
 800a3e2:	1c57      	adds	r7, r2, #1
 800a3e4:	d007      	beq.n	800a3f6 <_strtol_l.constprop.0+0x8a>
 800a3e6:	4581      	cmp	r9, r0
 800a3e8:	d320      	bcc.n	800a42c <_strtol_l.constprop.0+0xc0>
 800a3ea:	d101      	bne.n	800a3f0 <_strtol_l.constprop.0+0x84>
 800a3ec:	45a2      	cmp	sl, r4
 800a3ee:	db1d      	blt.n	800a42c <_strtol_l.constprop.0+0xc0>
 800a3f0:	fb00 4003 	mla	r0, r0, r3, r4
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3fa:	e7eb      	b.n	800a3d4 <_strtol_l.constprop.0+0x68>
 800a3fc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a3fe:	bf04      	itt	eq
 800a400:	782c      	ldrbeq	r4, [r5, #0]
 800a402:	1c95      	addeq	r5, r2, #2
 800a404:	e7cf      	b.n	800a3a6 <_strtol_l.constprop.0+0x3a>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1da      	bne.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a40a:	2c30      	cmp	r4, #48	@ 0x30
 800a40c:	bf0c      	ite	eq
 800a40e:	2308      	moveq	r3, #8
 800a410:	230a      	movne	r3, #10
 800a412:	e7d5      	b.n	800a3c0 <_strtol_l.constprop.0+0x54>
 800a414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a418:	2f19      	cmp	r7, #25
 800a41a:	d801      	bhi.n	800a420 <_strtol_l.constprop.0+0xb4>
 800a41c:	3c37      	subs	r4, #55	@ 0x37
 800a41e:	e7de      	b.n	800a3de <_strtol_l.constprop.0+0x72>
 800a420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a424:	2f19      	cmp	r7, #25
 800a426:	d804      	bhi.n	800a432 <_strtol_l.constprop.0+0xc6>
 800a428:	3c57      	subs	r4, #87	@ 0x57
 800a42a:	e7d8      	b.n	800a3de <_strtol_l.constprop.0+0x72>
 800a42c:	f04f 32ff 	mov.w	r2, #4294967295
 800a430:	e7e1      	b.n	800a3f6 <_strtol_l.constprop.0+0x8a>
 800a432:	1c53      	adds	r3, r2, #1
 800a434:	d108      	bne.n	800a448 <_strtol_l.constprop.0+0xdc>
 800a436:	2322      	movs	r3, #34	@ 0x22
 800a438:	f8ce 3000 	str.w	r3, [lr]
 800a43c:	4660      	mov	r0, ip
 800a43e:	f1b8 0f00 	cmp.w	r8, #0
 800a442:	d0a0      	beq.n	800a386 <_strtol_l.constprop.0+0x1a>
 800a444:	1e69      	subs	r1, r5, #1
 800a446:	e006      	b.n	800a456 <_strtol_l.constprop.0+0xea>
 800a448:	b106      	cbz	r6, 800a44c <_strtol_l.constprop.0+0xe0>
 800a44a:	4240      	negs	r0, r0
 800a44c:	f1b8 0f00 	cmp.w	r8, #0
 800a450:	d099      	beq.n	800a386 <_strtol_l.constprop.0+0x1a>
 800a452:	2a00      	cmp	r2, #0
 800a454:	d1f6      	bne.n	800a444 <_strtol_l.constprop.0+0xd8>
 800a456:	f8c8 1000 	str.w	r1, [r8]
 800a45a:	e794      	b.n	800a386 <_strtol_l.constprop.0+0x1a>
 800a45c:	0800d2f1 	.word	0x0800d2f1

0800a460 <strtol>:
 800a460:	4613      	mov	r3, r2
 800a462:	460a      	mov	r2, r1
 800a464:	4601      	mov	r1, r0
 800a466:	4802      	ldr	r0, [pc, #8]	@ (800a470 <strtol+0x10>)
 800a468:	6800      	ldr	r0, [r0, #0]
 800a46a:	f7ff bf7f 	b.w	800a36c <_strtol_l.constprop.0>
 800a46e:	bf00      	nop
 800a470:	20000018 	.word	0x20000018

0800a474 <__cvt>:
 800a474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	ec57 6b10 	vmov	r6, r7, d0
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	460c      	mov	r4, r1
 800a480:	4619      	mov	r1, r3
 800a482:	463b      	mov	r3, r7
 800a484:	bfbb      	ittet	lt
 800a486:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a48a:	461f      	movlt	r7, r3
 800a48c:	2300      	movge	r3, #0
 800a48e:	232d      	movlt	r3, #45	@ 0x2d
 800a490:	700b      	strb	r3, [r1, #0]
 800a492:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a494:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a498:	4691      	mov	r9, r2
 800a49a:	f023 0820 	bic.w	r8, r3, #32
 800a49e:	bfbc      	itt	lt
 800a4a0:	4632      	movlt	r2, r6
 800a4a2:	4616      	movlt	r6, r2
 800a4a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4a8:	d005      	beq.n	800a4b6 <__cvt+0x42>
 800a4aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a4ae:	d100      	bne.n	800a4b2 <__cvt+0x3e>
 800a4b0:	3401      	adds	r4, #1
 800a4b2:	2102      	movs	r1, #2
 800a4b4:	e000      	b.n	800a4b8 <__cvt+0x44>
 800a4b6:	2103      	movs	r1, #3
 800a4b8:	ab03      	add	r3, sp, #12
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	ab02      	add	r3, sp, #8
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	ec47 6b10 	vmov	d0, r6, r7
 800a4c4:	4653      	mov	r3, sl
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	f000 fff2 	bl	800b4b0 <_dtoa_r>
 800a4cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	d119      	bne.n	800a508 <__cvt+0x94>
 800a4d4:	f019 0f01 	tst.w	r9, #1
 800a4d8:	d00e      	beq.n	800a4f8 <__cvt+0x84>
 800a4da:	eb00 0904 	add.w	r9, r0, r4
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	4639      	mov	r1, r7
 800a4e6:	f7f6 fb9f 	bl	8000c28 <__aeabi_dcmpeq>
 800a4ea:	b108      	cbz	r0, 800a4f0 <__cvt+0x7c>
 800a4ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4f0:	2230      	movs	r2, #48	@ 0x30
 800a4f2:	9b03      	ldr	r3, [sp, #12]
 800a4f4:	454b      	cmp	r3, r9
 800a4f6:	d31e      	bcc.n	800a536 <__cvt+0xc2>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4fc:	1b5b      	subs	r3, r3, r5
 800a4fe:	4628      	mov	r0, r5
 800a500:	6013      	str	r3, [r2, #0]
 800a502:	b004      	add	sp, #16
 800a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a508:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a50c:	eb00 0904 	add.w	r9, r0, r4
 800a510:	d1e5      	bne.n	800a4de <__cvt+0x6a>
 800a512:	7803      	ldrb	r3, [r0, #0]
 800a514:	2b30      	cmp	r3, #48	@ 0x30
 800a516:	d10a      	bne.n	800a52e <__cvt+0xba>
 800a518:	2200      	movs	r2, #0
 800a51a:	2300      	movs	r3, #0
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f6 fb82 	bl	8000c28 <__aeabi_dcmpeq>
 800a524:	b918      	cbnz	r0, 800a52e <__cvt+0xba>
 800a526:	f1c4 0401 	rsb	r4, r4, #1
 800a52a:	f8ca 4000 	str.w	r4, [sl]
 800a52e:	f8da 3000 	ldr.w	r3, [sl]
 800a532:	4499      	add	r9, r3
 800a534:	e7d3      	b.n	800a4de <__cvt+0x6a>
 800a536:	1c59      	adds	r1, r3, #1
 800a538:	9103      	str	r1, [sp, #12]
 800a53a:	701a      	strb	r2, [r3, #0]
 800a53c:	e7d9      	b.n	800a4f2 <__cvt+0x7e>

0800a53e <__exponent>:
 800a53e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a540:	2900      	cmp	r1, #0
 800a542:	bfba      	itte	lt
 800a544:	4249      	neglt	r1, r1
 800a546:	232d      	movlt	r3, #45	@ 0x2d
 800a548:	232b      	movge	r3, #43	@ 0x2b
 800a54a:	2909      	cmp	r1, #9
 800a54c:	7002      	strb	r2, [r0, #0]
 800a54e:	7043      	strb	r3, [r0, #1]
 800a550:	dd29      	ble.n	800a5a6 <__exponent+0x68>
 800a552:	f10d 0307 	add.w	r3, sp, #7
 800a556:	461d      	mov	r5, r3
 800a558:	270a      	movs	r7, #10
 800a55a:	461a      	mov	r2, r3
 800a55c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a560:	fb07 1416 	mls	r4, r7, r6, r1
 800a564:	3430      	adds	r4, #48	@ 0x30
 800a566:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a56a:	460c      	mov	r4, r1
 800a56c:	2c63      	cmp	r4, #99	@ 0x63
 800a56e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a572:	4631      	mov	r1, r6
 800a574:	dcf1      	bgt.n	800a55a <__exponent+0x1c>
 800a576:	3130      	adds	r1, #48	@ 0x30
 800a578:	1e94      	subs	r4, r2, #2
 800a57a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a57e:	1c41      	adds	r1, r0, #1
 800a580:	4623      	mov	r3, r4
 800a582:	42ab      	cmp	r3, r5
 800a584:	d30a      	bcc.n	800a59c <__exponent+0x5e>
 800a586:	f10d 0309 	add.w	r3, sp, #9
 800a58a:	1a9b      	subs	r3, r3, r2
 800a58c:	42ac      	cmp	r4, r5
 800a58e:	bf88      	it	hi
 800a590:	2300      	movhi	r3, #0
 800a592:	3302      	adds	r3, #2
 800a594:	4403      	add	r3, r0
 800a596:	1a18      	subs	r0, r3, r0
 800a598:	b003      	add	sp, #12
 800a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a5a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a5a4:	e7ed      	b.n	800a582 <__exponent+0x44>
 800a5a6:	2330      	movs	r3, #48	@ 0x30
 800a5a8:	3130      	adds	r1, #48	@ 0x30
 800a5aa:	7083      	strb	r3, [r0, #2]
 800a5ac:	70c1      	strb	r1, [r0, #3]
 800a5ae:	1d03      	adds	r3, r0, #4
 800a5b0:	e7f1      	b.n	800a596 <__exponent+0x58>
	...

0800a5b4 <_printf_float>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	b08d      	sub	sp, #52	@ 0x34
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a5c0:	4616      	mov	r6, r2
 800a5c2:	461f      	mov	r7, r3
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	f000 fe73 	bl	800b2b0 <_localeconv_r>
 800a5ca:	6803      	ldr	r3, [r0, #0]
 800a5cc:	9304      	str	r3, [sp, #16]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7f5 fefe 	bl	80003d0 <strlen>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5dc:	9005      	str	r0, [sp, #20]
 800a5de:	3307      	adds	r3, #7
 800a5e0:	f023 0307 	bic.w	r3, r3, #7
 800a5e4:	f103 0208 	add.w	r2, r3, #8
 800a5e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a5ec:	f8d4 b000 	ldr.w	fp, [r4]
 800a5f0:	f8c8 2000 	str.w	r2, [r8]
 800a5f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5fc:	9307      	str	r3, [sp, #28]
 800a5fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800a602:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a60a:	4b9c      	ldr	r3, [pc, #624]	@ (800a87c <_printf_float+0x2c8>)
 800a60c:	f04f 32ff 	mov.w	r2, #4294967295
 800a610:	f7f6 fb3c 	bl	8000c8c <__aeabi_dcmpun>
 800a614:	bb70      	cbnz	r0, 800a674 <_printf_float+0xc0>
 800a616:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a61a:	4b98      	ldr	r3, [pc, #608]	@ (800a87c <_printf_float+0x2c8>)
 800a61c:	f04f 32ff 	mov.w	r2, #4294967295
 800a620:	f7f6 fb16 	bl	8000c50 <__aeabi_dcmple>
 800a624:	bb30      	cbnz	r0, 800a674 <_printf_float+0xc0>
 800a626:	2200      	movs	r2, #0
 800a628:	2300      	movs	r3, #0
 800a62a:	4640      	mov	r0, r8
 800a62c:	4649      	mov	r1, r9
 800a62e:	f7f6 fb05 	bl	8000c3c <__aeabi_dcmplt>
 800a632:	b110      	cbz	r0, 800a63a <_printf_float+0x86>
 800a634:	232d      	movs	r3, #45	@ 0x2d
 800a636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a63a:	4a91      	ldr	r2, [pc, #580]	@ (800a880 <_printf_float+0x2cc>)
 800a63c:	4b91      	ldr	r3, [pc, #580]	@ (800a884 <_printf_float+0x2d0>)
 800a63e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a642:	bf94      	ite	ls
 800a644:	4690      	movls	r8, r2
 800a646:	4698      	movhi	r8, r3
 800a648:	2303      	movs	r3, #3
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	f02b 0304 	bic.w	r3, fp, #4
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	f04f 0900 	mov.w	r9, #0
 800a656:	9700      	str	r7, [sp, #0]
 800a658:	4633      	mov	r3, r6
 800a65a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a65c:	4621      	mov	r1, r4
 800a65e:	4628      	mov	r0, r5
 800a660:	f000 f9d2 	bl	800aa08 <_printf_common>
 800a664:	3001      	adds	r0, #1
 800a666:	f040 808d 	bne.w	800a784 <_printf_float+0x1d0>
 800a66a:	f04f 30ff 	mov.w	r0, #4294967295
 800a66e:	b00d      	add	sp, #52	@ 0x34
 800a670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a674:	4642      	mov	r2, r8
 800a676:	464b      	mov	r3, r9
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f6 fb06 	bl	8000c8c <__aeabi_dcmpun>
 800a680:	b140      	cbz	r0, 800a694 <_printf_float+0xe0>
 800a682:	464b      	mov	r3, r9
 800a684:	2b00      	cmp	r3, #0
 800a686:	bfbc      	itt	lt
 800a688:	232d      	movlt	r3, #45	@ 0x2d
 800a68a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a68e:	4a7e      	ldr	r2, [pc, #504]	@ (800a888 <_printf_float+0x2d4>)
 800a690:	4b7e      	ldr	r3, [pc, #504]	@ (800a88c <_printf_float+0x2d8>)
 800a692:	e7d4      	b.n	800a63e <_printf_float+0x8a>
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a69a:	9206      	str	r2, [sp, #24]
 800a69c:	1c5a      	adds	r2, r3, #1
 800a69e:	d13b      	bne.n	800a718 <_printf_float+0x164>
 800a6a0:	2306      	movs	r3, #6
 800a6a2:	6063      	str	r3, [r4, #4]
 800a6a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	6022      	str	r2, [r4, #0]
 800a6ac:	9303      	str	r3, [sp, #12]
 800a6ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800a6b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a6b4:	ab09      	add	r3, sp, #36	@ 0x24
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	ec49 8b10 	vmov	d0, r8, r9
 800a6be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	f7ff fed6 	bl	800a474 <__cvt>
 800a6c8:	9b06      	ldr	r3, [sp, #24]
 800a6ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6cc:	2b47      	cmp	r3, #71	@ 0x47
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	d129      	bne.n	800a726 <_printf_float+0x172>
 800a6d2:	1cc8      	adds	r0, r1, #3
 800a6d4:	db02      	blt.n	800a6dc <_printf_float+0x128>
 800a6d6:	6863      	ldr	r3, [r4, #4]
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	dd41      	ble.n	800a760 <_printf_float+0x1ac>
 800a6dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a6e0:	fa5f fa8a 	uxtb.w	sl, sl
 800a6e4:	3901      	subs	r1, #1
 800a6e6:	4652      	mov	r2, sl
 800a6e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a6ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800a6ee:	f7ff ff26 	bl	800a53e <__exponent>
 800a6f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6f4:	1813      	adds	r3, r2, r0
 800a6f6:	2a01      	cmp	r2, #1
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	6123      	str	r3, [r4, #16]
 800a6fc:	dc02      	bgt.n	800a704 <_printf_float+0x150>
 800a6fe:	6822      	ldr	r2, [r4, #0]
 800a700:	07d2      	lsls	r2, r2, #31
 800a702:	d501      	bpl.n	800a708 <_printf_float+0x154>
 800a704:	3301      	adds	r3, #1
 800a706:	6123      	str	r3, [r4, #16]
 800a708:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0a2      	beq.n	800a656 <_printf_float+0xa2>
 800a710:	232d      	movs	r3, #45	@ 0x2d
 800a712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a716:	e79e      	b.n	800a656 <_printf_float+0xa2>
 800a718:	9a06      	ldr	r2, [sp, #24]
 800a71a:	2a47      	cmp	r2, #71	@ 0x47
 800a71c:	d1c2      	bne.n	800a6a4 <_printf_float+0xf0>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1c0      	bne.n	800a6a4 <_printf_float+0xf0>
 800a722:	2301      	movs	r3, #1
 800a724:	e7bd      	b.n	800a6a2 <_printf_float+0xee>
 800a726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a72a:	d9db      	bls.n	800a6e4 <_printf_float+0x130>
 800a72c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a730:	d118      	bne.n	800a764 <_printf_float+0x1b0>
 800a732:	2900      	cmp	r1, #0
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	dd0b      	ble.n	800a750 <_printf_float+0x19c>
 800a738:	6121      	str	r1, [r4, #16]
 800a73a:	b913      	cbnz	r3, 800a742 <_printf_float+0x18e>
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	07d0      	lsls	r0, r2, #31
 800a740:	d502      	bpl.n	800a748 <_printf_float+0x194>
 800a742:	3301      	adds	r3, #1
 800a744:	440b      	add	r3, r1
 800a746:	6123      	str	r3, [r4, #16]
 800a748:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	e7db      	b.n	800a708 <_printf_float+0x154>
 800a750:	b913      	cbnz	r3, 800a758 <_printf_float+0x1a4>
 800a752:	6822      	ldr	r2, [r4, #0]
 800a754:	07d2      	lsls	r2, r2, #31
 800a756:	d501      	bpl.n	800a75c <_printf_float+0x1a8>
 800a758:	3302      	adds	r3, #2
 800a75a:	e7f4      	b.n	800a746 <_printf_float+0x192>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e7f2      	b.n	800a746 <_printf_float+0x192>
 800a760:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a766:	4299      	cmp	r1, r3
 800a768:	db05      	blt.n	800a776 <_printf_float+0x1c2>
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	6121      	str	r1, [r4, #16]
 800a76e:	07d8      	lsls	r0, r3, #31
 800a770:	d5ea      	bpl.n	800a748 <_printf_float+0x194>
 800a772:	1c4b      	adds	r3, r1, #1
 800a774:	e7e7      	b.n	800a746 <_printf_float+0x192>
 800a776:	2900      	cmp	r1, #0
 800a778:	bfd4      	ite	le
 800a77a:	f1c1 0202 	rsble	r2, r1, #2
 800a77e:	2201      	movgt	r2, #1
 800a780:	4413      	add	r3, r2
 800a782:	e7e0      	b.n	800a746 <_printf_float+0x192>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	055a      	lsls	r2, r3, #21
 800a788:	d407      	bmi.n	800a79a <_printf_float+0x1e6>
 800a78a:	6923      	ldr	r3, [r4, #16]
 800a78c:	4642      	mov	r2, r8
 800a78e:	4631      	mov	r1, r6
 800a790:	4628      	mov	r0, r5
 800a792:	47b8      	blx	r7
 800a794:	3001      	adds	r0, #1
 800a796:	d12b      	bne.n	800a7f0 <_printf_float+0x23c>
 800a798:	e767      	b.n	800a66a <_printf_float+0xb6>
 800a79a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a79e:	f240 80dd 	bls.w	800a95c <_printf_float+0x3a8>
 800a7a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f7f6 fa3d 	bl	8000c28 <__aeabi_dcmpeq>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d033      	beq.n	800a81a <_printf_float+0x266>
 800a7b2:	4a37      	ldr	r2, [pc, #220]	@ (800a890 <_printf_float+0x2dc>)
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b8      	blx	r7
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f43f af54 	beq.w	800a66a <_printf_float+0xb6>
 800a7c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a7c6:	4543      	cmp	r3, r8
 800a7c8:	db02      	blt.n	800a7d0 <_printf_float+0x21c>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	07d8      	lsls	r0, r3, #31
 800a7ce:	d50f      	bpl.n	800a7f0 <_printf_float+0x23c>
 800a7d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7d4:	4631      	mov	r1, r6
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b8      	blx	r7
 800a7da:	3001      	adds	r0, #1
 800a7dc:	f43f af45 	beq.w	800a66a <_printf_float+0xb6>
 800a7e0:	f04f 0900 	mov.w	r9, #0
 800a7e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7e8:	f104 0a1a 	add.w	sl, r4, #26
 800a7ec:	45c8      	cmp	r8, r9
 800a7ee:	dc09      	bgt.n	800a804 <_printf_float+0x250>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	079b      	lsls	r3, r3, #30
 800a7f4:	f100 8103 	bmi.w	800a9fe <_printf_float+0x44a>
 800a7f8:	68e0      	ldr	r0, [r4, #12]
 800a7fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	bfb8      	it	lt
 800a800:	4618      	movlt	r0, r3
 800a802:	e734      	b.n	800a66e <_printf_float+0xba>
 800a804:	2301      	movs	r3, #1
 800a806:	4652      	mov	r2, sl
 800a808:	4631      	mov	r1, r6
 800a80a:	4628      	mov	r0, r5
 800a80c:	47b8      	blx	r7
 800a80e:	3001      	adds	r0, #1
 800a810:	f43f af2b 	beq.w	800a66a <_printf_float+0xb6>
 800a814:	f109 0901 	add.w	r9, r9, #1
 800a818:	e7e8      	b.n	800a7ec <_printf_float+0x238>
 800a81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc39      	bgt.n	800a894 <_printf_float+0x2e0>
 800a820:	4a1b      	ldr	r2, [pc, #108]	@ (800a890 <_printf_float+0x2dc>)
 800a822:	2301      	movs	r3, #1
 800a824:	4631      	mov	r1, r6
 800a826:	4628      	mov	r0, r5
 800a828:	47b8      	blx	r7
 800a82a:	3001      	adds	r0, #1
 800a82c:	f43f af1d 	beq.w	800a66a <_printf_float+0xb6>
 800a830:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a834:	ea59 0303 	orrs.w	r3, r9, r3
 800a838:	d102      	bne.n	800a840 <_printf_float+0x28c>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	07d9      	lsls	r1, r3, #31
 800a83e:	d5d7      	bpl.n	800a7f0 <_printf_float+0x23c>
 800a840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f af0d 	beq.w	800a66a <_printf_float+0xb6>
 800a850:	f04f 0a00 	mov.w	sl, #0
 800a854:	f104 0b1a 	add.w	fp, r4, #26
 800a858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a85a:	425b      	negs	r3, r3
 800a85c:	4553      	cmp	r3, sl
 800a85e:	dc01      	bgt.n	800a864 <_printf_float+0x2b0>
 800a860:	464b      	mov	r3, r9
 800a862:	e793      	b.n	800a78c <_printf_float+0x1d8>
 800a864:	2301      	movs	r3, #1
 800a866:	465a      	mov	r2, fp
 800a868:	4631      	mov	r1, r6
 800a86a:	4628      	mov	r0, r5
 800a86c:	47b8      	blx	r7
 800a86e:	3001      	adds	r0, #1
 800a870:	f43f aefb 	beq.w	800a66a <_printf_float+0xb6>
 800a874:	f10a 0a01 	add.w	sl, sl, #1
 800a878:	e7ee      	b.n	800a858 <_printf_float+0x2a4>
 800a87a:	bf00      	nop
 800a87c:	7fefffff 	.word	0x7fefffff
 800a880:	0800d3f1 	.word	0x0800d3f1
 800a884:	0800d3f5 	.word	0x0800d3f5
 800a888:	0800d3f9 	.word	0x0800d3f9
 800a88c:	0800d3fd 	.word	0x0800d3fd
 800a890:	0800d401 	.word	0x0800d401
 800a894:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a896:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a89a:	4553      	cmp	r3, sl
 800a89c:	bfa8      	it	ge
 800a89e:	4653      	movge	r3, sl
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	4699      	mov	r9, r3
 800a8a4:	dc36      	bgt.n	800a914 <_printf_float+0x360>
 800a8a6:	f04f 0b00 	mov.w	fp, #0
 800a8aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ae:	f104 021a 	add.w	r2, r4, #26
 800a8b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a8b4:	9306      	str	r3, [sp, #24]
 800a8b6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ba:	455b      	cmp	r3, fp
 800a8bc:	dc31      	bgt.n	800a922 <_printf_float+0x36e>
 800a8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c0:	459a      	cmp	sl, r3
 800a8c2:	dc3a      	bgt.n	800a93a <_printf_float+0x386>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	07da      	lsls	r2, r3, #31
 800a8c8:	d437      	bmi.n	800a93a <_printf_float+0x386>
 800a8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8cc:	ebaa 0903 	sub.w	r9, sl, r3
 800a8d0:	9b06      	ldr	r3, [sp, #24]
 800a8d2:	ebaa 0303 	sub.w	r3, sl, r3
 800a8d6:	4599      	cmp	r9, r3
 800a8d8:	bfa8      	it	ge
 800a8da:	4699      	movge	r9, r3
 800a8dc:	f1b9 0f00 	cmp.w	r9, #0
 800a8e0:	dc33      	bgt.n	800a94a <_printf_float+0x396>
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8ea:	f104 0b1a 	add.w	fp, r4, #26
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	ebaa 0303 	sub.w	r3, sl, r3
 800a8f4:	eba3 0309 	sub.w	r3, r3, r9
 800a8f8:	4543      	cmp	r3, r8
 800a8fa:	f77f af79 	ble.w	800a7f0 <_printf_float+0x23c>
 800a8fe:	2301      	movs	r3, #1
 800a900:	465a      	mov	r2, fp
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	47b8      	blx	r7
 800a908:	3001      	adds	r0, #1
 800a90a:	f43f aeae 	beq.w	800a66a <_printf_float+0xb6>
 800a90e:	f108 0801 	add.w	r8, r8, #1
 800a912:	e7ec      	b.n	800a8ee <_printf_float+0x33a>
 800a914:	4642      	mov	r2, r8
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	d1c2      	bne.n	800a8a6 <_printf_float+0x2f2>
 800a920:	e6a3      	b.n	800a66a <_printf_float+0xb6>
 800a922:	2301      	movs	r3, #1
 800a924:	4631      	mov	r1, r6
 800a926:	4628      	mov	r0, r5
 800a928:	9206      	str	r2, [sp, #24]
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	f43f ae9c 	beq.w	800a66a <_printf_float+0xb6>
 800a932:	9a06      	ldr	r2, [sp, #24]
 800a934:	f10b 0b01 	add.w	fp, fp, #1
 800a938:	e7bb      	b.n	800a8b2 <_printf_float+0x2fe>
 800a93a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93e:	4631      	mov	r1, r6
 800a940:	4628      	mov	r0, r5
 800a942:	47b8      	blx	r7
 800a944:	3001      	adds	r0, #1
 800a946:	d1c0      	bne.n	800a8ca <_printf_float+0x316>
 800a948:	e68f      	b.n	800a66a <_printf_float+0xb6>
 800a94a:	9a06      	ldr	r2, [sp, #24]
 800a94c:	464b      	mov	r3, r9
 800a94e:	4442      	add	r2, r8
 800a950:	4631      	mov	r1, r6
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	d1c3      	bne.n	800a8e2 <_printf_float+0x32e>
 800a95a:	e686      	b.n	800a66a <_printf_float+0xb6>
 800a95c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a960:	f1ba 0f01 	cmp.w	sl, #1
 800a964:	dc01      	bgt.n	800a96a <_printf_float+0x3b6>
 800a966:	07db      	lsls	r3, r3, #31
 800a968:	d536      	bpl.n	800a9d8 <_printf_float+0x424>
 800a96a:	2301      	movs	r3, #1
 800a96c:	4642      	mov	r2, r8
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	f43f ae78 	beq.w	800a66a <_printf_float+0xb6>
 800a97a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a97e:	4631      	mov	r1, r6
 800a980:	4628      	mov	r0, r5
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	f43f ae70 	beq.w	800a66a <_printf_float+0xb6>
 800a98a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a98e:	2200      	movs	r2, #0
 800a990:	2300      	movs	r3, #0
 800a992:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a996:	f7f6 f947 	bl	8000c28 <__aeabi_dcmpeq>
 800a99a:	b9c0      	cbnz	r0, 800a9ce <_printf_float+0x41a>
 800a99c:	4653      	mov	r3, sl
 800a99e:	f108 0201 	add.w	r2, r8, #1
 800a9a2:	4631      	mov	r1, r6
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	47b8      	blx	r7
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	d10c      	bne.n	800a9c6 <_printf_float+0x412>
 800a9ac:	e65d      	b.n	800a66a <_printf_float+0xb6>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	465a      	mov	r2, fp
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	f43f ae56 	beq.w	800a66a <_printf_float+0xb6>
 800a9be:	f108 0801 	add.w	r8, r8, #1
 800a9c2:	45d0      	cmp	r8, sl
 800a9c4:	dbf3      	blt.n	800a9ae <_printf_float+0x3fa>
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a9cc:	e6df      	b.n	800a78e <_printf_float+0x1da>
 800a9ce:	f04f 0800 	mov.w	r8, #0
 800a9d2:	f104 0b1a 	add.w	fp, r4, #26
 800a9d6:	e7f4      	b.n	800a9c2 <_printf_float+0x40e>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	4642      	mov	r2, r8
 800a9dc:	e7e1      	b.n	800a9a2 <_printf_float+0x3ee>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	464a      	mov	r2, r9
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	47b8      	blx	r7
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	f43f ae3e 	beq.w	800a66a <_printf_float+0xb6>
 800a9ee:	f108 0801 	add.w	r8, r8, #1
 800a9f2:	68e3      	ldr	r3, [r4, #12]
 800a9f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9f6:	1a5b      	subs	r3, r3, r1
 800a9f8:	4543      	cmp	r3, r8
 800a9fa:	dcf0      	bgt.n	800a9de <_printf_float+0x42a>
 800a9fc:	e6fc      	b.n	800a7f8 <_printf_float+0x244>
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f104 0919 	add.w	r9, r4, #25
 800aa06:	e7f4      	b.n	800a9f2 <_printf_float+0x43e>

0800aa08 <_printf_common>:
 800aa08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	4616      	mov	r6, r2
 800aa0e:	4698      	mov	r8, r3
 800aa10:	688a      	ldr	r2, [r1, #8]
 800aa12:	690b      	ldr	r3, [r1, #16]
 800aa14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	bfb8      	it	lt
 800aa1c:	4613      	movlt	r3, r2
 800aa1e:	6033      	str	r3, [r6, #0]
 800aa20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa24:	4607      	mov	r7, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	b10a      	cbz	r2, 800aa2e <_printf_common+0x26>
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	6033      	str	r3, [r6, #0]
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	0699      	lsls	r1, r3, #26
 800aa32:	bf42      	ittt	mi
 800aa34:	6833      	ldrmi	r3, [r6, #0]
 800aa36:	3302      	addmi	r3, #2
 800aa38:	6033      	strmi	r3, [r6, #0]
 800aa3a:	6825      	ldr	r5, [r4, #0]
 800aa3c:	f015 0506 	ands.w	r5, r5, #6
 800aa40:	d106      	bne.n	800aa50 <_printf_common+0x48>
 800aa42:	f104 0a19 	add.w	sl, r4, #25
 800aa46:	68e3      	ldr	r3, [r4, #12]
 800aa48:	6832      	ldr	r2, [r6, #0]
 800aa4a:	1a9b      	subs	r3, r3, r2
 800aa4c:	42ab      	cmp	r3, r5
 800aa4e:	dc26      	bgt.n	800aa9e <_printf_common+0x96>
 800aa50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa54:	6822      	ldr	r2, [r4, #0]
 800aa56:	3b00      	subs	r3, #0
 800aa58:	bf18      	it	ne
 800aa5a:	2301      	movne	r3, #1
 800aa5c:	0692      	lsls	r2, r2, #26
 800aa5e:	d42b      	bmi.n	800aab8 <_printf_common+0xb0>
 800aa60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa64:	4641      	mov	r1, r8
 800aa66:	4638      	mov	r0, r7
 800aa68:	47c8      	blx	r9
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d01e      	beq.n	800aaac <_printf_common+0xa4>
 800aa6e:	6823      	ldr	r3, [r4, #0]
 800aa70:	6922      	ldr	r2, [r4, #16]
 800aa72:	f003 0306 	and.w	r3, r3, #6
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	bf02      	ittt	eq
 800aa7a:	68e5      	ldreq	r5, [r4, #12]
 800aa7c:	6833      	ldreq	r3, [r6, #0]
 800aa7e:	1aed      	subeq	r5, r5, r3
 800aa80:	68a3      	ldr	r3, [r4, #8]
 800aa82:	bf0c      	ite	eq
 800aa84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa88:	2500      	movne	r5, #0
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	bfc4      	itt	gt
 800aa8e:	1a9b      	subgt	r3, r3, r2
 800aa90:	18ed      	addgt	r5, r5, r3
 800aa92:	2600      	movs	r6, #0
 800aa94:	341a      	adds	r4, #26
 800aa96:	42b5      	cmp	r5, r6
 800aa98:	d11a      	bne.n	800aad0 <_printf_common+0xc8>
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	e008      	b.n	800aab0 <_printf_common+0xa8>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4652      	mov	r2, sl
 800aaa2:	4641      	mov	r1, r8
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	47c8      	blx	r9
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d103      	bne.n	800aab4 <_printf_common+0xac>
 800aaac:	f04f 30ff 	mov.w	r0, #4294967295
 800aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab4:	3501      	adds	r5, #1
 800aab6:	e7c6      	b.n	800aa46 <_printf_common+0x3e>
 800aab8:	18e1      	adds	r1, r4, r3
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	2030      	movs	r0, #48	@ 0x30
 800aabe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aac2:	4422      	add	r2, r4
 800aac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aacc:	3302      	adds	r3, #2
 800aace:	e7c7      	b.n	800aa60 <_printf_common+0x58>
 800aad0:	2301      	movs	r3, #1
 800aad2:	4622      	mov	r2, r4
 800aad4:	4641      	mov	r1, r8
 800aad6:	4638      	mov	r0, r7
 800aad8:	47c8      	blx	r9
 800aada:	3001      	adds	r0, #1
 800aadc:	d0e6      	beq.n	800aaac <_printf_common+0xa4>
 800aade:	3601      	adds	r6, #1
 800aae0:	e7d9      	b.n	800aa96 <_printf_common+0x8e>
	...

0800aae4 <_printf_i>:
 800aae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae8:	7e0f      	ldrb	r7, [r1, #24]
 800aaea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aaec:	2f78      	cmp	r7, #120	@ 0x78
 800aaee:	4691      	mov	r9, r2
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	469a      	mov	sl, r3
 800aaf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aafa:	d807      	bhi.n	800ab0c <_printf_i+0x28>
 800aafc:	2f62      	cmp	r7, #98	@ 0x62
 800aafe:	d80a      	bhi.n	800ab16 <_printf_i+0x32>
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	f000 80d2 	beq.w	800acaa <_printf_i+0x1c6>
 800ab06:	2f58      	cmp	r7, #88	@ 0x58
 800ab08:	f000 80b9 	beq.w	800ac7e <_printf_i+0x19a>
 800ab0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab14:	e03a      	b.n	800ab8c <_printf_i+0xa8>
 800ab16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab1a:	2b15      	cmp	r3, #21
 800ab1c:	d8f6      	bhi.n	800ab0c <_printf_i+0x28>
 800ab1e:	a101      	add	r1, pc, #4	@ (adr r1, 800ab24 <_printf_i+0x40>)
 800ab20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab24:	0800ab7d 	.word	0x0800ab7d
 800ab28:	0800ab91 	.word	0x0800ab91
 800ab2c:	0800ab0d 	.word	0x0800ab0d
 800ab30:	0800ab0d 	.word	0x0800ab0d
 800ab34:	0800ab0d 	.word	0x0800ab0d
 800ab38:	0800ab0d 	.word	0x0800ab0d
 800ab3c:	0800ab91 	.word	0x0800ab91
 800ab40:	0800ab0d 	.word	0x0800ab0d
 800ab44:	0800ab0d 	.word	0x0800ab0d
 800ab48:	0800ab0d 	.word	0x0800ab0d
 800ab4c:	0800ab0d 	.word	0x0800ab0d
 800ab50:	0800ac91 	.word	0x0800ac91
 800ab54:	0800abbb 	.word	0x0800abbb
 800ab58:	0800ac4b 	.word	0x0800ac4b
 800ab5c:	0800ab0d 	.word	0x0800ab0d
 800ab60:	0800ab0d 	.word	0x0800ab0d
 800ab64:	0800acb3 	.word	0x0800acb3
 800ab68:	0800ab0d 	.word	0x0800ab0d
 800ab6c:	0800abbb 	.word	0x0800abbb
 800ab70:	0800ab0d 	.word	0x0800ab0d
 800ab74:	0800ab0d 	.word	0x0800ab0d
 800ab78:	0800ac53 	.word	0x0800ac53
 800ab7c:	6833      	ldr	r3, [r6, #0]
 800ab7e:	1d1a      	adds	r2, r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6032      	str	r2, [r6, #0]
 800ab84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e09d      	b.n	800accc <_printf_i+0x1e8>
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	1d19      	adds	r1, r3, #4
 800ab96:	6031      	str	r1, [r6, #0]
 800ab98:	0606      	lsls	r6, r0, #24
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0xbc>
 800ab9c:	681d      	ldr	r5, [r3, #0]
 800ab9e:	e003      	b.n	800aba8 <_printf_i+0xc4>
 800aba0:	0645      	lsls	r5, r0, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0xb8>
 800aba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	da03      	bge.n	800abb4 <_printf_i+0xd0>
 800abac:	232d      	movs	r3, #45	@ 0x2d
 800abae:	426d      	negs	r5, r5
 800abb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abb4:	4859      	ldr	r0, [pc, #356]	@ (800ad1c <_printf_i+0x238>)
 800abb6:	230a      	movs	r3, #10
 800abb8:	e011      	b.n	800abde <_printf_i+0xfa>
 800abba:	6821      	ldr	r1, [r4, #0]
 800abbc:	6833      	ldr	r3, [r6, #0]
 800abbe:	0608      	lsls	r0, r1, #24
 800abc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800abc4:	d402      	bmi.n	800abcc <_printf_i+0xe8>
 800abc6:	0649      	lsls	r1, r1, #25
 800abc8:	bf48      	it	mi
 800abca:	b2ad      	uxthmi	r5, r5
 800abcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800abce:	4853      	ldr	r0, [pc, #332]	@ (800ad1c <_printf_i+0x238>)
 800abd0:	6033      	str	r3, [r6, #0]
 800abd2:	bf14      	ite	ne
 800abd4:	230a      	movne	r3, #10
 800abd6:	2308      	moveq	r3, #8
 800abd8:	2100      	movs	r1, #0
 800abda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abde:	6866      	ldr	r6, [r4, #4]
 800abe0:	60a6      	str	r6, [r4, #8]
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	bfa2      	ittt	ge
 800abe6:	6821      	ldrge	r1, [r4, #0]
 800abe8:	f021 0104 	bicge.w	r1, r1, #4
 800abec:	6021      	strge	r1, [r4, #0]
 800abee:	b90d      	cbnz	r5, 800abf4 <_printf_i+0x110>
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	d04b      	beq.n	800ac8c <_printf_i+0x1a8>
 800abf4:	4616      	mov	r6, r2
 800abf6:	fbb5 f1f3 	udiv	r1, r5, r3
 800abfa:	fb03 5711 	mls	r7, r3, r1, r5
 800abfe:	5dc7      	ldrb	r7, [r0, r7]
 800ac00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac04:	462f      	mov	r7, r5
 800ac06:	42bb      	cmp	r3, r7
 800ac08:	460d      	mov	r5, r1
 800ac0a:	d9f4      	bls.n	800abf6 <_printf_i+0x112>
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d10b      	bne.n	800ac28 <_printf_i+0x144>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	07df      	lsls	r7, r3, #31
 800ac14:	d508      	bpl.n	800ac28 <_printf_i+0x144>
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	4299      	cmp	r1, r3
 800ac1c:	bfde      	ittt	le
 800ac1e:	2330      	movle	r3, #48	@ 0x30
 800ac20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac28:	1b92      	subs	r2, r2, r6
 800ac2a:	6122      	str	r2, [r4, #16]
 800ac2c:	f8cd a000 	str.w	sl, [sp]
 800ac30:	464b      	mov	r3, r9
 800ac32:	aa03      	add	r2, sp, #12
 800ac34:	4621      	mov	r1, r4
 800ac36:	4640      	mov	r0, r8
 800ac38:	f7ff fee6 	bl	800aa08 <_printf_common>
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d14a      	bne.n	800acd6 <_printf_i+0x1f2>
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	b004      	add	sp, #16
 800ac46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	f043 0320 	orr.w	r3, r3, #32
 800ac50:	6023      	str	r3, [r4, #0]
 800ac52:	4833      	ldr	r0, [pc, #204]	@ (800ad20 <_printf_i+0x23c>)
 800ac54:	2778      	movs	r7, #120	@ 0x78
 800ac56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	6831      	ldr	r1, [r6, #0]
 800ac5e:	061f      	lsls	r7, r3, #24
 800ac60:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac64:	d402      	bmi.n	800ac6c <_printf_i+0x188>
 800ac66:	065f      	lsls	r7, r3, #25
 800ac68:	bf48      	it	mi
 800ac6a:	b2ad      	uxthmi	r5, r5
 800ac6c:	6031      	str	r1, [r6, #0]
 800ac6e:	07d9      	lsls	r1, r3, #31
 800ac70:	bf44      	itt	mi
 800ac72:	f043 0320 	orrmi.w	r3, r3, #32
 800ac76:	6023      	strmi	r3, [r4, #0]
 800ac78:	b11d      	cbz	r5, 800ac82 <_printf_i+0x19e>
 800ac7a:	2310      	movs	r3, #16
 800ac7c:	e7ac      	b.n	800abd8 <_printf_i+0xf4>
 800ac7e:	4827      	ldr	r0, [pc, #156]	@ (800ad1c <_printf_i+0x238>)
 800ac80:	e7e9      	b.n	800ac56 <_printf_i+0x172>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	f023 0320 	bic.w	r3, r3, #32
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	e7f6      	b.n	800ac7a <_printf_i+0x196>
 800ac8c:	4616      	mov	r6, r2
 800ac8e:	e7bd      	b.n	800ac0c <_printf_i+0x128>
 800ac90:	6833      	ldr	r3, [r6, #0]
 800ac92:	6825      	ldr	r5, [r4, #0]
 800ac94:	6961      	ldr	r1, [r4, #20]
 800ac96:	1d18      	adds	r0, r3, #4
 800ac98:	6030      	str	r0, [r6, #0]
 800ac9a:	062e      	lsls	r6, r5, #24
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0x1c0>
 800aca0:	6019      	str	r1, [r3, #0]
 800aca2:	e002      	b.n	800acaa <_printf_i+0x1c6>
 800aca4:	0668      	lsls	r0, r5, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0x1bc>
 800aca8:	8019      	strh	r1, [r3, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	4616      	mov	r6, r2
 800acb0:	e7bc      	b.n	800ac2c <_printf_i+0x148>
 800acb2:	6833      	ldr	r3, [r6, #0]
 800acb4:	1d1a      	adds	r2, r3, #4
 800acb6:	6032      	str	r2, [r6, #0]
 800acb8:	681e      	ldr	r6, [r3, #0]
 800acba:	6862      	ldr	r2, [r4, #4]
 800acbc:	2100      	movs	r1, #0
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7f5 fb36 	bl	8000330 <memchr>
 800acc4:	b108      	cbz	r0, 800acca <_printf_i+0x1e6>
 800acc6:	1b80      	subs	r0, r0, r6
 800acc8:	6060      	str	r0, [r4, #4]
 800acca:	6863      	ldr	r3, [r4, #4]
 800accc:	6123      	str	r3, [r4, #16]
 800acce:	2300      	movs	r3, #0
 800acd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acd4:	e7aa      	b.n	800ac2c <_printf_i+0x148>
 800acd6:	6923      	ldr	r3, [r4, #16]
 800acd8:	4632      	mov	r2, r6
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d0ad      	beq.n	800ac40 <_printf_i+0x15c>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	079b      	lsls	r3, r3, #30
 800ace8:	d413      	bmi.n	800ad12 <_printf_i+0x22e>
 800acea:	68e0      	ldr	r0, [r4, #12]
 800acec:	9b03      	ldr	r3, [sp, #12]
 800acee:	4298      	cmp	r0, r3
 800acf0:	bfb8      	it	lt
 800acf2:	4618      	movlt	r0, r3
 800acf4:	e7a6      	b.n	800ac44 <_printf_i+0x160>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4632      	mov	r2, r6
 800acfa:	4649      	mov	r1, r9
 800acfc:	4640      	mov	r0, r8
 800acfe:	47d0      	blx	sl
 800ad00:	3001      	adds	r0, #1
 800ad02:	d09d      	beq.n	800ac40 <_printf_i+0x15c>
 800ad04:	3501      	adds	r5, #1
 800ad06:	68e3      	ldr	r3, [r4, #12]
 800ad08:	9903      	ldr	r1, [sp, #12]
 800ad0a:	1a5b      	subs	r3, r3, r1
 800ad0c:	42ab      	cmp	r3, r5
 800ad0e:	dcf2      	bgt.n	800acf6 <_printf_i+0x212>
 800ad10:	e7eb      	b.n	800acea <_printf_i+0x206>
 800ad12:	2500      	movs	r5, #0
 800ad14:	f104 0619 	add.w	r6, r4, #25
 800ad18:	e7f5      	b.n	800ad06 <_printf_i+0x222>
 800ad1a:	bf00      	nop
 800ad1c:	0800d403 	.word	0x0800d403
 800ad20:	0800d414 	.word	0x0800d414

0800ad24 <std>:
 800ad24:	2300      	movs	r3, #0
 800ad26:	b510      	push	{r4, lr}
 800ad28:	4604      	mov	r4, r0
 800ad2a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad32:	6083      	str	r3, [r0, #8]
 800ad34:	8181      	strh	r1, [r0, #12]
 800ad36:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad38:	81c2      	strh	r2, [r0, #14]
 800ad3a:	6183      	str	r3, [r0, #24]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	2208      	movs	r2, #8
 800ad40:	305c      	adds	r0, #92	@ 0x5c
 800ad42:	f000 faad 	bl	800b2a0 <memset>
 800ad46:	4b0d      	ldr	r3, [pc, #52]	@ (800ad7c <std+0x58>)
 800ad48:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad80 <std+0x5c>)
 800ad4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad84 <std+0x60>)
 800ad50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad52:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <std+0x64>)
 800ad54:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad56:	4b0d      	ldr	r3, [pc, #52]	@ (800ad8c <std+0x68>)
 800ad58:	6224      	str	r4, [r4, #32]
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	d006      	beq.n	800ad6c <std+0x48>
 800ad5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad62:	4294      	cmp	r4, r2
 800ad64:	d002      	beq.n	800ad6c <std+0x48>
 800ad66:	33d0      	adds	r3, #208	@ 0xd0
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	d105      	bne.n	800ad78 <std+0x54>
 800ad6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad74:	f000 bb10 	b.w	800b398 <__retarget_lock_init_recursive>
 800ad78:	bd10      	pop	{r4, pc}
 800ad7a:	bf00      	nop
 800ad7c:	0800b0f1 	.word	0x0800b0f1
 800ad80:	0800b113 	.word	0x0800b113
 800ad84:	0800b14b 	.word	0x0800b14b
 800ad88:	0800b16f 	.word	0x0800b16f
 800ad8c:	20007b88 	.word	0x20007b88

0800ad90 <stdio_exit_handler>:
 800ad90:	4a02      	ldr	r2, [pc, #8]	@ (800ad9c <stdio_exit_handler+0xc>)
 800ad92:	4903      	ldr	r1, [pc, #12]	@ (800ada0 <stdio_exit_handler+0x10>)
 800ad94:	4803      	ldr	r0, [pc, #12]	@ (800ada4 <stdio_exit_handler+0x14>)
 800ad96:	f000 b869 	b.w	800ae6c <_fwalk_sglue>
 800ad9a:	bf00      	nop
 800ad9c:	2000000c 	.word	0x2000000c
 800ada0:	0800ccc9 	.word	0x0800ccc9
 800ada4:	2000001c 	.word	0x2000001c

0800ada8 <cleanup_stdio>:
 800ada8:	6841      	ldr	r1, [r0, #4]
 800adaa:	4b0c      	ldr	r3, [pc, #48]	@ (800addc <cleanup_stdio+0x34>)
 800adac:	4299      	cmp	r1, r3
 800adae:	b510      	push	{r4, lr}
 800adb0:	4604      	mov	r4, r0
 800adb2:	d001      	beq.n	800adb8 <cleanup_stdio+0x10>
 800adb4:	f001 ff88 	bl	800ccc8 <_fflush_r>
 800adb8:	68a1      	ldr	r1, [r4, #8]
 800adba:	4b09      	ldr	r3, [pc, #36]	@ (800ade0 <cleanup_stdio+0x38>)
 800adbc:	4299      	cmp	r1, r3
 800adbe:	d002      	beq.n	800adc6 <cleanup_stdio+0x1e>
 800adc0:	4620      	mov	r0, r4
 800adc2:	f001 ff81 	bl	800ccc8 <_fflush_r>
 800adc6:	68e1      	ldr	r1, [r4, #12]
 800adc8:	4b06      	ldr	r3, [pc, #24]	@ (800ade4 <cleanup_stdio+0x3c>)
 800adca:	4299      	cmp	r1, r3
 800adcc:	d004      	beq.n	800add8 <cleanup_stdio+0x30>
 800adce:	4620      	mov	r0, r4
 800add0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add4:	f001 bf78 	b.w	800ccc8 <_fflush_r>
 800add8:	bd10      	pop	{r4, pc}
 800adda:	bf00      	nop
 800addc:	20007b88 	.word	0x20007b88
 800ade0:	20007bf0 	.word	0x20007bf0
 800ade4:	20007c58 	.word	0x20007c58

0800ade8 <global_stdio_init.part.0>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4b0b      	ldr	r3, [pc, #44]	@ (800ae18 <global_stdio_init.part.0+0x30>)
 800adec:	4c0b      	ldr	r4, [pc, #44]	@ (800ae1c <global_stdio_init.part.0+0x34>)
 800adee:	4a0c      	ldr	r2, [pc, #48]	@ (800ae20 <global_stdio_init.part.0+0x38>)
 800adf0:	601a      	str	r2, [r3, #0]
 800adf2:	4620      	mov	r0, r4
 800adf4:	2200      	movs	r2, #0
 800adf6:	2104      	movs	r1, #4
 800adf8:	f7ff ff94 	bl	800ad24 <std>
 800adfc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ae00:	2201      	movs	r2, #1
 800ae02:	2109      	movs	r1, #9
 800ae04:	f7ff ff8e 	bl	800ad24 <std>
 800ae08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae12:	2112      	movs	r1, #18
 800ae14:	f7ff bf86 	b.w	800ad24 <std>
 800ae18:	20007cc0 	.word	0x20007cc0
 800ae1c:	20007b88 	.word	0x20007b88
 800ae20:	0800ad91 	.word	0x0800ad91

0800ae24 <__sfp_lock_acquire>:
 800ae24:	4801      	ldr	r0, [pc, #4]	@ (800ae2c <__sfp_lock_acquire+0x8>)
 800ae26:	f000 bab8 	b.w	800b39a <__retarget_lock_acquire_recursive>
 800ae2a:	bf00      	nop
 800ae2c:	20007cc9 	.word	0x20007cc9

0800ae30 <__sfp_lock_release>:
 800ae30:	4801      	ldr	r0, [pc, #4]	@ (800ae38 <__sfp_lock_release+0x8>)
 800ae32:	f000 bab3 	b.w	800b39c <__retarget_lock_release_recursive>
 800ae36:	bf00      	nop
 800ae38:	20007cc9 	.word	0x20007cc9

0800ae3c <__sinit>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	f7ff fff0 	bl	800ae24 <__sfp_lock_acquire>
 800ae44:	6a23      	ldr	r3, [r4, #32]
 800ae46:	b11b      	cbz	r3, 800ae50 <__sinit+0x14>
 800ae48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae4c:	f7ff bff0 	b.w	800ae30 <__sfp_lock_release>
 800ae50:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <__sinit+0x28>)
 800ae52:	6223      	str	r3, [r4, #32]
 800ae54:	4b04      	ldr	r3, [pc, #16]	@ (800ae68 <__sinit+0x2c>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f5      	bne.n	800ae48 <__sinit+0xc>
 800ae5c:	f7ff ffc4 	bl	800ade8 <global_stdio_init.part.0>
 800ae60:	e7f2      	b.n	800ae48 <__sinit+0xc>
 800ae62:	bf00      	nop
 800ae64:	0800ada9 	.word	0x0800ada9
 800ae68:	20007cc0 	.word	0x20007cc0

0800ae6c <_fwalk_sglue>:
 800ae6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	4607      	mov	r7, r0
 800ae72:	4688      	mov	r8, r1
 800ae74:	4614      	mov	r4, r2
 800ae76:	2600      	movs	r6, #0
 800ae78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ae80:	d505      	bpl.n	800ae8e <_fwalk_sglue+0x22>
 800ae82:	6824      	ldr	r4, [r4, #0]
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	d1f7      	bne.n	800ae78 <_fwalk_sglue+0xc>
 800ae88:	4630      	mov	r0, r6
 800ae8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d907      	bls.n	800aea4 <_fwalk_sglue+0x38>
 800ae94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	d003      	beq.n	800aea4 <_fwalk_sglue+0x38>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4638      	mov	r0, r7
 800aea0:	47c0      	blx	r8
 800aea2:	4306      	orrs	r6, r0
 800aea4:	3568      	adds	r5, #104	@ 0x68
 800aea6:	e7e9      	b.n	800ae7c <_fwalk_sglue+0x10>

0800aea8 <iprintf>:
 800aea8:	b40f      	push	{r0, r1, r2, r3}
 800aeaa:	b507      	push	{r0, r1, r2, lr}
 800aeac:	4906      	ldr	r1, [pc, #24]	@ (800aec8 <iprintf+0x20>)
 800aeae:	ab04      	add	r3, sp, #16
 800aeb0:	6808      	ldr	r0, [r1, #0]
 800aeb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb6:	6881      	ldr	r1, [r0, #8]
 800aeb8:	9301      	str	r3, [sp, #4]
 800aeba:	f001 fd69 	bl	800c990 <_vfiprintf_r>
 800aebe:	b003      	add	sp, #12
 800aec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aec4:	b004      	add	sp, #16
 800aec6:	4770      	bx	lr
 800aec8:	20000018 	.word	0x20000018

0800aecc <_puts_r>:
 800aecc:	6a03      	ldr	r3, [r0, #32]
 800aece:	b570      	push	{r4, r5, r6, lr}
 800aed0:	6884      	ldr	r4, [r0, #8]
 800aed2:	4605      	mov	r5, r0
 800aed4:	460e      	mov	r6, r1
 800aed6:	b90b      	cbnz	r3, 800aedc <_puts_r+0x10>
 800aed8:	f7ff ffb0 	bl	800ae3c <__sinit>
 800aedc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aede:	07db      	lsls	r3, r3, #31
 800aee0:	d405      	bmi.n	800aeee <_puts_r+0x22>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	0598      	lsls	r0, r3, #22
 800aee6:	d402      	bmi.n	800aeee <_puts_r+0x22>
 800aee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeea:	f000 fa56 	bl	800b39a <__retarget_lock_acquire_recursive>
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	0719      	lsls	r1, r3, #28
 800aef2:	d502      	bpl.n	800aefa <_puts_r+0x2e>
 800aef4:	6923      	ldr	r3, [r4, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d135      	bne.n	800af66 <_puts_r+0x9a>
 800aefa:	4621      	mov	r1, r4
 800aefc:	4628      	mov	r0, r5
 800aefe:	f000 f979 	bl	800b1f4 <__swsetup_r>
 800af02:	b380      	cbz	r0, 800af66 <_puts_r+0x9a>
 800af04:	f04f 35ff 	mov.w	r5, #4294967295
 800af08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af0a:	07da      	lsls	r2, r3, #31
 800af0c:	d405      	bmi.n	800af1a <_puts_r+0x4e>
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	059b      	lsls	r3, r3, #22
 800af12:	d402      	bmi.n	800af1a <_puts_r+0x4e>
 800af14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af16:	f000 fa41 	bl	800b39c <__retarget_lock_release_recursive>
 800af1a:	4628      	mov	r0, r5
 800af1c:	bd70      	pop	{r4, r5, r6, pc}
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da04      	bge.n	800af2c <_puts_r+0x60>
 800af22:	69a2      	ldr	r2, [r4, #24]
 800af24:	429a      	cmp	r2, r3
 800af26:	dc17      	bgt.n	800af58 <_puts_r+0x8c>
 800af28:	290a      	cmp	r1, #10
 800af2a:	d015      	beq.n	800af58 <_puts_r+0x8c>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	6022      	str	r2, [r4, #0]
 800af32:	7019      	strb	r1, [r3, #0]
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af3a:	3b01      	subs	r3, #1
 800af3c:	60a3      	str	r3, [r4, #8]
 800af3e:	2900      	cmp	r1, #0
 800af40:	d1ed      	bne.n	800af1e <_puts_r+0x52>
 800af42:	2b00      	cmp	r3, #0
 800af44:	da11      	bge.n	800af6a <_puts_r+0x9e>
 800af46:	4622      	mov	r2, r4
 800af48:	210a      	movs	r1, #10
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 f913 	bl	800b176 <__swbuf_r>
 800af50:	3001      	adds	r0, #1
 800af52:	d0d7      	beq.n	800af04 <_puts_r+0x38>
 800af54:	250a      	movs	r5, #10
 800af56:	e7d7      	b.n	800af08 <_puts_r+0x3c>
 800af58:	4622      	mov	r2, r4
 800af5a:	4628      	mov	r0, r5
 800af5c:	f000 f90b 	bl	800b176 <__swbuf_r>
 800af60:	3001      	adds	r0, #1
 800af62:	d1e7      	bne.n	800af34 <_puts_r+0x68>
 800af64:	e7ce      	b.n	800af04 <_puts_r+0x38>
 800af66:	3e01      	subs	r6, #1
 800af68:	e7e4      	b.n	800af34 <_puts_r+0x68>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	6022      	str	r2, [r4, #0]
 800af70:	220a      	movs	r2, #10
 800af72:	701a      	strb	r2, [r3, #0]
 800af74:	e7ee      	b.n	800af54 <_puts_r+0x88>
	...

0800af78 <puts>:
 800af78:	4b02      	ldr	r3, [pc, #8]	@ (800af84 <puts+0xc>)
 800af7a:	4601      	mov	r1, r0
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f7ff bfa5 	b.w	800aecc <_puts_r>
 800af82:	bf00      	nop
 800af84:	20000018 	.word	0x20000018

0800af88 <setvbuf>:
 800af88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af8c:	461d      	mov	r5, r3
 800af8e:	4b57      	ldr	r3, [pc, #348]	@ (800b0ec <setvbuf+0x164>)
 800af90:	681f      	ldr	r7, [r3, #0]
 800af92:	4604      	mov	r4, r0
 800af94:	460e      	mov	r6, r1
 800af96:	4690      	mov	r8, r2
 800af98:	b127      	cbz	r7, 800afa4 <setvbuf+0x1c>
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	b913      	cbnz	r3, 800afa4 <setvbuf+0x1c>
 800af9e:	4638      	mov	r0, r7
 800afa0:	f7ff ff4c 	bl	800ae3c <__sinit>
 800afa4:	f1b8 0f02 	cmp.w	r8, #2
 800afa8:	d006      	beq.n	800afb8 <setvbuf+0x30>
 800afaa:	f1b8 0f01 	cmp.w	r8, #1
 800afae:	f200 809a 	bhi.w	800b0e6 <setvbuf+0x15e>
 800afb2:	2d00      	cmp	r5, #0
 800afb4:	f2c0 8097 	blt.w	800b0e6 <setvbuf+0x15e>
 800afb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d405      	bmi.n	800afca <setvbuf+0x42>
 800afbe:	89a3      	ldrh	r3, [r4, #12]
 800afc0:	059a      	lsls	r2, r3, #22
 800afc2:	d402      	bmi.n	800afca <setvbuf+0x42>
 800afc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800afc6:	f000 f9e8 	bl	800b39a <__retarget_lock_acquire_recursive>
 800afca:	4621      	mov	r1, r4
 800afcc:	4638      	mov	r0, r7
 800afce:	f001 fe7b 	bl	800ccc8 <_fflush_r>
 800afd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afd4:	b141      	cbz	r1, 800afe8 <setvbuf+0x60>
 800afd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afda:	4299      	cmp	r1, r3
 800afdc:	d002      	beq.n	800afe4 <setvbuf+0x5c>
 800afde:	4638      	mov	r0, r7
 800afe0:	f001 f82a 	bl	800c038 <_free_r>
 800afe4:	2300      	movs	r3, #0
 800afe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800afe8:	2300      	movs	r3, #0
 800afea:	61a3      	str	r3, [r4, #24]
 800afec:	6063      	str	r3, [r4, #4]
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	061b      	lsls	r3, r3, #24
 800aff2:	d503      	bpl.n	800affc <setvbuf+0x74>
 800aff4:	6921      	ldr	r1, [r4, #16]
 800aff6:	4638      	mov	r0, r7
 800aff8:	f001 f81e 	bl	800c038 <_free_r>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b002:	f023 0303 	bic.w	r3, r3, #3
 800b006:	f1b8 0f02 	cmp.w	r8, #2
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	d061      	beq.n	800b0d2 <setvbuf+0x14a>
 800b00e:	ab01      	add	r3, sp, #4
 800b010:	466a      	mov	r2, sp
 800b012:	4621      	mov	r1, r4
 800b014:	4638      	mov	r0, r7
 800b016:	f001 fe7f 	bl	800cd18 <__swhatbuf_r>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	4318      	orrs	r0, r3
 800b01e:	81a0      	strh	r0, [r4, #12]
 800b020:	bb2d      	cbnz	r5, 800b06e <setvbuf+0xe6>
 800b022:	9d00      	ldr	r5, [sp, #0]
 800b024:	4628      	mov	r0, r5
 800b026:	f001 f851 	bl	800c0cc <malloc>
 800b02a:	4606      	mov	r6, r0
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d152      	bne.n	800b0d6 <setvbuf+0x14e>
 800b030:	f8dd 9000 	ldr.w	r9, [sp]
 800b034:	45a9      	cmp	r9, r5
 800b036:	d140      	bne.n	800b0ba <setvbuf+0x132>
 800b038:	f04f 35ff 	mov.w	r5, #4294967295
 800b03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b040:	f043 0202 	orr.w	r2, r3, #2
 800b044:	81a2      	strh	r2, [r4, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	60a2      	str	r2, [r4, #8]
 800b04a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b04e:	6022      	str	r2, [r4, #0]
 800b050:	6122      	str	r2, [r4, #16]
 800b052:	2201      	movs	r2, #1
 800b054:	6162      	str	r2, [r4, #20]
 800b056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b058:	07d6      	lsls	r6, r2, #31
 800b05a:	d404      	bmi.n	800b066 <setvbuf+0xde>
 800b05c:	0598      	lsls	r0, r3, #22
 800b05e:	d402      	bmi.n	800b066 <setvbuf+0xde>
 800b060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b062:	f000 f99b 	bl	800b39c <__retarget_lock_release_recursive>
 800b066:	4628      	mov	r0, r5
 800b068:	b003      	add	sp, #12
 800b06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b06e:	2e00      	cmp	r6, #0
 800b070:	d0d8      	beq.n	800b024 <setvbuf+0x9c>
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	b913      	cbnz	r3, 800b07c <setvbuf+0xf4>
 800b076:	4638      	mov	r0, r7
 800b078:	f7ff fee0 	bl	800ae3c <__sinit>
 800b07c:	f1b8 0f01 	cmp.w	r8, #1
 800b080:	bf08      	it	eq
 800b082:	89a3      	ldrheq	r3, [r4, #12]
 800b084:	6026      	str	r6, [r4, #0]
 800b086:	bf04      	itt	eq
 800b088:	f043 0301 	orreq.w	r3, r3, #1
 800b08c:	81a3      	strheq	r3, [r4, #12]
 800b08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b092:	f013 0208 	ands.w	r2, r3, #8
 800b096:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b09a:	d01e      	beq.n	800b0da <setvbuf+0x152>
 800b09c:	07d9      	lsls	r1, r3, #31
 800b09e:	bf41      	itttt	mi
 800b0a0:	2200      	movmi	r2, #0
 800b0a2:	426d      	negmi	r5, r5
 800b0a4:	60a2      	strmi	r2, [r4, #8]
 800b0a6:	61a5      	strmi	r5, [r4, #24]
 800b0a8:	bf58      	it	pl
 800b0aa:	60a5      	strpl	r5, [r4, #8]
 800b0ac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0ae:	07d2      	lsls	r2, r2, #31
 800b0b0:	d401      	bmi.n	800b0b6 <setvbuf+0x12e>
 800b0b2:	059b      	lsls	r3, r3, #22
 800b0b4:	d513      	bpl.n	800b0de <setvbuf+0x156>
 800b0b6:	2500      	movs	r5, #0
 800b0b8:	e7d5      	b.n	800b066 <setvbuf+0xde>
 800b0ba:	4648      	mov	r0, r9
 800b0bc:	f001 f806 	bl	800c0cc <malloc>
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d0b8      	beq.n	800b038 <setvbuf+0xb0>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	464d      	mov	r5, r9
 800b0d0:	e7cf      	b.n	800b072 <setvbuf+0xea>
 800b0d2:	2500      	movs	r5, #0
 800b0d4:	e7b2      	b.n	800b03c <setvbuf+0xb4>
 800b0d6:	46a9      	mov	r9, r5
 800b0d8:	e7f5      	b.n	800b0c6 <setvbuf+0x13e>
 800b0da:	60a2      	str	r2, [r4, #8]
 800b0dc:	e7e6      	b.n	800b0ac <setvbuf+0x124>
 800b0de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0e0:	f000 f95c 	bl	800b39c <__retarget_lock_release_recursive>
 800b0e4:	e7e7      	b.n	800b0b6 <setvbuf+0x12e>
 800b0e6:	f04f 35ff 	mov.w	r5, #4294967295
 800b0ea:	e7bc      	b.n	800b066 <setvbuf+0xde>
 800b0ec:	20000018 	.word	0x20000018

0800b0f0 <__sread>:
 800b0f0:	b510      	push	{r4, lr}
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f8:	f000 f900 	bl	800b2fc <_read_r>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	bfab      	itete	ge
 800b100:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b102:	89a3      	ldrhlt	r3, [r4, #12]
 800b104:	181b      	addge	r3, r3, r0
 800b106:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b10a:	bfac      	ite	ge
 800b10c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b10e:	81a3      	strhlt	r3, [r4, #12]
 800b110:	bd10      	pop	{r4, pc}

0800b112 <__swrite>:
 800b112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b116:	461f      	mov	r7, r3
 800b118:	898b      	ldrh	r3, [r1, #12]
 800b11a:	05db      	lsls	r3, r3, #23
 800b11c:	4605      	mov	r5, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	4616      	mov	r6, r2
 800b122:	d505      	bpl.n	800b130 <__swrite+0x1e>
 800b124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b128:	2302      	movs	r3, #2
 800b12a:	2200      	movs	r2, #0
 800b12c:	f000 f8d4 	bl	800b2d8 <_lseek_r>
 800b130:	89a3      	ldrh	r3, [r4, #12]
 800b132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b136:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	4632      	mov	r2, r6
 800b13e:	463b      	mov	r3, r7
 800b140:	4628      	mov	r0, r5
 800b142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b146:	f000 b8eb 	b.w	800b320 <_write_r>

0800b14a <__sseek>:
 800b14a:	b510      	push	{r4, lr}
 800b14c:	460c      	mov	r4, r1
 800b14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b152:	f000 f8c1 	bl	800b2d8 <_lseek_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	bf15      	itete	ne
 800b15c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b15e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b162:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b166:	81a3      	strheq	r3, [r4, #12]
 800b168:	bf18      	it	ne
 800b16a:	81a3      	strhne	r3, [r4, #12]
 800b16c:	bd10      	pop	{r4, pc}

0800b16e <__sclose>:
 800b16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b172:	f000 b8a1 	b.w	800b2b8 <_close_r>

0800b176 <__swbuf_r>:
 800b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b178:	460e      	mov	r6, r1
 800b17a:	4614      	mov	r4, r2
 800b17c:	4605      	mov	r5, r0
 800b17e:	b118      	cbz	r0, 800b188 <__swbuf_r+0x12>
 800b180:	6a03      	ldr	r3, [r0, #32]
 800b182:	b90b      	cbnz	r3, 800b188 <__swbuf_r+0x12>
 800b184:	f7ff fe5a 	bl	800ae3c <__sinit>
 800b188:	69a3      	ldr	r3, [r4, #24]
 800b18a:	60a3      	str	r3, [r4, #8]
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	071a      	lsls	r2, r3, #28
 800b190:	d501      	bpl.n	800b196 <__swbuf_r+0x20>
 800b192:	6923      	ldr	r3, [r4, #16]
 800b194:	b943      	cbnz	r3, 800b1a8 <__swbuf_r+0x32>
 800b196:	4621      	mov	r1, r4
 800b198:	4628      	mov	r0, r5
 800b19a:	f000 f82b 	bl	800b1f4 <__swsetup_r>
 800b19e:	b118      	cbz	r0, 800b1a8 <__swbuf_r+0x32>
 800b1a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b1a4:	4638      	mov	r0, r7
 800b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	6922      	ldr	r2, [r4, #16]
 800b1ac:	1a98      	subs	r0, r3, r2
 800b1ae:	6963      	ldr	r3, [r4, #20]
 800b1b0:	b2f6      	uxtb	r6, r6
 800b1b2:	4283      	cmp	r3, r0
 800b1b4:	4637      	mov	r7, r6
 800b1b6:	dc05      	bgt.n	800b1c4 <__swbuf_r+0x4e>
 800b1b8:	4621      	mov	r1, r4
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f001 fd84 	bl	800ccc8 <_fflush_r>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	d1ed      	bne.n	800b1a0 <__swbuf_r+0x2a>
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	60a3      	str	r3, [r4, #8]
 800b1ca:	6823      	ldr	r3, [r4, #0]
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	6022      	str	r2, [r4, #0]
 800b1d0:	701e      	strb	r6, [r3, #0]
 800b1d2:	6962      	ldr	r2, [r4, #20]
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d004      	beq.n	800b1e4 <__swbuf_r+0x6e>
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	07db      	lsls	r3, r3, #31
 800b1de:	d5e1      	bpl.n	800b1a4 <__swbuf_r+0x2e>
 800b1e0:	2e0a      	cmp	r6, #10
 800b1e2:	d1df      	bne.n	800b1a4 <__swbuf_r+0x2e>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f001 fd6e 	bl	800ccc8 <_fflush_r>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d0d9      	beq.n	800b1a4 <__swbuf_r+0x2e>
 800b1f0:	e7d6      	b.n	800b1a0 <__swbuf_r+0x2a>
	...

0800b1f4 <__swsetup_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4b29      	ldr	r3, [pc, #164]	@ (800b29c <__swsetup_r+0xa8>)
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	6818      	ldr	r0, [r3, #0]
 800b1fc:	460c      	mov	r4, r1
 800b1fe:	b118      	cbz	r0, 800b208 <__swsetup_r+0x14>
 800b200:	6a03      	ldr	r3, [r0, #32]
 800b202:	b90b      	cbnz	r3, 800b208 <__swsetup_r+0x14>
 800b204:	f7ff fe1a 	bl	800ae3c <__sinit>
 800b208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20c:	0719      	lsls	r1, r3, #28
 800b20e:	d422      	bmi.n	800b256 <__swsetup_r+0x62>
 800b210:	06da      	lsls	r2, r3, #27
 800b212:	d407      	bmi.n	800b224 <__swsetup_r+0x30>
 800b214:	2209      	movs	r2, #9
 800b216:	602a      	str	r2, [r5, #0]
 800b218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b21c:	81a3      	strh	r3, [r4, #12]
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	e033      	b.n	800b28c <__swsetup_r+0x98>
 800b224:	0758      	lsls	r0, r3, #29
 800b226:	d512      	bpl.n	800b24e <__swsetup_r+0x5a>
 800b228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b22a:	b141      	cbz	r1, 800b23e <__swsetup_r+0x4a>
 800b22c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b230:	4299      	cmp	r1, r3
 800b232:	d002      	beq.n	800b23a <__swsetup_r+0x46>
 800b234:	4628      	mov	r0, r5
 800b236:	f000 feff 	bl	800c038 <_free_r>
 800b23a:	2300      	movs	r3, #0
 800b23c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b244:	81a3      	strh	r3, [r4, #12]
 800b246:	2300      	movs	r3, #0
 800b248:	6063      	str	r3, [r4, #4]
 800b24a:	6923      	ldr	r3, [r4, #16]
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	f043 0308 	orr.w	r3, r3, #8
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	b94b      	cbnz	r3, 800b26e <__swsetup_r+0x7a>
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b264:	d003      	beq.n	800b26e <__swsetup_r+0x7a>
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	f001 fd7b 	bl	800cd64 <__smakebuf_r>
 800b26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b272:	f013 0201 	ands.w	r2, r3, #1
 800b276:	d00a      	beq.n	800b28e <__swsetup_r+0x9a>
 800b278:	2200      	movs	r2, #0
 800b27a:	60a2      	str	r2, [r4, #8]
 800b27c:	6962      	ldr	r2, [r4, #20]
 800b27e:	4252      	negs	r2, r2
 800b280:	61a2      	str	r2, [r4, #24]
 800b282:	6922      	ldr	r2, [r4, #16]
 800b284:	b942      	cbnz	r2, 800b298 <__swsetup_r+0xa4>
 800b286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b28a:	d1c5      	bne.n	800b218 <__swsetup_r+0x24>
 800b28c:	bd38      	pop	{r3, r4, r5, pc}
 800b28e:	0799      	lsls	r1, r3, #30
 800b290:	bf58      	it	pl
 800b292:	6962      	ldrpl	r2, [r4, #20]
 800b294:	60a2      	str	r2, [r4, #8]
 800b296:	e7f4      	b.n	800b282 <__swsetup_r+0x8e>
 800b298:	2000      	movs	r0, #0
 800b29a:	e7f7      	b.n	800b28c <__swsetup_r+0x98>
 800b29c:	20000018 	.word	0x20000018

0800b2a0 <memset>:
 800b2a0:	4402      	add	r2, r0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d100      	bne.n	800b2aa <memset+0xa>
 800b2a8:	4770      	bx	lr
 800b2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ae:	e7f9      	b.n	800b2a4 <memset+0x4>

0800b2b0 <_localeconv_r>:
 800b2b0:	4800      	ldr	r0, [pc, #0]	@ (800b2b4 <_localeconv_r+0x4>)
 800b2b2:	4770      	bx	lr
 800b2b4:	20000158 	.word	0x20000158

0800b2b8 <_close_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4d06      	ldr	r5, [pc, #24]	@ (800b2d4 <_close_r+0x1c>)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7f6 fb56 	bl	8001974 <_close>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_close_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_close_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	20007cc4 	.word	0x20007cc4

0800b2d8 <_lseek_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4d07      	ldr	r5, [pc, #28]	@ (800b2f8 <_lseek_r+0x20>)
 800b2dc:	4604      	mov	r4, r0
 800b2de:	4608      	mov	r0, r1
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	602a      	str	r2, [r5, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f7f6 fcd5 	bl	8001c96 <_lseek>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_lseek_r+0x1e>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_lseek_r+0x1e>
 800b2f4:	6023      	str	r3, [r4, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	20007cc4 	.word	0x20007cc4

0800b2fc <_read_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	@ (800b31c <_read_r+0x20>)
 800b300:	4604      	mov	r4, r0
 800b302:	4608      	mov	r0, r1
 800b304:	4611      	mov	r1, r2
 800b306:	2200      	movs	r2, #0
 800b308:	602a      	str	r2, [r5, #0]
 800b30a:	461a      	mov	r2, r3
 800b30c:	f7f6 fb4a 	bl	80019a4 <_read>
 800b310:	1c43      	adds	r3, r0, #1
 800b312:	d102      	bne.n	800b31a <_read_r+0x1e>
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	b103      	cbz	r3, 800b31a <_read_r+0x1e>
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	bd38      	pop	{r3, r4, r5, pc}
 800b31c:	20007cc4 	.word	0x20007cc4

0800b320 <_write_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d07      	ldr	r5, [pc, #28]	@ (800b340 <_write_r+0x20>)
 800b324:	4604      	mov	r4, r0
 800b326:	4608      	mov	r0, r1
 800b328:	4611      	mov	r1, r2
 800b32a:	2200      	movs	r2, #0
 800b32c:	602a      	str	r2, [r5, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	f7f6 faf4 	bl	800191c <_write>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d102      	bne.n	800b33e <_write_r+0x1e>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	b103      	cbz	r3, 800b33e <_write_r+0x1e>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	20007cc4 	.word	0x20007cc4

0800b344 <__errno>:
 800b344:	4b01      	ldr	r3, [pc, #4]	@ (800b34c <__errno+0x8>)
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	20000018 	.word	0x20000018

0800b350 <__libc_init_array>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	4d0d      	ldr	r5, [pc, #52]	@ (800b388 <__libc_init_array+0x38>)
 800b354:	4c0d      	ldr	r4, [pc, #52]	@ (800b38c <__libc_init_array+0x3c>)
 800b356:	1b64      	subs	r4, r4, r5
 800b358:	10a4      	asrs	r4, r4, #2
 800b35a:	2600      	movs	r6, #0
 800b35c:	42a6      	cmp	r6, r4
 800b35e:	d109      	bne.n	800b374 <__libc_init_array+0x24>
 800b360:	4d0b      	ldr	r5, [pc, #44]	@ (800b390 <__libc_init_array+0x40>)
 800b362:	4c0c      	ldr	r4, [pc, #48]	@ (800b394 <__libc_init_array+0x44>)
 800b364:	f001 fe4e 	bl	800d004 <_init>
 800b368:	1b64      	subs	r4, r4, r5
 800b36a:	10a4      	asrs	r4, r4, #2
 800b36c:	2600      	movs	r6, #0
 800b36e:	42a6      	cmp	r6, r4
 800b370:	d105      	bne.n	800b37e <__libc_init_array+0x2e>
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	f855 3b04 	ldr.w	r3, [r5], #4
 800b378:	4798      	blx	r3
 800b37a:	3601      	adds	r6, #1
 800b37c:	e7ee      	b.n	800b35c <__libc_init_array+0xc>
 800b37e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b382:	4798      	blx	r3
 800b384:	3601      	adds	r6, #1
 800b386:	e7f2      	b.n	800b36e <__libc_init_array+0x1e>
 800b388:	0800d668 	.word	0x0800d668
 800b38c:	0800d668 	.word	0x0800d668
 800b390:	0800d668 	.word	0x0800d668
 800b394:	0800d66c 	.word	0x0800d66c

0800b398 <__retarget_lock_init_recursive>:
 800b398:	4770      	bx	lr

0800b39a <__retarget_lock_acquire_recursive>:
 800b39a:	4770      	bx	lr

0800b39c <__retarget_lock_release_recursive>:
 800b39c:	4770      	bx	lr

0800b39e <quorem>:
 800b39e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a2:	6903      	ldr	r3, [r0, #16]
 800b3a4:	690c      	ldr	r4, [r1, #16]
 800b3a6:	42a3      	cmp	r3, r4
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	db7e      	blt.n	800b4aa <quorem+0x10c>
 800b3ac:	3c01      	subs	r4, #1
 800b3ae:	f101 0814 	add.w	r8, r1, #20
 800b3b2:	00a3      	lsls	r3, r4, #2
 800b3b4:	f100 0514 	add.w	r5, r0, #20
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3d4:	d32e      	bcc.n	800b434 <quorem+0x96>
 800b3d6:	f04f 0a00 	mov.w	sl, #0
 800b3da:	46c4      	mov	ip, r8
 800b3dc:	46ae      	mov	lr, r5
 800b3de:	46d3      	mov	fp, sl
 800b3e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b3e4:	b298      	uxth	r0, r3
 800b3e6:	fb06 a000 	mla	r0, r6, r0, sl
 800b3ea:	0c02      	lsrs	r2, r0, #16
 800b3ec:	0c1b      	lsrs	r3, r3, #16
 800b3ee:	fb06 2303 	mla	r3, r6, r3, r2
 800b3f2:	f8de 2000 	ldr.w	r2, [lr]
 800b3f6:	b280      	uxth	r0, r0
 800b3f8:	b292      	uxth	r2, r2
 800b3fa:	1a12      	subs	r2, r2, r0
 800b3fc:	445a      	add	r2, fp
 800b3fe:	f8de 0000 	ldr.w	r0, [lr]
 800b402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b406:	b29b      	uxth	r3, r3
 800b408:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b40c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b410:	b292      	uxth	r2, r2
 800b412:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b416:	45e1      	cmp	r9, ip
 800b418:	f84e 2b04 	str.w	r2, [lr], #4
 800b41c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b420:	d2de      	bcs.n	800b3e0 <quorem+0x42>
 800b422:	9b00      	ldr	r3, [sp, #0]
 800b424:	58eb      	ldr	r3, [r5, r3]
 800b426:	b92b      	cbnz	r3, 800b434 <quorem+0x96>
 800b428:	9b01      	ldr	r3, [sp, #4]
 800b42a:	3b04      	subs	r3, #4
 800b42c:	429d      	cmp	r5, r3
 800b42e:	461a      	mov	r2, r3
 800b430:	d32f      	bcc.n	800b492 <quorem+0xf4>
 800b432:	613c      	str	r4, [r7, #16]
 800b434:	4638      	mov	r0, r7
 800b436:	f001 f979 	bl	800c72c <__mcmp>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	db25      	blt.n	800b48a <quorem+0xec>
 800b43e:	4629      	mov	r1, r5
 800b440:	2000      	movs	r0, #0
 800b442:	f858 2b04 	ldr.w	r2, [r8], #4
 800b446:	f8d1 c000 	ldr.w	ip, [r1]
 800b44a:	fa1f fe82 	uxth.w	lr, r2
 800b44e:	fa1f f38c 	uxth.w	r3, ip
 800b452:	eba3 030e 	sub.w	r3, r3, lr
 800b456:	4403      	add	r3, r0
 800b458:	0c12      	lsrs	r2, r2, #16
 800b45a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b45e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b462:	b29b      	uxth	r3, r3
 800b464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b468:	45c1      	cmp	r9, r8
 800b46a:	f841 3b04 	str.w	r3, [r1], #4
 800b46e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b472:	d2e6      	bcs.n	800b442 <quorem+0xa4>
 800b474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b47c:	b922      	cbnz	r2, 800b488 <quorem+0xea>
 800b47e:	3b04      	subs	r3, #4
 800b480:	429d      	cmp	r5, r3
 800b482:	461a      	mov	r2, r3
 800b484:	d30b      	bcc.n	800b49e <quorem+0x100>
 800b486:	613c      	str	r4, [r7, #16]
 800b488:	3601      	adds	r6, #1
 800b48a:	4630      	mov	r0, r6
 800b48c:	b003      	add	sp, #12
 800b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b492:	6812      	ldr	r2, [r2, #0]
 800b494:	3b04      	subs	r3, #4
 800b496:	2a00      	cmp	r2, #0
 800b498:	d1cb      	bne.n	800b432 <quorem+0x94>
 800b49a:	3c01      	subs	r4, #1
 800b49c:	e7c6      	b.n	800b42c <quorem+0x8e>
 800b49e:	6812      	ldr	r2, [r2, #0]
 800b4a0:	3b04      	subs	r3, #4
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	d1ef      	bne.n	800b486 <quorem+0xe8>
 800b4a6:	3c01      	subs	r4, #1
 800b4a8:	e7ea      	b.n	800b480 <quorem+0xe2>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	e7ee      	b.n	800b48c <quorem+0xee>
	...

0800b4b0 <_dtoa_r>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	69c7      	ldr	r7, [r0, #28]
 800b4b6:	b099      	sub	sp, #100	@ 0x64
 800b4b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b4bc:	ec55 4b10 	vmov	r4, r5, d0
 800b4c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b4c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4c4:	4683      	mov	fp, r0
 800b4c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4ca:	b97f      	cbnz	r7, 800b4ec <_dtoa_r+0x3c>
 800b4cc:	2010      	movs	r0, #16
 800b4ce:	f000 fdfd 	bl	800c0cc <malloc>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800b4d8:	b920      	cbnz	r0, 800b4e4 <_dtoa_r+0x34>
 800b4da:	4ba7      	ldr	r3, [pc, #668]	@ (800b778 <_dtoa_r+0x2c8>)
 800b4dc:	21ef      	movs	r1, #239	@ 0xef
 800b4de:	48a7      	ldr	r0, [pc, #668]	@ (800b77c <_dtoa_r+0x2cc>)
 800b4e0:	f001 fcbc 	bl	800ce5c <__assert_func>
 800b4e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b4e8:	6007      	str	r7, [r0, #0]
 800b4ea:	60c7      	str	r7, [r0, #12]
 800b4ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4f0:	6819      	ldr	r1, [r3, #0]
 800b4f2:	b159      	cbz	r1, 800b50c <_dtoa_r+0x5c>
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	604a      	str	r2, [r1, #4]
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4093      	lsls	r3, r2
 800b4fc:	608b      	str	r3, [r1, #8]
 800b4fe:	4658      	mov	r0, fp
 800b500:	f000 feda 	bl	800c2b8 <_Bfree>
 800b504:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	1e2b      	subs	r3, r5, #0
 800b50e:	bfb9      	ittee	lt
 800b510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b514:	9303      	strlt	r3, [sp, #12]
 800b516:	2300      	movge	r3, #0
 800b518:	6033      	strge	r3, [r6, #0]
 800b51a:	9f03      	ldr	r7, [sp, #12]
 800b51c:	4b98      	ldr	r3, [pc, #608]	@ (800b780 <_dtoa_r+0x2d0>)
 800b51e:	bfbc      	itt	lt
 800b520:	2201      	movlt	r2, #1
 800b522:	6032      	strlt	r2, [r6, #0]
 800b524:	43bb      	bics	r3, r7
 800b526:	d112      	bne.n	800b54e <_dtoa_r+0x9e>
 800b528:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b52a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b52e:	6013      	str	r3, [r2, #0]
 800b530:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b534:	4323      	orrs	r3, r4
 800b536:	f000 854d 	beq.w	800bfd4 <_dtoa_r+0xb24>
 800b53a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b53c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b794 <_dtoa_r+0x2e4>
 800b540:	2b00      	cmp	r3, #0
 800b542:	f000 854f 	beq.w	800bfe4 <_dtoa_r+0xb34>
 800b546:	f10a 0303 	add.w	r3, sl, #3
 800b54a:	f000 bd49 	b.w	800bfe0 <_dtoa_r+0xb30>
 800b54e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b552:	2200      	movs	r2, #0
 800b554:	ec51 0b17 	vmov	r0, r1, d7
 800b558:	2300      	movs	r3, #0
 800b55a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b55e:	f7f5 fb63 	bl	8000c28 <__aeabi_dcmpeq>
 800b562:	4680      	mov	r8, r0
 800b564:	b158      	cbz	r0, 800b57e <_dtoa_r+0xce>
 800b566:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b568:	2301      	movs	r3, #1
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b56e:	b113      	cbz	r3, 800b576 <_dtoa_r+0xc6>
 800b570:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b572:	4b84      	ldr	r3, [pc, #528]	@ (800b784 <_dtoa_r+0x2d4>)
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b798 <_dtoa_r+0x2e8>
 800b57a:	f000 bd33 	b.w	800bfe4 <_dtoa_r+0xb34>
 800b57e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b582:	aa16      	add	r2, sp, #88	@ 0x58
 800b584:	a917      	add	r1, sp, #92	@ 0x5c
 800b586:	4658      	mov	r0, fp
 800b588:	f001 f980 	bl	800c88c <__d2b>
 800b58c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b590:	4681      	mov	r9, r0
 800b592:	2e00      	cmp	r6, #0
 800b594:	d077      	beq.n	800b686 <_dtoa_r+0x1d6>
 800b596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b598:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b5a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b5ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	4b74      	ldr	r3, [pc, #464]	@ (800b788 <_dtoa_r+0x2d8>)
 800b5b6:	f7f4 ff17 	bl	80003e8 <__aeabi_dsub>
 800b5ba:	a369      	add	r3, pc, #420	@ (adr r3, 800b760 <_dtoa_r+0x2b0>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f7f5 f8ca 	bl	8000758 <__aeabi_dmul>
 800b5c4:	a368      	add	r3, pc, #416	@ (adr r3, 800b768 <_dtoa_r+0x2b8>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 ff0f 	bl	80003ec <__adddf3>
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	460d      	mov	r5, r1
 800b5d4:	f7f5 f856 	bl	8000684 <__aeabi_i2d>
 800b5d8:	a365      	add	r3, pc, #404	@ (adr r3, 800b770 <_dtoa_r+0x2c0>)
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	f7f5 f8bb 	bl	8000758 <__aeabi_dmul>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	f7f4 feff 	bl	80003ec <__adddf3>
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	f7f5 fb61 	bl	8000cb8 <__aeabi_d2iz>
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7f5 fb1c 	bl	8000c3c <__aeabi_dcmplt>
 800b604:	b140      	cbz	r0, 800b618 <_dtoa_r+0x168>
 800b606:	4638      	mov	r0, r7
 800b608:	f7f5 f83c 	bl	8000684 <__aeabi_i2d>
 800b60c:	4622      	mov	r2, r4
 800b60e:	462b      	mov	r3, r5
 800b610:	f7f5 fb0a 	bl	8000c28 <__aeabi_dcmpeq>
 800b614:	b900      	cbnz	r0, 800b618 <_dtoa_r+0x168>
 800b616:	3f01      	subs	r7, #1
 800b618:	2f16      	cmp	r7, #22
 800b61a:	d851      	bhi.n	800b6c0 <_dtoa_r+0x210>
 800b61c:	4b5b      	ldr	r3, [pc, #364]	@ (800b78c <_dtoa_r+0x2dc>)
 800b61e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b62a:	f7f5 fb07 	bl	8000c3c <__aeabi_dcmplt>
 800b62e:	2800      	cmp	r0, #0
 800b630:	d048      	beq.n	800b6c4 <_dtoa_r+0x214>
 800b632:	3f01      	subs	r7, #1
 800b634:	2300      	movs	r3, #0
 800b636:	9312      	str	r3, [sp, #72]	@ 0x48
 800b638:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b63a:	1b9b      	subs	r3, r3, r6
 800b63c:	1e5a      	subs	r2, r3, #1
 800b63e:	bf44      	itt	mi
 800b640:	f1c3 0801 	rsbmi	r8, r3, #1
 800b644:	2300      	movmi	r3, #0
 800b646:	9208      	str	r2, [sp, #32]
 800b648:	bf54      	ite	pl
 800b64a:	f04f 0800 	movpl.w	r8, #0
 800b64e:	9308      	strmi	r3, [sp, #32]
 800b650:	2f00      	cmp	r7, #0
 800b652:	db39      	blt.n	800b6c8 <_dtoa_r+0x218>
 800b654:	9b08      	ldr	r3, [sp, #32]
 800b656:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b658:	443b      	add	r3, r7
 800b65a:	9308      	str	r3, [sp, #32]
 800b65c:	2300      	movs	r3, #0
 800b65e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b662:	2b09      	cmp	r3, #9
 800b664:	d864      	bhi.n	800b730 <_dtoa_r+0x280>
 800b666:	2b05      	cmp	r3, #5
 800b668:	bfc4      	itt	gt
 800b66a:	3b04      	subgt	r3, #4
 800b66c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b670:	f1a3 0302 	sub.w	r3, r3, #2
 800b674:	bfcc      	ite	gt
 800b676:	2400      	movgt	r4, #0
 800b678:	2401      	movle	r4, #1
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d863      	bhi.n	800b746 <_dtoa_r+0x296>
 800b67e:	e8df f003 	tbb	[pc, r3]
 800b682:	372a      	.short	0x372a
 800b684:	5535      	.short	0x5535
 800b686:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b68a:	441e      	add	r6, r3
 800b68c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b690:	2b20      	cmp	r3, #32
 800b692:	bfc1      	itttt	gt
 800b694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b698:	409f      	lslgt	r7, r3
 800b69a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b69e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b6a2:	bfd6      	itet	le
 800b6a4:	f1c3 0320 	rsble	r3, r3, #32
 800b6a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b6ac:	fa04 f003 	lslle.w	r0, r4, r3
 800b6b0:	f7f4 ffd8 	bl	8000664 <__aeabi_ui2d>
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b6ba:	3e01      	subs	r6, #1
 800b6bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800b6be:	e777      	b.n	800b5b0 <_dtoa_r+0x100>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e7b8      	b.n	800b636 <_dtoa_r+0x186>
 800b6c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b6c6:	e7b7      	b.n	800b638 <_dtoa_r+0x188>
 800b6c8:	427b      	negs	r3, r7
 800b6ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	eba8 0807 	sub.w	r8, r8, r7
 800b6d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6d4:	e7c4      	b.n	800b660 <_dtoa_r+0x1b0>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	dc35      	bgt.n	800b74c <_dtoa_r+0x29c>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	9307      	str	r3, [sp, #28]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6ea:	e00b      	b.n	800b704 <_dtoa_r+0x254>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	e7f3      	b.n	800b6d8 <_dtoa_r+0x228>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6f6:	18fb      	adds	r3, r7, r3
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	9307      	str	r3, [sp, #28]
 800b700:	bfb8      	it	lt
 800b702:	2301      	movlt	r3, #1
 800b704:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b708:	2100      	movs	r1, #0
 800b70a:	2204      	movs	r2, #4
 800b70c:	f102 0514 	add.w	r5, r2, #20
 800b710:	429d      	cmp	r5, r3
 800b712:	d91f      	bls.n	800b754 <_dtoa_r+0x2a4>
 800b714:	6041      	str	r1, [r0, #4]
 800b716:	4658      	mov	r0, fp
 800b718:	f000 fd8e 	bl	800c238 <_Balloc>
 800b71c:	4682      	mov	sl, r0
 800b71e:	2800      	cmp	r0, #0
 800b720:	d13c      	bne.n	800b79c <_dtoa_r+0x2ec>
 800b722:	4b1b      	ldr	r3, [pc, #108]	@ (800b790 <_dtoa_r+0x2e0>)
 800b724:	4602      	mov	r2, r0
 800b726:	f240 11af 	movw	r1, #431	@ 0x1af
 800b72a:	e6d8      	b.n	800b4de <_dtoa_r+0x2e>
 800b72c:	2301      	movs	r3, #1
 800b72e:	e7e0      	b.n	800b6f2 <_dtoa_r+0x242>
 800b730:	2401      	movs	r4, #1
 800b732:	2300      	movs	r3, #0
 800b734:	9309      	str	r3, [sp, #36]	@ 0x24
 800b736:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b738:	f04f 33ff 	mov.w	r3, #4294967295
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	9307      	str	r3, [sp, #28]
 800b740:	2200      	movs	r2, #0
 800b742:	2312      	movs	r3, #18
 800b744:	e7d0      	b.n	800b6e8 <_dtoa_r+0x238>
 800b746:	2301      	movs	r3, #1
 800b748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b74a:	e7f5      	b.n	800b738 <_dtoa_r+0x288>
 800b74c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	9307      	str	r3, [sp, #28]
 800b752:	e7d7      	b.n	800b704 <_dtoa_r+0x254>
 800b754:	3101      	adds	r1, #1
 800b756:	0052      	lsls	r2, r2, #1
 800b758:	e7d8      	b.n	800b70c <_dtoa_r+0x25c>
 800b75a:	bf00      	nop
 800b75c:	f3af 8000 	nop.w
 800b760:	636f4361 	.word	0x636f4361
 800b764:	3fd287a7 	.word	0x3fd287a7
 800b768:	8b60c8b3 	.word	0x8b60c8b3
 800b76c:	3fc68a28 	.word	0x3fc68a28
 800b770:	509f79fb 	.word	0x509f79fb
 800b774:	3fd34413 	.word	0x3fd34413
 800b778:	0800d432 	.word	0x0800d432
 800b77c:	0800d449 	.word	0x0800d449
 800b780:	7ff00000 	.word	0x7ff00000
 800b784:	0800d402 	.word	0x0800d402
 800b788:	3ff80000 	.word	0x3ff80000
 800b78c:	0800d540 	.word	0x0800d540
 800b790:	0800d4a1 	.word	0x0800d4a1
 800b794:	0800d42e 	.word	0x0800d42e
 800b798:	0800d401 	.word	0x0800d401
 800b79c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b7a0:	6018      	str	r0, [r3, #0]
 800b7a2:	9b07      	ldr	r3, [sp, #28]
 800b7a4:	2b0e      	cmp	r3, #14
 800b7a6:	f200 80a4 	bhi.w	800b8f2 <_dtoa_r+0x442>
 800b7aa:	2c00      	cmp	r4, #0
 800b7ac:	f000 80a1 	beq.w	800b8f2 <_dtoa_r+0x442>
 800b7b0:	2f00      	cmp	r7, #0
 800b7b2:	dd33      	ble.n	800b81c <_dtoa_r+0x36c>
 800b7b4:	4bad      	ldr	r3, [pc, #692]	@ (800ba6c <_dtoa_r+0x5bc>)
 800b7b6:	f007 020f 	and.w	r2, r7, #15
 800b7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7be:	ed93 7b00 	vldr	d7, [r3]
 800b7c2:	05f8      	lsls	r0, r7, #23
 800b7c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b7c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b7cc:	d516      	bpl.n	800b7fc <_dtoa_r+0x34c>
 800b7ce:	4ba8      	ldr	r3, [pc, #672]	@ (800ba70 <_dtoa_r+0x5c0>)
 800b7d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7d8:	f7f5 f8e8 	bl	80009ac <__aeabi_ddiv>
 800b7dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7e0:	f004 040f 	and.w	r4, r4, #15
 800b7e4:	2603      	movs	r6, #3
 800b7e6:	4da2      	ldr	r5, [pc, #648]	@ (800ba70 <_dtoa_r+0x5c0>)
 800b7e8:	b954      	cbnz	r4, 800b800 <_dtoa_r+0x350>
 800b7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7f2:	f7f5 f8db 	bl	80009ac <__aeabi_ddiv>
 800b7f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7fa:	e028      	b.n	800b84e <_dtoa_r+0x39e>
 800b7fc:	2602      	movs	r6, #2
 800b7fe:	e7f2      	b.n	800b7e6 <_dtoa_r+0x336>
 800b800:	07e1      	lsls	r1, r4, #31
 800b802:	d508      	bpl.n	800b816 <_dtoa_r+0x366>
 800b804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b80c:	f7f4 ffa4 	bl	8000758 <__aeabi_dmul>
 800b810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b814:	3601      	adds	r6, #1
 800b816:	1064      	asrs	r4, r4, #1
 800b818:	3508      	adds	r5, #8
 800b81a:	e7e5      	b.n	800b7e8 <_dtoa_r+0x338>
 800b81c:	f000 80d2 	beq.w	800b9c4 <_dtoa_r+0x514>
 800b820:	427c      	negs	r4, r7
 800b822:	4b92      	ldr	r3, [pc, #584]	@ (800ba6c <_dtoa_r+0x5bc>)
 800b824:	4d92      	ldr	r5, [pc, #584]	@ (800ba70 <_dtoa_r+0x5c0>)
 800b826:	f004 020f 	and.w	r2, r4, #15
 800b82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b836:	f7f4 ff8f 	bl	8000758 <__aeabi_dmul>
 800b83a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b83e:	1124      	asrs	r4, r4, #4
 800b840:	2300      	movs	r3, #0
 800b842:	2602      	movs	r6, #2
 800b844:	2c00      	cmp	r4, #0
 800b846:	f040 80b2 	bne.w	800b9ae <_dtoa_r+0x4fe>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1d3      	bne.n	800b7f6 <_dtoa_r+0x346>
 800b84e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b850:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 80b7 	beq.w	800b9c8 <_dtoa_r+0x518>
 800b85a:	4b86      	ldr	r3, [pc, #536]	@ (800ba74 <_dtoa_r+0x5c4>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f5 f9eb 	bl	8000c3c <__aeabi_dcmplt>
 800b866:	2800      	cmp	r0, #0
 800b868:	f000 80ae 	beq.w	800b9c8 <_dtoa_r+0x518>
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 80aa 	beq.w	800b9c8 <_dtoa_r+0x518>
 800b874:	9b00      	ldr	r3, [sp, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	dd37      	ble.n	800b8ea <_dtoa_r+0x43a>
 800b87a:	1e7b      	subs	r3, r7, #1
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	4620      	mov	r0, r4
 800b880:	4b7d      	ldr	r3, [pc, #500]	@ (800ba78 <_dtoa_r+0x5c8>)
 800b882:	2200      	movs	r2, #0
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 ff67 	bl	8000758 <__aeabi_dmul>
 800b88a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b88e:	9c00      	ldr	r4, [sp, #0]
 800b890:	3601      	adds	r6, #1
 800b892:	4630      	mov	r0, r6
 800b894:	f7f4 fef6 	bl	8000684 <__aeabi_i2d>
 800b898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b89c:	f7f4 ff5c 	bl	8000758 <__aeabi_dmul>
 800b8a0:	4b76      	ldr	r3, [pc, #472]	@ (800ba7c <_dtoa_r+0x5cc>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f7f4 fda2 	bl	80003ec <__adddf3>
 800b8a8:	4605      	mov	r5, r0
 800b8aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b8ae:	2c00      	cmp	r4, #0
 800b8b0:	f040 808d 	bne.w	800b9ce <_dtoa_r+0x51e>
 800b8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b8:	4b71      	ldr	r3, [pc, #452]	@ (800ba80 <_dtoa_r+0x5d0>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f7f4 fd94 	bl	80003e8 <__aeabi_dsub>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4633      	mov	r3, r6
 800b8cc:	f7f5 f9d4 	bl	8000c78 <__aeabi_dcmpgt>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	f040 828b 	bne.w	800bdec <_dtoa_r+0x93c>
 800b8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b8e0:	f7f5 f9ac 	bl	8000c3c <__aeabi_dcmplt>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	f040 8128 	bne.w	800bb3a <_dtoa_r+0x68a>
 800b8ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b8ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b8f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f2c0 815a 	blt.w	800bbae <_dtoa_r+0x6fe>
 800b8fa:	2f0e      	cmp	r7, #14
 800b8fc:	f300 8157 	bgt.w	800bbae <_dtoa_r+0x6fe>
 800b900:	4b5a      	ldr	r3, [pc, #360]	@ (800ba6c <_dtoa_r+0x5bc>)
 800b902:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b906:	ed93 7b00 	vldr	d7, [r3]
 800b90a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	ed8d 7b00 	vstr	d7, [sp]
 800b912:	da03      	bge.n	800b91c <_dtoa_r+0x46c>
 800b914:	9b07      	ldr	r3, [sp, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f340 8101 	ble.w	800bb1e <_dtoa_r+0x66e>
 800b91c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b920:	4656      	mov	r6, sl
 800b922:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b926:	4620      	mov	r0, r4
 800b928:	4629      	mov	r1, r5
 800b92a:	f7f5 f83f 	bl	80009ac <__aeabi_ddiv>
 800b92e:	f7f5 f9c3 	bl	8000cb8 <__aeabi_d2iz>
 800b932:	4680      	mov	r8, r0
 800b934:	f7f4 fea6 	bl	8000684 <__aeabi_i2d>
 800b938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b93c:	f7f4 ff0c 	bl	8000758 <__aeabi_dmul>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4620      	mov	r0, r4
 800b946:	4629      	mov	r1, r5
 800b948:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b94c:	f7f4 fd4c 	bl	80003e8 <__aeabi_dsub>
 800b950:	f806 4b01 	strb.w	r4, [r6], #1
 800b954:	9d07      	ldr	r5, [sp, #28]
 800b956:	eba6 040a 	sub.w	r4, r6, sl
 800b95a:	42a5      	cmp	r5, r4
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	f040 8117 	bne.w	800bb92 <_dtoa_r+0x6e2>
 800b964:	f7f4 fd42 	bl	80003ec <__adddf3>
 800b968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b96c:	4604      	mov	r4, r0
 800b96e:	460d      	mov	r5, r1
 800b970:	f7f5 f982 	bl	8000c78 <__aeabi_dcmpgt>
 800b974:	2800      	cmp	r0, #0
 800b976:	f040 80f9 	bne.w	800bb6c <_dtoa_r+0x6bc>
 800b97a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b97e:	4620      	mov	r0, r4
 800b980:	4629      	mov	r1, r5
 800b982:	f7f5 f951 	bl	8000c28 <__aeabi_dcmpeq>
 800b986:	b118      	cbz	r0, 800b990 <_dtoa_r+0x4e0>
 800b988:	f018 0f01 	tst.w	r8, #1
 800b98c:	f040 80ee 	bne.w	800bb6c <_dtoa_r+0x6bc>
 800b990:	4649      	mov	r1, r9
 800b992:	4658      	mov	r0, fp
 800b994:	f000 fc90 	bl	800c2b8 <_Bfree>
 800b998:	2300      	movs	r3, #0
 800b99a:	7033      	strb	r3, [r6, #0]
 800b99c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b99e:	3701      	adds	r7, #1
 800b9a0:	601f      	str	r7, [r3, #0]
 800b9a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 831d 	beq.w	800bfe4 <_dtoa_r+0xb34>
 800b9aa:	601e      	str	r6, [r3, #0]
 800b9ac:	e31a      	b.n	800bfe4 <_dtoa_r+0xb34>
 800b9ae:	07e2      	lsls	r2, r4, #31
 800b9b0:	d505      	bpl.n	800b9be <_dtoa_r+0x50e>
 800b9b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9b6:	f7f4 fecf 	bl	8000758 <__aeabi_dmul>
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	2301      	movs	r3, #1
 800b9be:	1064      	asrs	r4, r4, #1
 800b9c0:	3508      	adds	r5, #8
 800b9c2:	e73f      	b.n	800b844 <_dtoa_r+0x394>
 800b9c4:	2602      	movs	r6, #2
 800b9c6:	e742      	b.n	800b84e <_dtoa_r+0x39e>
 800b9c8:	9c07      	ldr	r4, [sp, #28]
 800b9ca:	9704      	str	r7, [sp, #16]
 800b9cc:	e761      	b.n	800b892 <_dtoa_r+0x3e2>
 800b9ce:	4b27      	ldr	r3, [pc, #156]	@ (800ba6c <_dtoa_r+0x5bc>)
 800b9d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b9d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9da:	4454      	add	r4, sl
 800b9dc:	2900      	cmp	r1, #0
 800b9de:	d053      	beq.n	800ba88 <_dtoa_r+0x5d8>
 800b9e0:	4928      	ldr	r1, [pc, #160]	@ (800ba84 <_dtoa_r+0x5d4>)
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f7f4 ffe2 	bl	80009ac <__aeabi_ddiv>
 800b9e8:	4633      	mov	r3, r6
 800b9ea:	462a      	mov	r2, r5
 800b9ec:	f7f4 fcfc 	bl	80003e8 <__aeabi_dsub>
 800b9f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9f4:	4656      	mov	r6, sl
 800b9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9fa:	f7f5 f95d 	bl	8000cb8 <__aeabi_d2iz>
 800b9fe:	4605      	mov	r5, r0
 800ba00:	f7f4 fe40 	bl	8000684 <__aeabi_i2d>
 800ba04:	4602      	mov	r2, r0
 800ba06:	460b      	mov	r3, r1
 800ba08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba0c:	f7f4 fcec 	bl	80003e8 <__aeabi_dsub>
 800ba10:	3530      	adds	r5, #48	@ 0x30
 800ba12:	4602      	mov	r2, r0
 800ba14:	460b      	mov	r3, r1
 800ba16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba1a:	f806 5b01 	strb.w	r5, [r6], #1
 800ba1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba22:	f7f5 f90b 	bl	8000c3c <__aeabi_dcmplt>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d171      	bne.n	800bb0e <_dtoa_r+0x65e>
 800ba2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba2e:	4911      	ldr	r1, [pc, #68]	@ (800ba74 <_dtoa_r+0x5c4>)
 800ba30:	2000      	movs	r0, #0
 800ba32:	f7f4 fcd9 	bl	80003e8 <__aeabi_dsub>
 800ba36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ba3a:	f7f5 f8ff 	bl	8000c3c <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f040 8095 	bne.w	800bb6e <_dtoa_r+0x6be>
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	f43f af50 	beq.w	800b8ea <_dtoa_r+0x43a>
 800ba4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba78 <_dtoa_r+0x5c8>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	f7f4 fe81 	bl	8000758 <__aeabi_dmul>
 800ba56:	4b08      	ldr	r3, [pc, #32]	@ (800ba78 <_dtoa_r+0x5c8>)
 800ba58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba62:	f7f4 fe79 	bl	8000758 <__aeabi_dmul>
 800ba66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba6a:	e7c4      	b.n	800b9f6 <_dtoa_r+0x546>
 800ba6c:	0800d540 	.word	0x0800d540
 800ba70:	0800d518 	.word	0x0800d518
 800ba74:	3ff00000 	.word	0x3ff00000
 800ba78:	40240000 	.word	0x40240000
 800ba7c:	401c0000 	.word	0x401c0000
 800ba80:	40140000 	.word	0x40140000
 800ba84:	3fe00000 	.word	0x3fe00000
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f7f4 fe64 	bl	8000758 <__aeabi_dmul>
 800ba90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ba94:	9415      	str	r4, [sp, #84]	@ 0x54
 800ba96:	4656      	mov	r6, sl
 800ba98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9c:	f7f5 f90c 	bl	8000cb8 <__aeabi_d2iz>
 800baa0:	4605      	mov	r5, r0
 800baa2:	f7f4 fdef 	bl	8000684 <__aeabi_i2d>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baae:	f7f4 fc9b 	bl	80003e8 <__aeabi_dsub>
 800bab2:	3530      	adds	r5, #48	@ 0x30
 800bab4:	f806 5b01 	strb.w	r5, [r6], #1
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	42a6      	cmp	r6, r4
 800babe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bac2:	f04f 0200 	mov.w	r2, #0
 800bac6:	d124      	bne.n	800bb12 <_dtoa_r+0x662>
 800bac8:	4bac      	ldr	r3, [pc, #688]	@ (800bd7c <_dtoa_r+0x8cc>)
 800baca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bace:	f7f4 fc8d 	bl	80003ec <__adddf3>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bada:	f7f5 f8cd 	bl	8000c78 <__aeabi_dcmpgt>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d145      	bne.n	800bb6e <_dtoa_r+0x6be>
 800bae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bae6:	49a5      	ldr	r1, [pc, #660]	@ (800bd7c <_dtoa_r+0x8cc>)
 800bae8:	2000      	movs	r0, #0
 800baea:	f7f4 fc7d 	bl	80003e8 <__aeabi_dsub>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf6:	f7f5 f8a1 	bl	8000c3c <__aeabi_dcmplt>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f43f aef5 	beq.w	800b8ea <_dtoa_r+0x43a>
 800bb00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bb02:	1e73      	subs	r3, r6, #1
 800bb04:	9315      	str	r3, [sp, #84]	@ 0x54
 800bb06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb0a:	2b30      	cmp	r3, #48	@ 0x30
 800bb0c:	d0f8      	beq.n	800bb00 <_dtoa_r+0x650>
 800bb0e:	9f04      	ldr	r7, [sp, #16]
 800bb10:	e73e      	b.n	800b990 <_dtoa_r+0x4e0>
 800bb12:	4b9b      	ldr	r3, [pc, #620]	@ (800bd80 <_dtoa_r+0x8d0>)
 800bb14:	f7f4 fe20 	bl	8000758 <__aeabi_dmul>
 800bb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb1c:	e7bc      	b.n	800ba98 <_dtoa_r+0x5e8>
 800bb1e:	d10c      	bne.n	800bb3a <_dtoa_r+0x68a>
 800bb20:	4b98      	ldr	r3, [pc, #608]	@ (800bd84 <_dtoa_r+0x8d4>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb28:	f7f4 fe16 	bl	8000758 <__aeabi_dmul>
 800bb2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb30:	f7f5 f898 	bl	8000c64 <__aeabi_dcmpge>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	f000 8157 	beq.w	800bde8 <_dtoa_r+0x938>
 800bb3a:	2400      	movs	r4, #0
 800bb3c:	4625      	mov	r5, r4
 800bb3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb40:	43db      	mvns	r3, r3
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	4656      	mov	r6, sl
 800bb46:	2700      	movs	r7, #0
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4658      	mov	r0, fp
 800bb4c:	f000 fbb4 	bl	800c2b8 <_Bfree>
 800bb50:	2d00      	cmp	r5, #0
 800bb52:	d0dc      	beq.n	800bb0e <_dtoa_r+0x65e>
 800bb54:	b12f      	cbz	r7, 800bb62 <_dtoa_r+0x6b2>
 800bb56:	42af      	cmp	r7, r5
 800bb58:	d003      	beq.n	800bb62 <_dtoa_r+0x6b2>
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	4658      	mov	r0, fp
 800bb5e:	f000 fbab 	bl	800c2b8 <_Bfree>
 800bb62:	4629      	mov	r1, r5
 800bb64:	4658      	mov	r0, fp
 800bb66:	f000 fba7 	bl	800c2b8 <_Bfree>
 800bb6a:	e7d0      	b.n	800bb0e <_dtoa_r+0x65e>
 800bb6c:	9704      	str	r7, [sp, #16]
 800bb6e:	4633      	mov	r3, r6
 800bb70:	461e      	mov	r6, r3
 800bb72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb76:	2a39      	cmp	r2, #57	@ 0x39
 800bb78:	d107      	bne.n	800bb8a <_dtoa_r+0x6da>
 800bb7a:	459a      	cmp	sl, r3
 800bb7c:	d1f8      	bne.n	800bb70 <_dtoa_r+0x6c0>
 800bb7e:	9a04      	ldr	r2, [sp, #16]
 800bb80:	3201      	adds	r2, #1
 800bb82:	9204      	str	r2, [sp, #16]
 800bb84:	2230      	movs	r2, #48	@ 0x30
 800bb86:	f88a 2000 	strb.w	r2, [sl]
 800bb8a:	781a      	ldrb	r2, [r3, #0]
 800bb8c:	3201      	adds	r2, #1
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	e7bd      	b.n	800bb0e <_dtoa_r+0x65e>
 800bb92:	4b7b      	ldr	r3, [pc, #492]	@ (800bd80 <_dtoa_r+0x8d0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	f7f4 fddf 	bl	8000758 <__aeabi_dmul>
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	f7f5 f841 	bl	8000c28 <__aeabi_dcmpeq>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f43f aebb 	beq.w	800b922 <_dtoa_r+0x472>
 800bbac:	e6f0      	b.n	800b990 <_dtoa_r+0x4e0>
 800bbae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bbb0:	2a00      	cmp	r2, #0
 800bbb2:	f000 80db 	beq.w	800bd6c <_dtoa_r+0x8bc>
 800bbb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb8:	2a01      	cmp	r2, #1
 800bbba:	f300 80bf 	bgt.w	800bd3c <_dtoa_r+0x88c>
 800bbbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	f000 80b7 	beq.w	800bd34 <_dtoa_r+0x884>
 800bbc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bbca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbcc:	4646      	mov	r6, r8
 800bbce:	9a08      	ldr	r2, [sp, #32]
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	441a      	add	r2, r3
 800bbd4:	4658      	mov	r0, fp
 800bbd6:	4498      	add	r8, r3
 800bbd8:	9208      	str	r2, [sp, #32]
 800bbda:	f000 fc21 	bl	800c420 <__i2b>
 800bbde:	4605      	mov	r5, r0
 800bbe0:	b15e      	cbz	r6, 800bbfa <_dtoa_r+0x74a>
 800bbe2:	9b08      	ldr	r3, [sp, #32]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dd08      	ble.n	800bbfa <_dtoa_r+0x74a>
 800bbe8:	42b3      	cmp	r3, r6
 800bbea:	9a08      	ldr	r2, [sp, #32]
 800bbec:	bfa8      	it	ge
 800bbee:	4633      	movge	r3, r6
 800bbf0:	eba8 0803 	sub.w	r8, r8, r3
 800bbf4:	1af6      	subs	r6, r6, r3
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	9308      	str	r3, [sp, #32]
 800bbfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbfc:	b1f3      	cbz	r3, 800bc3c <_dtoa_r+0x78c>
 800bbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 80b7 	beq.w	800bd74 <_dtoa_r+0x8c4>
 800bc06:	b18c      	cbz	r4, 800bc2c <_dtoa_r+0x77c>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	4658      	mov	r0, fp
 800bc0e:	f000 fcc7 	bl	800c5a0 <__pow5mult>
 800bc12:	464a      	mov	r2, r9
 800bc14:	4601      	mov	r1, r0
 800bc16:	4605      	mov	r5, r0
 800bc18:	4658      	mov	r0, fp
 800bc1a:	f000 fc17 	bl	800c44c <__multiply>
 800bc1e:	4649      	mov	r1, r9
 800bc20:	9004      	str	r0, [sp, #16]
 800bc22:	4658      	mov	r0, fp
 800bc24:	f000 fb48 	bl	800c2b8 <_Bfree>
 800bc28:	9b04      	ldr	r3, [sp, #16]
 800bc2a:	4699      	mov	r9, r3
 800bc2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc2e:	1b1a      	subs	r2, r3, r4
 800bc30:	d004      	beq.n	800bc3c <_dtoa_r+0x78c>
 800bc32:	4649      	mov	r1, r9
 800bc34:	4658      	mov	r0, fp
 800bc36:	f000 fcb3 	bl	800c5a0 <__pow5mult>
 800bc3a:	4681      	mov	r9, r0
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	4658      	mov	r0, fp
 800bc40:	f000 fbee 	bl	800c420 <__i2b>
 800bc44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc46:	4604      	mov	r4, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 81cf 	beq.w	800bfec <_dtoa_r+0xb3c>
 800bc4e:	461a      	mov	r2, r3
 800bc50:	4601      	mov	r1, r0
 800bc52:	4658      	mov	r0, fp
 800bc54:	f000 fca4 	bl	800c5a0 <__pow5mult>
 800bc58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	f300 8095 	bgt.w	800bd8c <_dtoa_r+0x8dc>
 800bc62:	9b02      	ldr	r3, [sp, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f040 8087 	bne.w	800bd78 <_dtoa_r+0x8c8>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f040 8089 	bne.w	800bd88 <_dtoa_r+0x8d8>
 800bc76:	9b03      	ldr	r3, [sp, #12]
 800bc78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc7c:	0d1b      	lsrs	r3, r3, #20
 800bc7e:	051b      	lsls	r3, r3, #20
 800bc80:	b12b      	cbz	r3, 800bc8e <_dtoa_r+0x7de>
 800bc82:	9b08      	ldr	r3, [sp, #32]
 800bc84:	3301      	adds	r3, #1
 800bc86:	9308      	str	r3, [sp, #32]
 800bc88:	f108 0801 	add.w	r8, r8, #1
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	f000 81b0 	beq.w	800bff8 <_dtoa_r+0xb48>
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc9e:	6918      	ldr	r0, [r3, #16]
 800bca0:	f000 fb72 	bl	800c388 <__hi0bits>
 800bca4:	f1c0 0020 	rsb	r0, r0, #32
 800bca8:	9b08      	ldr	r3, [sp, #32]
 800bcaa:	4418      	add	r0, r3
 800bcac:	f010 001f 	ands.w	r0, r0, #31
 800bcb0:	d077      	beq.n	800bda2 <_dtoa_r+0x8f2>
 800bcb2:	f1c0 0320 	rsb	r3, r0, #32
 800bcb6:	2b04      	cmp	r3, #4
 800bcb8:	dd6b      	ble.n	800bd92 <_dtoa_r+0x8e2>
 800bcba:	9b08      	ldr	r3, [sp, #32]
 800bcbc:	f1c0 001c 	rsb	r0, r0, #28
 800bcc0:	4403      	add	r3, r0
 800bcc2:	4480      	add	r8, r0
 800bcc4:	4406      	add	r6, r0
 800bcc6:	9308      	str	r3, [sp, #32]
 800bcc8:	f1b8 0f00 	cmp.w	r8, #0
 800bccc:	dd05      	ble.n	800bcda <_dtoa_r+0x82a>
 800bcce:	4649      	mov	r1, r9
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	4658      	mov	r0, fp
 800bcd4:	f000 fcbe 	bl	800c654 <__lshift>
 800bcd8:	4681      	mov	r9, r0
 800bcda:	9b08      	ldr	r3, [sp, #32]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd05      	ble.n	800bcec <_dtoa_r+0x83c>
 800bce0:	4621      	mov	r1, r4
 800bce2:	461a      	mov	r2, r3
 800bce4:	4658      	mov	r0, fp
 800bce6:	f000 fcb5 	bl	800c654 <__lshift>
 800bcea:	4604      	mov	r4, r0
 800bcec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d059      	beq.n	800bda6 <_dtoa_r+0x8f6>
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4648      	mov	r0, r9
 800bcf6:	f000 fd19 	bl	800c72c <__mcmp>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	da53      	bge.n	800bda6 <_dtoa_r+0x8f6>
 800bcfe:	1e7b      	subs	r3, r7, #1
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	4649      	mov	r1, r9
 800bd04:	2300      	movs	r3, #0
 800bd06:	220a      	movs	r2, #10
 800bd08:	4658      	mov	r0, fp
 800bd0a:	f000 faf7 	bl	800c2fc <__multadd>
 800bd0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd10:	4681      	mov	r9, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f000 8172 	beq.w	800bffc <_dtoa_r+0xb4c>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	220a      	movs	r2, #10
 800bd1e:	4658      	mov	r0, fp
 800bd20:	f000 faec 	bl	800c2fc <__multadd>
 800bd24:	9b00      	ldr	r3, [sp, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	4605      	mov	r5, r0
 800bd2a:	dc67      	bgt.n	800bdfc <_dtoa_r+0x94c>
 800bd2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	dc41      	bgt.n	800bdb6 <_dtoa_r+0x906>
 800bd32:	e063      	b.n	800bdfc <_dtoa_r+0x94c>
 800bd34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bd3a:	e746      	b.n	800bbca <_dtoa_r+0x71a>
 800bd3c:	9b07      	ldr	r3, [sp, #28]
 800bd3e:	1e5c      	subs	r4, r3, #1
 800bd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd42:	42a3      	cmp	r3, r4
 800bd44:	bfbf      	itttt	lt
 800bd46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bd48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bd4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bd4c:	1ae3      	sublt	r3, r4, r3
 800bd4e:	bfb4      	ite	lt
 800bd50:	18d2      	addlt	r2, r2, r3
 800bd52:	1b1c      	subge	r4, r3, r4
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	bfbc      	itt	lt
 800bd58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bd5a:	2400      	movlt	r4, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	bfb5      	itete	lt
 800bd60:	eba8 0603 	sublt.w	r6, r8, r3
 800bd64:	9b07      	ldrge	r3, [sp, #28]
 800bd66:	2300      	movlt	r3, #0
 800bd68:	4646      	movge	r6, r8
 800bd6a:	e730      	b.n	800bbce <_dtoa_r+0x71e>
 800bd6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bd70:	4646      	mov	r6, r8
 800bd72:	e735      	b.n	800bbe0 <_dtoa_r+0x730>
 800bd74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd76:	e75c      	b.n	800bc32 <_dtoa_r+0x782>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e788      	b.n	800bc8e <_dtoa_r+0x7de>
 800bd7c:	3fe00000 	.word	0x3fe00000
 800bd80:	40240000 	.word	0x40240000
 800bd84:	40140000 	.word	0x40140000
 800bd88:	9b02      	ldr	r3, [sp, #8]
 800bd8a:	e780      	b.n	800bc8e <_dtoa_r+0x7de>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd90:	e782      	b.n	800bc98 <_dtoa_r+0x7e8>
 800bd92:	d099      	beq.n	800bcc8 <_dtoa_r+0x818>
 800bd94:	9a08      	ldr	r2, [sp, #32]
 800bd96:	331c      	adds	r3, #28
 800bd98:	441a      	add	r2, r3
 800bd9a:	4498      	add	r8, r3
 800bd9c:	441e      	add	r6, r3
 800bd9e:	9208      	str	r2, [sp, #32]
 800bda0:	e792      	b.n	800bcc8 <_dtoa_r+0x818>
 800bda2:	4603      	mov	r3, r0
 800bda4:	e7f6      	b.n	800bd94 <_dtoa_r+0x8e4>
 800bda6:	9b07      	ldr	r3, [sp, #28]
 800bda8:	9704      	str	r7, [sp, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	dc20      	bgt.n	800bdf0 <_dtoa_r+0x940>
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	dd1e      	ble.n	800bdf4 <_dtoa_r+0x944>
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f47f aec0 	bne.w	800bb3e <_dtoa_r+0x68e>
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	2205      	movs	r2, #5
 800bdc2:	4658      	mov	r0, fp
 800bdc4:	f000 fa9a 	bl	800c2fc <__multadd>
 800bdc8:	4601      	mov	r1, r0
 800bdca:	4604      	mov	r4, r0
 800bdcc:	4648      	mov	r0, r9
 800bdce:	f000 fcad 	bl	800c72c <__mcmp>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	f77f aeb3 	ble.w	800bb3e <_dtoa_r+0x68e>
 800bdd8:	4656      	mov	r6, sl
 800bdda:	2331      	movs	r3, #49	@ 0x31
 800bddc:	f806 3b01 	strb.w	r3, [r6], #1
 800bde0:	9b04      	ldr	r3, [sp, #16]
 800bde2:	3301      	adds	r3, #1
 800bde4:	9304      	str	r3, [sp, #16]
 800bde6:	e6ae      	b.n	800bb46 <_dtoa_r+0x696>
 800bde8:	9c07      	ldr	r4, [sp, #28]
 800bdea:	9704      	str	r7, [sp, #16]
 800bdec:	4625      	mov	r5, r4
 800bdee:	e7f3      	b.n	800bdd8 <_dtoa_r+0x928>
 800bdf0:	9b07      	ldr	r3, [sp, #28]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 8104 	beq.w	800c004 <_dtoa_r+0xb54>
 800bdfc:	2e00      	cmp	r6, #0
 800bdfe:	dd05      	ble.n	800be0c <_dtoa_r+0x95c>
 800be00:	4629      	mov	r1, r5
 800be02:	4632      	mov	r2, r6
 800be04:	4658      	mov	r0, fp
 800be06:	f000 fc25 	bl	800c654 <__lshift>
 800be0a:	4605      	mov	r5, r0
 800be0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d05a      	beq.n	800bec8 <_dtoa_r+0xa18>
 800be12:	6869      	ldr	r1, [r5, #4]
 800be14:	4658      	mov	r0, fp
 800be16:	f000 fa0f 	bl	800c238 <_Balloc>
 800be1a:	4606      	mov	r6, r0
 800be1c:	b928      	cbnz	r0, 800be2a <_dtoa_r+0x97a>
 800be1e:	4b84      	ldr	r3, [pc, #528]	@ (800c030 <_dtoa_r+0xb80>)
 800be20:	4602      	mov	r2, r0
 800be22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800be26:	f7ff bb5a 	b.w	800b4de <_dtoa_r+0x2e>
 800be2a:	692a      	ldr	r2, [r5, #16]
 800be2c:	3202      	adds	r2, #2
 800be2e:	0092      	lsls	r2, r2, #2
 800be30:	f105 010c 	add.w	r1, r5, #12
 800be34:	300c      	adds	r0, #12
 800be36:	f001 f803 	bl	800ce40 <memcpy>
 800be3a:	2201      	movs	r2, #1
 800be3c:	4631      	mov	r1, r6
 800be3e:	4658      	mov	r0, fp
 800be40:	f000 fc08 	bl	800c654 <__lshift>
 800be44:	f10a 0301 	add.w	r3, sl, #1
 800be48:	9307      	str	r3, [sp, #28]
 800be4a:	9b00      	ldr	r3, [sp, #0]
 800be4c:	4453      	add	r3, sl
 800be4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be50:	9b02      	ldr	r3, [sp, #8]
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	462f      	mov	r7, r5
 800be58:	930a      	str	r3, [sp, #40]	@ 0x28
 800be5a:	4605      	mov	r5, r0
 800be5c:	9b07      	ldr	r3, [sp, #28]
 800be5e:	4621      	mov	r1, r4
 800be60:	3b01      	subs	r3, #1
 800be62:	4648      	mov	r0, r9
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	f7ff fa9a 	bl	800b39e <quorem>
 800be6a:	4639      	mov	r1, r7
 800be6c:	9002      	str	r0, [sp, #8]
 800be6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be72:	4648      	mov	r0, r9
 800be74:	f000 fc5a 	bl	800c72c <__mcmp>
 800be78:	462a      	mov	r2, r5
 800be7a:	9008      	str	r0, [sp, #32]
 800be7c:	4621      	mov	r1, r4
 800be7e:	4658      	mov	r0, fp
 800be80:	f000 fc70 	bl	800c764 <__mdiff>
 800be84:	68c2      	ldr	r2, [r0, #12]
 800be86:	4606      	mov	r6, r0
 800be88:	bb02      	cbnz	r2, 800becc <_dtoa_r+0xa1c>
 800be8a:	4601      	mov	r1, r0
 800be8c:	4648      	mov	r0, r9
 800be8e:	f000 fc4d 	bl	800c72c <__mcmp>
 800be92:	4602      	mov	r2, r0
 800be94:	4631      	mov	r1, r6
 800be96:	4658      	mov	r0, fp
 800be98:	920e      	str	r2, [sp, #56]	@ 0x38
 800be9a:	f000 fa0d 	bl	800c2b8 <_Bfree>
 800be9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bea2:	9e07      	ldr	r6, [sp, #28]
 800bea4:	ea43 0102 	orr.w	r1, r3, r2
 800bea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beaa:	4319      	orrs	r1, r3
 800beac:	d110      	bne.n	800bed0 <_dtoa_r+0xa20>
 800beae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800beb2:	d029      	beq.n	800bf08 <_dtoa_r+0xa58>
 800beb4:	9b08      	ldr	r3, [sp, #32]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	dd02      	ble.n	800bec0 <_dtoa_r+0xa10>
 800beba:	9b02      	ldr	r3, [sp, #8]
 800bebc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bec0:	9b00      	ldr	r3, [sp, #0]
 800bec2:	f883 8000 	strb.w	r8, [r3]
 800bec6:	e63f      	b.n	800bb48 <_dtoa_r+0x698>
 800bec8:	4628      	mov	r0, r5
 800beca:	e7bb      	b.n	800be44 <_dtoa_r+0x994>
 800becc:	2201      	movs	r2, #1
 800bece:	e7e1      	b.n	800be94 <_dtoa_r+0x9e4>
 800bed0:	9b08      	ldr	r3, [sp, #32]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	db04      	blt.n	800bee0 <_dtoa_r+0xa30>
 800bed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bed8:	430b      	orrs	r3, r1
 800beda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bedc:	430b      	orrs	r3, r1
 800bede:	d120      	bne.n	800bf22 <_dtoa_r+0xa72>
 800bee0:	2a00      	cmp	r2, #0
 800bee2:	dded      	ble.n	800bec0 <_dtoa_r+0xa10>
 800bee4:	4649      	mov	r1, r9
 800bee6:	2201      	movs	r2, #1
 800bee8:	4658      	mov	r0, fp
 800beea:	f000 fbb3 	bl	800c654 <__lshift>
 800beee:	4621      	mov	r1, r4
 800bef0:	4681      	mov	r9, r0
 800bef2:	f000 fc1b 	bl	800c72c <__mcmp>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	dc03      	bgt.n	800bf02 <_dtoa_r+0xa52>
 800befa:	d1e1      	bne.n	800bec0 <_dtoa_r+0xa10>
 800befc:	f018 0f01 	tst.w	r8, #1
 800bf00:	d0de      	beq.n	800bec0 <_dtoa_r+0xa10>
 800bf02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf06:	d1d8      	bne.n	800beba <_dtoa_r+0xa0a>
 800bf08:	9a00      	ldr	r2, [sp, #0]
 800bf0a:	2339      	movs	r3, #57	@ 0x39
 800bf0c:	7013      	strb	r3, [r2, #0]
 800bf0e:	4633      	mov	r3, r6
 800bf10:	461e      	mov	r6, r3
 800bf12:	3b01      	subs	r3, #1
 800bf14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bf18:	2a39      	cmp	r2, #57	@ 0x39
 800bf1a:	d052      	beq.n	800bfc2 <_dtoa_r+0xb12>
 800bf1c:	3201      	adds	r2, #1
 800bf1e:	701a      	strb	r2, [r3, #0]
 800bf20:	e612      	b.n	800bb48 <_dtoa_r+0x698>
 800bf22:	2a00      	cmp	r2, #0
 800bf24:	dd07      	ble.n	800bf36 <_dtoa_r+0xa86>
 800bf26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bf2a:	d0ed      	beq.n	800bf08 <_dtoa_r+0xa58>
 800bf2c:	9a00      	ldr	r2, [sp, #0]
 800bf2e:	f108 0301 	add.w	r3, r8, #1
 800bf32:	7013      	strb	r3, [r2, #0]
 800bf34:	e608      	b.n	800bb48 <_dtoa_r+0x698>
 800bf36:	9b07      	ldr	r3, [sp, #28]
 800bf38:	9a07      	ldr	r2, [sp, #28]
 800bf3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bf3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d028      	beq.n	800bf96 <_dtoa_r+0xae6>
 800bf44:	4649      	mov	r1, r9
 800bf46:	2300      	movs	r3, #0
 800bf48:	220a      	movs	r2, #10
 800bf4a:	4658      	mov	r0, fp
 800bf4c:	f000 f9d6 	bl	800c2fc <__multadd>
 800bf50:	42af      	cmp	r7, r5
 800bf52:	4681      	mov	r9, r0
 800bf54:	f04f 0300 	mov.w	r3, #0
 800bf58:	f04f 020a 	mov.w	r2, #10
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	4658      	mov	r0, fp
 800bf60:	d107      	bne.n	800bf72 <_dtoa_r+0xac2>
 800bf62:	f000 f9cb 	bl	800c2fc <__multadd>
 800bf66:	4607      	mov	r7, r0
 800bf68:	4605      	mov	r5, r0
 800bf6a:	9b07      	ldr	r3, [sp, #28]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	9307      	str	r3, [sp, #28]
 800bf70:	e774      	b.n	800be5c <_dtoa_r+0x9ac>
 800bf72:	f000 f9c3 	bl	800c2fc <__multadd>
 800bf76:	4629      	mov	r1, r5
 800bf78:	4607      	mov	r7, r0
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	220a      	movs	r2, #10
 800bf7e:	4658      	mov	r0, fp
 800bf80:	f000 f9bc 	bl	800c2fc <__multadd>
 800bf84:	4605      	mov	r5, r0
 800bf86:	e7f0      	b.n	800bf6a <_dtoa_r+0xaba>
 800bf88:	9b00      	ldr	r3, [sp, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfcc      	ite	gt
 800bf8e:	461e      	movgt	r6, r3
 800bf90:	2601      	movle	r6, #1
 800bf92:	4456      	add	r6, sl
 800bf94:	2700      	movs	r7, #0
 800bf96:	4649      	mov	r1, r9
 800bf98:	2201      	movs	r2, #1
 800bf9a:	4658      	mov	r0, fp
 800bf9c:	f000 fb5a 	bl	800c654 <__lshift>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	4681      	mov	r9, r0
 800bfa4:	f000 fbc2 	bl	800c72c <__mcmp>
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	dcb0      	bgt.n	800bf0e <_dtoa_r+0xa5e>
 800bfac:	d102      	bne.n	800bfb4 <_dtoa_r+0xb04>
 800bfae:	f018 0f01 	tst.w	r8, #1
 800bfb2:	d1ac      	bne.n	800bf0e <_dtoa_r+0xa5e>
 800bfb4:	4633      	mov	r3, r6
 800bfb6:	461e      	mov	r6, r3
 800bfb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfbc:	2a30      	cmp	r2, #48	@ 0x30
 800bfbe:	d0fa      	beq.n	800bfb6 <_dtoa_r+0xb06>
 800bfc0:	e5c2      	b.n	800bb48 <_dtoa_r+0x698>
 800bfc2:	459a      	cmp	sl, r3
 800bfc4:	d1a4      	bne.n	800bf10 <_dtoa_r+0xa60>
 800bfc6:	9b04      	ldr	r3, [sp, #16]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	9304      	str	r3, [sp, #16]
 800bfcc:	2331      	movs	r3, #49	@ 0x31
 800bfce:	f88a 3000 	strb.w	r3, [sl]
 800bfd2:	e5b9      	b.n	800bb48 <_dtoa_r+0x698>
 800bfd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bfd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c034 <_dtoa_r+0xb84>
 800bfda:	b11b      	cbz	r3, 800bfe4 <_dtoa_r+0xb34>
 800bfdc:	f10a 0308 	add.w	r3, sl, #8
 800bfe0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	4650      	mov	r0, sl
 800bfe6:	b019      	add	sp, #100	@ 0x64
 800bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	f77f ae37 	ble.w	800bc62 <_dtoa_r+0x7b2>
 800bff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff8:	2001      	movs	r0, #1
 800bffa:	e655      	b.n	800bca8 <_dtoa_r+0x7f8>
 800bffc:	9b00      	ldr	r3, [sp, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	f77f aed6 	ble.w	800bdb0 <_dtoa_r+0x900>
 800c004:	4656      	mov	r6, sl
 800c006:	4621      	mov	r1, r4
 800c008:	4648      	mov	r0, r9
 800c00a:	f7ff f9c8 	bl	800b39e <quorem>
 800c00e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c012:	f806 8b01 	strb.w	r8, [r6], #1
 800c016:	9b00      	ldr	r3, [sp, #0]
 800c018:	eba6 020a 	sub.w	r2, r6, sl
 800c01c:	4293      	cmp	r3, r2
 800c01e:	ddb3      	ble.n	800bf88 <_dtoa_r+0xad8>
 800c020:	4649      	mov	r1, r9
 800c022:	2300      	movs	r3, #0
 800c024:	220a      	movs	r2, #10
 800c026:	4658      	mov	r0, fp
 800c028:	f000 f968 	bl	800c2fc <__multadd>
 800c02c:	4681      	mov	r9, r0
 800c02e:	e7ea      	b.n	800c006 <_dtoa_r+0xb56>
 800c030:	0800d4a1 	.word	0x0800d4a1
 800c034:	0800d425 	.word	0x0800d425

0800c038 <_free_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4605      	mov	r5, r0
 800c03c:	2900      	cmp	r1, #0
 800c03e:	d041      	beq.n	800c0c4 <_free_r+0x8c>
 800c040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c044:	1f0c      	subs	r4, r1, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	bfb8      	it	lt
 800c04a:	18e4      	addlt	r4, r4, r3
 800c04c:	f000 f8e8 	bl	800c220 <__malloc_lock>
 800c050:	4a1d      	ldr	r2, [pc, #116]	@ (800c0c8 <_free_r+0x90>)
 800c052:	6813      	ldr	r3, [r2, #0]
 800c054:	b933      	cbnz	r3, 800c064 <_free_r+0x2c>
 800c056:	6063      	str	r3, [r4, #4]
 800c058:	6014      	str	r4, [r2, #0]
 800c05a:	4628      	mov	r0, r5
 800c05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c060:	f000 b8e4 	b.w	800c22c <__malloc_unlock>
 800c064:	42a3      	cmp	r3, r4
 800c066:	d908      	bls.n	800c07a <_free_r+0x42>
 800c068:	6820      	ldr	r0, [r4, #0]
 800c06a:	1821      	adds	r1, r4, r0
 800c06c:	428b      	cmp	r3, r1
 800c06e:	bf01      	itttt	eq
 800c070:	6819      	ldreq	r1, [r3, #0]
 800c072:	685b      	ldreq	r3, [r3, #4]
 800c074:	1809      	addeq	r1, r1, r0
 800c076:	6021      	streq	r1, [r4, #0]
 800c078:	e7ed      	b.n	800c056 <_free_r+0x1e>
 800c07a:	461a      	mov	r2, r3
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	b10b      	cbz	r3, 800c084 <_free_r+0x4c>
 800c080:	42a3      	cmp	r3, r4
 800c082:	d9fa      	bls.n	800c07a <_free_r+0x42>
 800c084:	6811      	ldr	r1, [r2, #0]
 800c086:	1850      	adds	r0, r2, r1
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d10b      	bne.n	800c0a4 <_free_r+0x6c>
 800c08c:	6820      	ldr	r0, [r4, #0]
 800c08e:	4401      	add	r1, r0
 800c090:	1850      	adds	r0, r2, r1
 800c092:	4283      	cmp	r3, r0
 800c094:	6011      	str	r1, [r2, #0]
 800c096:	d1e0      	bne.n	800c05a <_free_r+0x22>
 800c098:	6818      	ldr	r0, [r3, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	6053      	str	r3, [r2, #4]
 800c09e:	4408      	add	r0, r1
 800c0a0:	6010      	str	r0, [r2, #0]
 800c0a2:	e7da      	b.n	800c05a <_free_r+0x22>
 800c0a4:	d902      	bls.n	800c0ac <_free_r+0x74>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	e7d6      	b.n	800c05a <_free_r+0x22>
 800c0ac:	6820      	ldr	r0, [r4, #0]
 800c0ae:	1821      	adds	r1, r4, r0
 800c0b0:	428b      	cmp	r3, r1
 800c0b2:	bf04      	itt	eq
 800c0b4:	6819      	ldreq	r1, [r3, #0]
 800c0b6:	685b      	ldreq	r3, [r3, #4]
 800c0b8:	6063      	str	r3, [r4, #4]
 800c0ba:	bf04      	itt	eq
 800c0bc:	1809      	addeq	r1, r1, r0
 800c0be:	6021      	streq	r1, [r4, #0]
 800c0c0:	6054      	str	r4, [r2, #4]
 800c0c2:	e7ca      	b.n	800c05a <_free_r+0x22>
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20007cd0 	.word	0x20007cd0

0800c0cc <malloc>:
 800c0cc:	4b02      	ldr	r3, [pc, #8]	@ (800c0d8 <malloc+0xc>)
 800c0ce:	4601      	mov	r1, r0
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	f000 b825 	b.w	800c120 <_malloc_r>
 800c0d6:	bf00      	nop
 800c0d8:	20000018 	.word	0x20000018

0800c0dc <sbrk_aligned>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	4e0f      	ldr	r6, [pc, #60]	@ (800c11c <sbrk_aligned+0x40>)
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	6831      	ldr	r1, [r6, #0]
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	b911      	cbnz	r1, 800c0ee <sbrk_aligned+0x12>
 800c0e8:	f000 fe9a 	bl	800ce20 <_sbrk_r>
 800c0ec:	6030      	str	r0, [r6, #0]
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f000 fe95 	bl	800ce20 <_sbrk_r>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	d103      	bne.n	800c102 <sbrk_aligned+0x26>
 800c0fa:	f04f 34ff 	mov.w	r4, #4294967295
 800c0fe:	4620      	mov	r0, r4
 800c100:	bd70      	pop	{r4, r5, r6, pc}
 800c102:	1cc4      	adds	r4, r0, #3
 800c104:	f024 0403 	bic.w	r4, r4, #3
 800c108:	42a0      	cmp	r0, r4
 800c10a:	d0f8      	beq.n	800c0fe <sbrk_aligned+0x22>
 800c10c:	1a21      	subs	r1, r4, r0
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 fe86 	bl	800ce20 <_sbrk_r>
 800c114:	3001      	adds	r0, #1
 800c116:	d1f2      	bne.n	800c0fe <sbrk_aligned+0x22>
 800c118:	e7ef      	b.n	800c0fa <sbrk_aligned+0x1e>
 800c11a:	bf00      	nop
 800c11c:	20007ccc 	.word	0x20007ccc

0800c120 <_malloc_r>:
 800c120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c124:	1ccd      	adds	r5, r1, #3
 800c126:	f025 0503 	bic.w	r5, r5, #3
 800c12a:	3508      	adds	r5, #8
 800c12c:	2d0c      	cmp	r5, #12
 800c12e:	bf38      	it	cc
 800c130:	250c      	movcc	r5, #12
 800c132:	2d00      	cmp	r5, #0
 800c134:	4606      	mov	r6, r0
 800c136:	db01      	blt.n	800c13c <_malloc_r+0x1c>
 800c138:	42a9      	cmp	r1, r5
 800c13a:	d904      	bls.n	800c146 <_malloc_r+0x26>
 800c13c:	230c      	movs	r3, #12
 800c13e:	6033      	str	r3, [r6, #0]
 800c140:	2000      	movs	r0, #0
 800c142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c21c <_malloc_r+0xfc>
 800c14a:	f000 f869 	bl	800c220 <__malloc_lock>
 800c14e:	f8d8 3000 	ldr.w	r3, [r8]
 800c152:	461c      	mov	r4, r3
 800c154:	bb44      	cbnz	r4, 800c1a8 <_malloc_r+0x88>
 800c156:	4629      	mov	r1, r5
 800c158:	4630      	mov	r0, r6
 800c15a:	f7ff ffbf 	bl	800c0dc <sbrk_aligned>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	4604      	mov	r4, r0
 800c162:	d158      	bne.n	800c216 <_malloc_r+0xf6>
 800c164:	f8d8 4000 	ldr.w	r4, [r8]
 800c168:	4627      	mov	r7, r4
 800c16a:	2f00      	cmp	r7, #0
 800c16c:	d143      	bne.n	800c1f6 <_malloc_r+0xd6>
 800c16e:	2c00      	cmp	r4, #0
 800c170:	d04b      	beq.n	800c20a <_malloc_r+0xea>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	4639      	mov	r1, r7
 800c176:	4630      	mov	r0, r6
 800c178:	eb04 0903 	add.w	r9, r4, r3
 800c17c:	f000 fe50 	bl	800ce20 <_sbrk_r>
 800c180:	4581      	cmp	r9, r0
 800c182:	d142      	bne.n	800c20a <_malloc_r+0xea>
 800c184:	6821      	ldr	r1, [r4, #0]
 800c186:	1a6d      	subs	r5, r5, r1
 800c188:	4629      	mov	r1, r5
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff ffa6 	bl	800c0dc <sbrk_aligned>
 800c190:	3001      	adds	r0, #1
 800c192:	d03a      	beq.n	800c20a <_malloc_r+0xea>
 800c194:	6823      	ldr	r3, [r4, #0]
 800c196:	442b      	add	r3, r5
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	f8d8 3000 	ldr.w	r3, [r8]
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	bb62      	cbnz	r2, 800c1fc <_malloc_r+0xdc>
 800c1a2:	f8c8 7000 	str.w	r7, [r8]
 800c1a6:	e00f      	b.n	800c1c8 <_malloc_r+0xa8>
 800c1a8:	6822      	ldr	r2, [r4, #0]
 800c1aa:	1b52      	subs	r2, r2, r5
 800c1ac:	d420      	bmi.n	800c1f0 <_malloc_r+0xd0>
 800c1ae:	2a0b      	cmp	r2, #11
 800c1b0:	d917      	bls.n	800c1e2 <_malloc_r+0xc2>
 800c1b2:	1961      	adds	r1, r4, r5
 800c1b4:	42a3      	cmp	r3, r4
 800c1b6:	6025      	str	r5, [r4, #0]
 800c1b8:	bf18      	it	ne
 800c1ba:	6059      	strne	r1, [r3, #4]
 800c1bc:	6863      	ldr	r3, [r4, #4]
 800c1be:	bf08      	it	eq
 800c1c0:	f8c8 1000 	streq.w	r1, [r8]
 800c1c4:	5162      	str	r2, [r4, r5]
 800c1c6:	604b      	str	r3, [r1, #4]
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f000 f82f 	bl	800c22c <__malloc_unlock>
 800c1ce:	f104 000b 	add.w	r0, r4, #11
 800c1d2:	1d23      	adds	r3, r4, #4
 800c1d4:	f020 0007 	bic.w	r0, r0, #7
 800c1d8:	1ac2      	subs	r2, r0, r3
 800c1da:	bf1c      	itt	ne
 800c1dc:	1a1b      	subne	r3, r3, r0
 800c1de:	50a3      	strne	r3, [r4, r2]
 800c1e0:	e7af      	b.n	800c142 <_malloc_r+0x22>
 800c1e2:	6862      	ldr	r2, [r4, #4]
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	bf0c      	ite	eq
 800c1e8:	f8c8 2000 	streq.w	r2, [r8]
 800c1ec:	605a      	strne	r2, [r3, #4]
 800c1ee:	e7eb      	b.n	800c1c8 <_malloc_r+0xa8>
 800c1f0:	4623      	mov	r3, r4
 800c1f2:	6864      	ldr	r4, [r4, #4]
 800c1f4:	e7ae      	b.n	800c154 <_malloc_r+0x34>
 800c1f6:	463c      	mov	r4, r7
 800c1f8:	687f      	ldr	r7, [r7, #4]
 800c1fa:	e7b6      	b.n	800c16a <_malloc_r+0x4a>
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	42a3      	cmp	r3, r4
 800c202:	d1fb      	bne.n	800c1fc <_malloc_r+0xdc>
 800c204:	2300      	movs	r3, #0
 800c206:	6053      	str	r3, [r2, #4]
 800c208:	e7de      	b.n	800c1c8 <_malloc_r+0xa8>
 800c20a:	230c      	movs	r3, #12
 800c20c:	6033      	str	r3, [r6, #0]
 800c20e:	4630      	mov	r0, r6
 800c210:	f000 f80c 	bl	800c22c <__malloc_unlock>
 800c214:	e794      	b.n	800c140 <_malloc_r+0x20>
 800c216:	6005      	str	r5, [r0, #0]
 800c218:	e7d6      	b.n	800c1c8 <_malloc_r+0xa8>
 800c21a:	bf00      	nop
 800c21c:	20007cd0 	.word	0x20007cd0

0800c220 <__malloc_lock>:
 800c220:	4801      	ldr	r0, [pc, #4]	@ (800c228 <__malloc_lock+0x8>)
 800c222:	f7ff b8ba 	b.w	800b39a <__retarget_lock_acquire_recursive>
 800c226:	bf00      	nop
 800c228:	20007cc8 	.word	0x20007cc8

0800c22c <__malloc_unlock>:
 800c22c:	4801      	ldr	r0, [pc, #4]	@ (800c234 <__malloc_unlock+0x8>)
 800c22e:	f7ff b8b5 	b.w	800b39c <__retarget_lock_release_recursive>
 800c232:	bf00      	nop
 800c234:	20007cc8 	.word	0x20007cc8

0800c238 <_Balloc>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	69c6      	ldr	r6, [r0, #28]
 800c23c:	4604      	mov	r4, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	b976      	cbnz	r6, 800c260 <_Balloc+0x28>
 800c242:	2010      	movs	r0, #16
 800c244:	f7ff ff42 	bl	800c0cc <malloc>
 800c248:	4602      	mov	r2, r0
 800c24a:	61e0      	str	r0, [r4, #28]
 800c24c:	b920      	cbnz	r0, 800c258 <_Balloc+0x20>
 800c24e:	4b18      	ldr	r3, [pc, #96]	@ (800c2b0 <_Balloc+0x78>)
 800c250:	4818      	ldr	r0, [pc, #96]	@ (800c2b4 <_Balloc+0x7c>)
 800c252:	216b      	movs	r1, #107	@ 0x6b
 800c254:	f000 fe02 	bl	800ce5c <__assert_func>
 800c258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c25c:	6006      	str	r6, [r0, #0]
 800c25e:	60c6      	str	r6, [r0, #12]
 800c260:	69e6      	ldr	r6, [r4, #28]
 800c262:	68f3      	ldr	r3, [r6, #12]
 800c264:	b183      	cbz	r3, 800c288 <_Balloc+0x50>
 800c266:	69e3      	ldr	r3, [r4, #28]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c26e:	b9b8      	cbnz	r0, 800c2a0 <_Balloc+0x68>
 800c270:	2101      	movs	r1, #1
 800c272:	fa01 f605 	lsl.w	r6, r1, r5
 800c276:	1d72      	adds	r2, r6, #5
 800c278:	0092      	lsls	r2, r2, #2
 800c27a:	4620      	mov	r0, r4
 800c27c:	f000 fe0c 	bl	800ce98 <_calloc_r>
 800c280:	b160      	cbz	r0, 800c29c <_Balloc+0x64>
 800c282:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c286:	e00e      	b.n	800c2a6 <_Balloc+0x6e>
 800c288:	2221      	movs	r2, #33	@ 0x21
 800c28a:	2104      	movs	r1, #4
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 fe03 	bl	800ce98 <_calloc_r>
 800c292:	69e3      	ldr	r3, [r4, #28]
 800c294:	60f0      	str	r0, [r6, #12]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e4      	bne.n	800c266 <_Balloc+0x2e>
 800c29c:	2000      	movs	r0, #0
 800c29e:	bd70      	pop	{r4, r5, r6, pc}
 800c2a0:	6802      	ldr	r2, [r0, #0]
 800c2a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2ac:	e7f7      	b.n	800c29e <_Balloc+0x66>
 800c2ae:	bf00      	nop
 800c2b0:	0800d432 	.word	0x0800d432
 800c2b4:	0800d4b2 	.word	0x0800d4b2

0800c2b8 <_Bfree>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	69c6      	ldr	r6, [r0, #28]
 800c2bc:	4605      	mov	r5, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	b976      	cbnz	r6, 800c2e0 <_Bfree+0x28>
 800c2c2:	2010      	movs	r0, #16
 800c2c4:	f7ff ff02 	bl	800c0cc <malloc>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	61e8      	str	r0, [r5, #28]
 800c2cc:	b920      	cbnz	r0, 800c2d8 <_Bfree+0x20>
 800c2ce:	4b09      	ldr	r3, [pc, #36]	@ (800c2f4 <_Bfree+0x3c>)
 800c2d0:	4809      	ldr	r0, [pc, #36]	@ (800c2f8 <_Bfree+0x40>)
 800c2d2:	218f      	movs	r1, #143	@ 0x8f
 800c2d4:	f000 fdc2 	bl	800ce5c <__assert_func>
 800c2d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2dc:	6006      	str	r6, [r0, #0]
 800c2de:	60c6      	str	r6, [r0, #12]
 800c2e0:	b13c      	cbz	r4, 800c2f2 <_Bfree+0x3a>
 800c2e2:	69eb      	ldr	r3, [r5, #28]
 800c2e4:	6862      	ldr	r2, [r4, #4]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2ec:	6021      	str	r1, [r4, #0]
 800c2ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}
 800c2f4:	0800d432 	.word	0x0800d432
 800c2f8:	0800d4b2 	.word	0x0800d4b2

0800c2fc <__multadd>:
 800c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c300:	690d      	ldr	r5, [r1, #16]
 800c302:	4607      	mov	r7, r0
 800c304:	460c      	mov	r4, r1
 800c306:	461e      	mov	r6, r3
 800c308:	f101 0c14 	add.w	ip, r1, #20
 800c30c:	2000      	movs	r0, #0
 800c30e:	f8dc 3000 	ldr.w	r3, [ip]
 800c312:	b299      	uxth	r1, r3
 800c314:	fb02 6101 	mla	r1, r2, r1, r6
 800c318:	0c1e      	lsrs	r6, r3, #16
 800c31a:	0c0b      	lsrs	r3, r1, #16
 800c31c:	fb02 3306 	mla	r3, r2, r6, r3
 800c320:	b289      	uxth	r1, r1
 800c322:	3001      	adds	r0, #1
 800c324:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c328:	4285      	cmp	r5, r0
 800c32a:	f84c 1b04 	str.w	r1, [ip], #4
 800c32e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c332:	dcec      	bgt.n	800c30e <__multadd+0x12>
 800c334:	b30e      	cbz	r6, 800c37a <__multadd+0x7e>
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	42ab      	cmp	r3, r5
 800c33a:	dc19      	bgt.n	800c370 <__multadd+0x74>
 800c33c:	6861      	ldr	r1, [r4, #4]
 800c33e:	4638      	mov	r0, r7
 800c340:	3101      	adds	r1, #1
 800c342:	f7ff ff79 	bl	800c238 <_Balloc>
 800c346:	4680      	mov	r8, r0
 800c348:	b928      	cbnz	r0, 800c356 <__multadd+0x5a>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4b0c      	ldr	r3, [pc, #48]	@ (800c380 <__multadd+0x84>)
 800c34e:	480d      	ldr	r0, [pc, #52]	@ (800c384 <__multadd+0x88>)
 800c350:	21ba      	movs	r1, #186	@ 0xba
 800c352:	f000 fd83 	bl	800ce5c <__assert_func>
 800c356:	6922      	ldr	r2, [r4, #16]
 800c358:	3202      	adds	r2, #2
 800c35a:	f104 010c 	add.w	r1, r4, #12
 800c35e:	0092      	lsls	r2, r2, #2
 800c360:	300c      	adds	r0, #12
 800c362:	f000 fd6d 	bl	800ce40 <memcpy>
 800c366:	4621      	mov	r1, r4
 800c368:	4638      	mov	r0, r7
 800c36a:	f7ff ffa5 	bl	800c2b8 <_Bfree>
 800c36e:	4644      	mov	r4, r8
 800c370:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c374:	3501      	adds	r5, #1
 800c376:	615e      	str	r6, [r3, #20]
 800c378:	6125      	str	r5, [r4, #16]
 800c37a:	4620      	mov	r0, r4
 800c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c380:	0800d4a1 	.word	0x0800d4a1
 800c384:	0800d4b2 	.word	0x0800d4b2

0800c388 <__hi0bits>:
 800c388:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c38c:	4603      	mov	r3, r0
 800c38e:	bf36      	itet	cc
 800c390:	0403      	lslcc	r3, r0, #16
 800c392:	2000      	movcs	r0, #0
 800c394:	2010      	movcc	r0, #16
 800c396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c39a:	bf3c      	itt	cc
 800c39c:	021b      	lslcc	r3, r3, #8
 800c39e:	3008      	addcc	r0, #8
 800c3a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3a4:	bf3c      	itt	cc
 800c3a6:	011b      	lslcc	r3, r3, #4
 800c3a8:	3004      	addcc	r0, #4
 800c3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3ae:	bf3c      	itt	cc
 800c3b0:	009b      	lslcc	r3, r3, #2
 800c3b2:	3002      	addcc	r0, #2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	db05      	blt.n	800c3c4 <__hi0bits+0x3c>
 800c3b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3bc:	f100 0001 	add.w	r0, r0, #1
 800c3c0:	bf08      	it	eq
 800c3c2:	2020      	moveq	r0, #32
 800c3c4:	4770      	bx	lr

0800c3c6 <__lo0bits>:
 800c3c6:	6803      	ldr	r3, [r0, #0]
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	f013 0007 	ands.w	r0, r3, #7
 800c3ce:	d00b      	beq.n	800c3e8 <__lo0bits+0x22>
 800c3d0:	07d9      	lsls	r1, r3, #31
 800c3d2:	d421      	bmi.n	800c418 <__lo0bits+0x52>
 800c3d4:	0798      	lsls	r0, r3, #30
 800c3d6:	bf49      	itett	mi
 800c3d8:	085b      	lsrmi	r3, r3, #1
 800c3da:	089b      	lsrpl	r3, r3, #2
 800c3dc:	2001      	movmi	r0, #1
 800c3de:	6013      	strmi	r3, [r2, #0]
 800c3e0:	bf5c      	itt	pl
 800c3e2:	6013      	strpl	r3, [r2, #0]
 800c3e4:	2002      	movpl	r0, #2
 800c3e6:	4770      	bx	lr
 800c3e8:	b299      	uxth	r1, r3
 800c3ea:	b909      	cbnz	r1, 800c3f0 <__lo0bits+0x2a>
 800c3ec:	0c1b      	lsrs	r3, r3, #16
 800c3ee:	2010      	movs	r0, #16
 800c3f0:	b2d9      	uxtb	r1, r3
 800c3f2:	b909      	cbnz	r1, 800c3f8 <__lo0bits+0x32>
 800c3f4:	3008      	adds	r0, #8
 800c3f6:	0a1b      	lsrs	r3, r3, #8
 800c3f8:	0719      	lsls	r1, r3, #28
 800c3fa:	bf04      	itt	eq
 800c3fc:	091b      	lsreq	r3, r3, #4
 800c3fe:	3004      	addeq	r0, #4
 800c400:	0799      	lsls	r1, r3, #30
 800c402:	bf04      	itt	eq
 800c404:	089b      	lsreq	r3, r3, #2
 800c406:	3002      	addeq	r0, #2
 800c408:	07d9      	lsls	r1, r3, #31
 800c40a:	d403      	bmi.n	800c414 <__lo0bits+0x4e>
 800c40c:	085b      	lsrs	r3, r3, #1
 800c40e:	f100 0001 	add.w	r0, r0, #1
 800c412:	d003      	beq.n	800c41c <__lo0bits+0x56>
 800c414:	6013      	str	r3, [r2, #0]
 800c416:	4770      	bx	lr
 800c418:	2000      	movs	r0, #0
 800c41a:	4770      	bx	lr
 800c41c:	2020      	movs	r0, #32
 800c41e:	4770      	bx	lr

0800c420 <__i2b>:
 800c420:	b510      	push	{r4, lr}
 800c422:	460c      	mov	r4, r1
 800c424:	2101      	movs	r1, #1
 800c426:	f7ff ff07 	bl	800c238 <_Balloc>
 800c42a:	4602      	mov	r2, r0
 800c42c:	b928      	cbnz	r0, 800c43a <__i2b+0x1a>
 800c42e:	4b05      	ldr	r3, [pc, #20]	@ (800c444 <__i2b+0x24>)
 800c430:	4805      	ldr	r0, [pc, #20]	@ (800c448 <__i2b+0x28>)
 800c432:	f240 1145 	movw	r1, #325	@ 0x145
 800c436:	f000 fd11 	bl	800ce5c <__assert_func>
 800c43a:	2301      	movs	r3, #1
 800c43c:	6144      	str	r4, [r0, #20]
 800c43e:	6103      	str	r3, [r0, #16]
 800c440:	bd10      	pop	{r4, pc}
 800c442:	bf00      	nop
 800c444:	0800d4a1 	.word	0x0800d4a1
 800c448:	0800d4b2 	.word	0x0800d4b2

0800c44c <__multiply>:
 800c44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c450:	4614      	mov	r4, r2
 800c452:	690a      	ldr	r2, [r1, #16]
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	429a      	cmp	r2, r3
 800c458:	bfa8      	it	ge
 800c45a:	4623      	movge	r3, r4
 800c45c:	460f      	mov	r7, r1
 800c45e:	bfa4      	itt	ge
 800c460:	460c      	movge	r4, r1
 800c462:	461f      	movge	r7, r3
 800c464:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c468:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c46c:	68a3      	ldr	r3, [r4, #8]
 800c46e:	6861      	ldr	r1, [r4, #4]
 800c470:	eb0a 0609 	add.w	r6, sl, r9
 800c474:	42b3      	cmp	r3, r6
 800c476:	b085      	sub	sp, #20
 800c478:	bfb8      	it	lt
 800c47a:	3101      	addlt	r1, #1
 800c47c:	f7ff fedc 	bl	800c238 <_Balloc>
 800c480:	b930      	cbnz	r0, 800c490 <__multiply+0x44>
 800c482:	4602      	mov	r2, r0
 800c484:	4b44      	ldr	r3, [pc, #272]	@ (800c598 <__multiply+0x14c>)
 800c486:	4845      	ldr	r0, [pc, #276]	@ (800c59c <__multiply+0x150>)
 800c488:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c48c:	f000 fce6 	bl	800ce5c <__assert_func>
 800c490:	f100 0514 	add.w	r5, r0, #20
 800c494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c498:	462b      	mov	r3, r5
 800c49a:	2200      	movs	r2, #0
 800c49c:	4543      	cmp	r3, r8
 800c49e:	d321      	bcc.n	800c4e4 <__multiply+0x98>
 800c4a0:	f107 0114 	add.w	r1, r7, #20
 800c4a4:	f104 0214 	add.w	r2, r4, #20
 800c4a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c4ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c4b0:	9302      	str	r3, [sp, #8]
 800c4b2:	1b13      	subs	r3, r2, r4
 800c4b4:	3b15      	subs	r3, #21
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	f104 0715 	add.w	r7, r4, #21
 800c4c0:	42ba      	cmp	r2, r7
 800c4c2:	bf38      	it	cc
 800c4c4:	2304      	movcc	r3, #4
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	9103      	str	r1, [sp, #12]
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	d80c      	bhi.n	800c4ea <__multiply+0x9e>
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	dd03      	ble.n	800c4dc <__multiply+0x90>
 800c4d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d05b      	beq.n	800c594 <__multiply+0x148>
 800c4dc:	6106      	str	r6, [r0, #16]
 800c4de:	b005      	add	sp, #20
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	f843 2b04 	str.w	r2, [r3], #4
 800c4e8:	e7d8      	b.n	800c49c <__multiply+0x50>
 800c4ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800c4ee:	f1ba 0f00 	cmp.w	sl, #0
 800c4f2:	d024      	beq.n	800c53e <__multiply+0xf2>
 800c4f4:	f104 0e14 	add.w	lr, r4, #20
 800c4f8:	46a9      	mov	r9, r5
 800c4fa:	f04f 0c00 	mov.w	ip, #0
 800c4fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c502:	f8d9 3000 	ldr.w	r3, [r9]
 800c506:	fa1f fb87 	uxth.w	fp, r7
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c510:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c514:	f8d9 7000 	ldr.w	r7, [r9]
 800c518:	4463      	add	r3, ip
 800c51a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c51e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c522:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c526:	b29b      	uxth	r3, r3
 800c528:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c52c:	4572      	cmp	r2, lr
 800c52e:	f849 3b04 	str.w	r3, [r9], #4
 800c532:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c536:	d8e2      	bhi.n	800c4fe <__multiply+0xb2>
 800c538:	9b01      	ldr	r3, [sp, #4]
 800c53a:	f845 c003 	str.w	ip, [r5, r3]
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c544:	3104      	adds	r1, #4
 800c546:	f1b9 0f00 	cmp.w	r9, #0
 800c54a:	d021      	beq.n	800c590 <__multiply+0x144>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	f104 0c14 	add.w	ip, r4, #20
 800c552:	46ae      	mov	lr, r5
 800c554:	f04f 0a00 	mov.w	sl, #0
 800c558:	f8bc b000 	ldrh.w	fp, [ip]
 800c55c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c560:	fb09 770b 	mla	r7, r9, fp, r7
 800c564:	4457      	add	r7, sl
 800c566:	b29b      	uxth	r3, r3
 800c568:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c56c:	f84e 3b04 	str.w	r3, [lr], #4
 800c570:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c578:	f8be 3000 	ldrh.w	r3, [lr]
 800c57c:	fb09 330a 	mla	r3, r9, sl, r3
 800c580:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c584:	4562      	cmp	r2, ip
 800c586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c58a:	d8e5      	bhi.n	800c558 <__multiply+0x10c>
 800c58c:	9f01      	ldr	r7, [sp, #4]
 800c58e:	51eb      	str	r3, [r5, r7]
 800c590:	3504      	adds	r5, #4
 800c592:	e799      	b.n	800c4c8 <__multiply+0x7c>
 800c594:	3e01      	subs	r6, #1
 800c596:	e79b      	b.n	800c4d0 <__multiply+0x84>
 800c598:	0800d4a1 	.word	0x0800d4a1
 800c59c:	0800d4b2 	.word	0x0800d4b2

0800c5a0 <__pow5mult>:
 800c5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5a4:	4615      	mov	r5, r2
 800c5a6:	f012 0203 	ands.w	r2, r2, #3
 800c5aa:	4607      	mov	r7, r0
 800c5ac:	460e      	mov	r6, r1
 800c5ae:	d007      	beq.n	800c5c0 <__pow5mult+0x20>
 800c5b0:	4c25      	ldr	r4, [pc, #148]	@ (800c648 <__pow5mult+0xa8>)
 800c5b2:	3a01      	subs	r2, #1
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ba:	f7ff fe9f 	bl	800c2fc <__multadd>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	10ad      	asrs	r5, r5, #2
 800c5c2:	d03d      	beq.n	800c640 <__pow5mult+0xa0>
 800c5c4:	69fc      	ldr	r4, [r7, #28]
 800c5c6:	b97c      	cbnz	r4, 800c5e8 <__pow5mult+0x48>
 800c5c8:	2010      	movs	r0, #16
 800c5ca:	f7ff fd7f 	bl	800c0cc <malloc>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	61f8      	str	r0, [r7, #28]
 800c5d2:	b928      	cbnz	r0, 800c5e0 <__pow5mult+0x40>
 800c5d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c64c <__pow5mult+0xac>)
 800c5d6:	481e      	ldr	r0, [pc, #120]	@ (800c650 <__pow5mult+0xb0>)
 800c5d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c5dc:	f000 fc3e 	bl	800ce5c <__assert_func>
 800c5e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5e4:	6004      	str	r4, [r0, #0]
 800c5e6:	60c4      	str	r4, [r0, #12]
 800c5e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c5ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5f0:	b94c      	cbnz	r4, 800c606 <__pow5mult+0x66>
 800c5f2:	f240 2171 	movw	r1, #625	@ 0x271
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	f7ff ff12 	bl	800c420 <__i2b>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c602:	4604      	mov	r4, r0
 800c604:	6003      	str	r3, [r0, #0]
 800c606:	f04f 0900 	mov.w	r9, #0
 800c60a:	07eb      	lsls	r3, r5, #31
 800c60c:	d50a      	bpl.n	800c624 <__pow5mult+0x84>
 800c60e:	4631      	mov	r1, r6
 800c610:	4622      	mov	r2, r4
 800c612:	4638      	mov	r0, r7
 800c614:	f7ff ff1a 	bl	800c44c <__multiply>
 800c618:	4631      	mov	r1, r6
 800c61a:	4680      	mov	r8, r0
 800c61c:	4638      	mov	r0, r7
 800c61e:	f7ff fe4b 	bl	800c2b8 <_Bfree>
 800c622:	4646      	mov	r6, r8
 800c624:	106d      	asrs	r5, r5, #1
 800c626:	d00b      	beq.n	800c640 <__pow5mult+0xa0>
 800c628:	6820      	ldr	r0, [r4, #0]
 800c62a:	b938      	cbnz	r0, 800c63c <__pow5mult+0x9c>
 800c62c:	4622      	mov	r2, r4
 800c62e:	4621      	mov	r1, r4
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff ff0b 	bl	800c44c <__multiply>
 800c636:	6020      	str	r0, [r4, #0]
 800c638:	f8c0 9000 	str.w	r9, [r0]
 800c63c:	4604      	mov	r4, r0
 800c63e:	e7e4      	b.n	800c60a <__pow5mult+0x6a>
 800c640:	4630      	mov	r0, r6
 800c642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c646:	bf00      	nop
 800c648:	0800d50c 	.word	0x0800d50c
 800c64c:	0800d432 	.word	0x0800d432
 800c650:	0800d4b2 	.word	0x0800d4b2

0800c654 <__lshift>:
 800c654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c658:	460c      	mov	r4, r1
 800c65a:	6849      	ldr	r1, [r1, #4]
 800c65c:	6923      	ldr	r3, [r4, #16]
 800c65e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c662:	68a3      	ldr	r3, [r4, #8]
 800c664:	4607      	mov	r7, r0
 800c666:	4691      	mov	r9, r2
 800c668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c66c:	f108 0601 	add.w	r6, r8, #1
 800c670:	42b3      	cmp	r3, r6
 800c672:	db0b      	blt.n	800c68c <__lshift+0x38>
 800c674:	4638      	mov	r0, r7
 800c676:	f7ff fddf 	bl	800c238 <_Balloc>
 800c67a:	4605      	mov	r5, r0
 800c67c:	b948      	cbnz	r0, 800c692 <__lshift+0x3e>
 800c67e:	4602      	mov	r2, r0
 800c680:	4b28      	ldr	r3, [pc, #160]	@ (800c724 <__lshift+0xd0>)
 800c682:	4829      	ldr	r0, [pc, #164]	@ (800c728 <__lshift+0xd4>)
 800c684:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c688:	f000 fbe8 	bl	800ce5c <__assert_func>
 800c68c:	3101      	adds	r1, #1
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	e7ee      	b.n	800c670 <__lshift+0x1c>
 800c692:	2300      	movs	r3, #0
 800c694:	f100 0114 	add.w	r1, r0, #20
 800c698:	f100 0210 	add.w	r2, r0, #16
 800c69c:	4618      	mov	r0, r3
 800c69e:	4553      	cmp	r3, sl
 800c6a0:	db33      	blt.n	800c70a <__lshift+0xb6>
 800c6a2:	6920      	ldr	r0, [r4, #16]
 800c6a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6a8:	f104 0314 	add.w	r3, r4, #20
 800c6ac:	f019 091f 	ands.w	r9, r9, #31
 800c6b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6b8:	d02b      	beq.n	800c712 <__lshift+0xbe>
 800c6ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c6be:	468a      	mov	sl, r1
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	6818      	ldr	r0, [r3, #0]
 800c6c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c6c8:	4310      	orrs	r0, r2
 800c6ca:	f84a 0b04 	str.w	r0, [sl], #4
 800c6ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d2:	459c      	cmp	ip, r3
 800c6d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6d8:	d8f3      	bhi.n	800c6c2 <__lshift+0x6e>
 800c6da:	ebac 0304 	sub.w	r3, ip, r4
 800c6de:	3b15      	subs	r3, #21
 800c6e0:	f023 0303 	bic.w	r3, r3, #3
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	f104 0015 	add.w	r0, r4, #21
 800c6ea:	4584      	cmp	ip, r0
 800c6ec:	bf38      	it	cc
 800c6ee:	2304      	movcc	r3, #4
 800c6f0:	50ca      	str	r2, [r1, r3]
 800c6f2:	b10a      	cbz	r2, 800c6f8 <__lshift+0xa4>
 800c6f4:	f108 0602 	add.w	r6, r8, #2
 800c6f8:	3e01      	subs	r6, #1
 800c6fa:	4638      	mov	r0, r7
 800c6fc:	612e      	str	r6, [r5, #16]
 800c6fe:	4621      	mov	r1, r4
 800c700:	f7ff fdda 	bl	800c2b8 <_Bfree>
 800c704:	4628      	mov	r0, r5
 800c706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c70a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c70e:	3301      	adds	r3, #1
 800c710:	e7c5      	b.n	800c69e <__lshift+0x4a>
 800c712:	3904      	subs	r1, #4
 800c714:	f853 2b04 	ldr.w	r2, [r3], #4
 800c718:	f841 2f04 	str.w	r2, [r1, #4]!
 800c71c:	459c      	cmp	ip, r3
 800c71e:	d8f9      	bhi.n	800c714 <__lshift+0xc0>
 800c720:	e7ea      	b.n	800c6f8 <__lshift+0xa4>
 800c722:	bf00      	nop
 800c724:	0800d4a1 	.word	0x0800d4a1
 800c728:	0800d4b2 	.word	0x0800d4b2

0800c72c <__mcmp>:
 800c72c:	690a      	ldr	r2, [r1, #16]
 800c72e:	4603      	mov	r3, r0
 800c730:	6900      	ldr	r0, [r0, #16]
 800c732:	1a80      	subs	r0, r0, r2
 800c734:	b530      	push	{r4, r5, lr}
 800c736:	d10e      	bne.n	800c756 <__mcmp+0x2a>
 800c738:	3314      	adds	r3, #20
 800c73a:	3114      	adds	r1, #20
 800c73c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c740:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c744:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c748:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c74c:	4295      	cmp	r5, r2
 800c74e:	d003      	beq.n	800c758 <__mcmp+0x2c>
 800c750:	d205      	bcs.n	800c75e <__mcmp+0x32>
 800c752:	f04f 30ff 	mov.w	r0, #4294967295
 800c756:	bd30      	pop	{r4, r5, pc}
 800c758:	42a3      	cmp	r3, r4
 800c75a:	d3f3      	bcc.n	800c744 <__mcmp+0x18>
 800c75c:	e7fb      	b.n	800c756 <__mcmp+0x2a>
 800c75e:	2001      	movs	r0, #1
 800c760:	e7f9      	b.n	800c756 <__mcmp+0x2a>
	...

0800c764 <__mdiff>:
 800c764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	4689      	mov	r9, r1
 800c76a:	4606      	mov	r6, r0
 800c76c:	4611      	mov	r1, r2
 800c76e:	4648      	mov	r0, r9
 800c770:	4614      	mov	r4, r2
 800c772:	f7ff ffdb 	bl	800c72c <__mcmp>
 800c776:	1e05      	subs	r5, r0, #0
 800c778:	d112      	bne.n	800c7a0 <__mdiff+0x3c>
 800c77a:	4629      	mov	r1, r5
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7ff fd5b 	bl	800c238 <_Balloc>
 800c782:	4602      	mov	r2, r0
 800c784:	b928      	cbnz	r0, 800c792 <__mdiff+0x2e>
 800c786:	4b3f      	ldr	r3, [pc, #252]	@ (800c884 <__mdiff+0x120>)
 800c788:	f240 2137 	movw	r1, #567	@ 0x237
 800c78c:	483e      	ldr	r0, [pc, #248]	@ (800c888 <__mdiff+0x124>)
 800c78e:	f000 fb65 	bl	800ce5c <__assert_func>
 800c792:	2301      	movs	r3, #1
 800c794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c798:	4610      	mov	r0, r2
 800c79a:	b003      	add	sp, #12
 800c79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a0:	bfbc      	itt	lt
 800c7a2:	464b      	movlt	r3, r9
 800c7a4:	46a1      	movlt	r9, r4
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c7ac:	bfba      	itte	lt
 800c7ae:	461c      	movlt	r4, r3
 800c7b0:	2501      	movlt	r5, #1
 800c7b2:	2500      	movge	r5, #0
 800c7b4:	f7ff fd40 	bl	800c238 <_Balloc>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	b918      	cbnz	r0, 800c7c4 <__mdiff+0x60>
 800c7bc:	4b31      	ldr	r3, [pc, #196]	@ (800c884 <__mdiff+0x120>)
 800c7be:	f240 2145 	movw	r1, #581	@ 0x245
 800c7c2:	e7e3      	b.n	800c78c <__mdiff+0x28>
 800c7c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7c8:	6926      	ldr	r6, [r4, #16]
 800c7ca:	60c5      	str	r5, [r0, #12]
 800c7cc:	f109 0310 	add.w	r3, r9, #16
 800c7d0:	f109 0514 	add.w	r5, r9, #20
 800c7d4:	f104 0e14 	add.w	lr, r4, #20
 800c7d8:	f100 0b14 	add.w	fp, r0, #20
 800c7dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c7e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c7e4:	9301      	str	r3, [sp, #4]
 800c7e6:	46d9      	mov	r9, fp
 800c7e8:	f04f 0c00 	mov.w	ip, #0
 800c7ec:	9b01      	ldr	r3, [sp, #4]
 800c7ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c7f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c7f6:	9301      	str	r3, [sp, #4]
 800c7f8:	fa1f f38a 	uxth.w	r3, sl
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	b283      	uxth	r3, r0
 800c800:	1acb      	subs	r3, r1, r3
 800c802:	0c00      	lsrs	r0, r0, #16
 800c804:	4463      	add	r3, ip
 800c806:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c80a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c80e:	b29b      	uxth	r3, r3
 800c810:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c814:	4576      	cmp	r6, lr
 800c816:	f849 3b04 	str.w	r3, [r9], #4
 800c81a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c81e:	d8e5      	bhi.n	800c7ec <__mdiff+0x88>
 800c820:	1b33      	subs	r3, r6, r4
 800c822:	3b15      	subs	r3, #21
 800c824:	f023 0303 	bic.w	r3, r3, #3
 800c828:	3415      	adds	r4, #21
 800c82a:	3304      	adds	r3, #4
 800c82c:	42a6      	cmp	r6, r4
 800c82e:	bf38      	it	cc
 800c830:	2304      	movcc	r3, #4
 800c832:	441d      	add	r5, r3
 800c834:	445b      	add	r3, fp
 800c836:	461e      	mov	r6, r3
 800c838:	462c      	mov	r4, r5
 800c83a:	4544      	cmp	r4, r8
 800c83c:	d30e      	bcc.n	800c85c <__mdiff+0xf8>
 800c83e:	f108 0103 	add.w	r1, r8, #3
 800c842:	1b49      	subs	r1, r1, r5
 800c844:	f021 0103 	bic.w	r1, r1, #3
 800c848:	3d03      	subs	r5, #3
 800c84a:	45a8      	cmp	r8, r5
 800c84c:	bf38      	it	cc
 800c84e:	2100      	movcc	r1, #0
 800c850:	440b      	add	r3, r1
 800c852:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c856:	b191      	cbz	r1, 800c87e <__mdiff+0x11a>
 800c858:	6117      	str	r7, [r2, #16]
 800c85a:	e79d      	b.n	800c798 <__mdiff+0x34>
 800c85c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c860:	46e6      	mov	lr, ip
 800c862:	0c08      	lsrs	r0, r1, #16
 800c864:	fa1c fc81 	uxtah	ip, ip, r1
 800c868:	4471      	add	r1, lr
 800c86a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c86e:	b289      	uxth	r1, r1
 800c870:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c874:	f846 1b04 	str.w	r1, [r6], #4
 800c878:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c87c:	e7dd      	b.n	800c83a <__mdiff+0xd6>
 800c87e:	3f01      	subs	r7, #1
 800c880:	e7e7      	b.n	800c852 <__mdiff+0xee>
 800c882:	bf00      	nop
 800c884:	0800d4a1 	.word	0x0800d4a1
 800c888:	0800d4b2 	.word	0x0800d4b2

0800c88c <__d2b>:
 800c88c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c890:	460f      	mov	r7, r1
 800c892:	2101      	movs	r1, #1
 800c894:	ec59 8b10 	vmov	r8, r9, d0
 800c898:	4616      	mov	r6, r2
 800c89a:	f7ff fccd 	bl	800c238 <_Balloc>
 800c89e:	4604      	mov	r4, r0
 800c8a0:	b930      	cbnz	r0, 800c8b0 <__d2b+0x24>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	4b23      	ldr	r3, [pc, #140]	@ (800c934 <__d2b+0xa8>)
 800c8a6:	4824      	ldr	r0, [pc, #144]	@ (800c938 <__d2b+0xac>)
 800c8a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8ac:	f000 fad6 	bl	800ce5c <__assert_func>
 800c8b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8b8:	b10d      	cbz	r5, 800c8be <__d2b+0x32>
 800c8ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8be:	9301      	str	r3, [sp, #4]
 800c8c0:	f1b8 0300 	subs.w	r3, r8, #0
 800c8c4:	d023      	beq.n	800c90e <__d2b+0x82>
 800c8c6:	4668      	mov	r0, sp
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	f7ff fd7c 	bl	800c3c6 <__lo0bits>
 800c8ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8d2:	b1d0      	cbz	r0, 800c90a <__d2b+0x7e>
 800c8d4:	f1c0 0320 	rsb	r3, r0, #32
 800c8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8dc:	430b      	orrs	r3, r1
 800c8de:	40c2      	lsrs	r2, r0
 800c8e0:	6163      	str	r3, [r4, #20]
 800c8e2:	9201      	str	r2, [sp, #4]
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	61a3      	str	r3, [r4, #24]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	bf0c      	ite	eq
 800c8ec:	2201      	moveq	r2, #1
 800c8ee:	2202      	movne	r2, #2
 800c8f0:	6122      	str	r2, [r4, #16]
 800c8f2:	b1a5      	cbz	r5, 800c91e <__d2b+0x92>
 800c8f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8f8:	4405      	add	r5, r0
 800c8fa:	603d      	str	r5, [r7, #0]
 800c8fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c900:	6030      	str	r0, [r6, #0]
 800c902:	4620      	mov	r0, r4
 800c904:	b003      	add	sp, #12
 800c906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c90a:	6161      	str	r1, [r4, #20]
 800c90c:	e7ea      	b.n	800c8e4 <__d2b+0x58>
 800c90e:	a801      	add	r0, sp, #4
 800c910:	f7ff fd59 	bl	800c3c6 <__lo0bits>
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	6163      	str	r3, [r4, #20]
 800c918:	3020      	adds	r0, #32
 800c91a:	2201      	movs	r2, #1
 800c91c:	e7e8      	b.n	800c8f0 <__d2b+0x64>
 800c91e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c926:	6038      	str	r0, [r7, #0]
 800c928:	6918      	ldr	r0, [r3, #16]
 800c92a:	f7ff fd2d 	bl	800c388 <__hi0bits>
 800c92e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c932:	e7e5      	b.n	800c900 <__d2b+0x74>
 800c934:	0800d4a1 	.word	0x0800d4a1
 800c938:	0800d4b2 	.word	0x0800d4b2

0800c93c <__sfputc_r>:
 800c93c:	6893      	ldr	r3, [r2, #8]
 800c93e:	3b01      	subs	r3, #1
 800c940:	2b00      	cmp	r3, #0
 800c942:	b410      	push	{r4}
 800c944:	6093      	str	r3, [r2, #8]
 800c946:	da08      	bge.n	800c95a <__sfputc_r+0x1e>
 800c948:	6994      	ldr	r4, [r2, #24]
 800c94a:	42a3      	cmp	r3, r4
 800c94c:	db01      	blt.n	800c952 <__sfputc_r+0x16>
 800c94e:	290a      	cmp	r1, #10
 800c950:	d103      	bne.n	800c95a <__sfputc_r+0x1e>
 800c952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c956:	f7fe bc0e 	b.w	800b176 <__swbuf_r>
 800c95a:	6813      	ldr	r3, [r2, #0]
 800c95c:	1c58      	adds	r0, r3, #1
 800c95e:	6010      	str	r0, [r2, #0]
 800c960:	7019      	strb	r1, [r3, #0]
 800c962:	4608      	mov	r0, r1
 800c964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <__sfputs_r>:
 800c96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96c:	4606      	mov	r6, r0
 800c96e:	460f      	mov	r7, r1
 800c970:	4614      	mov	r4, r2
 800c972:	18d5      	adds	r5, r2, r3
 800c974:	42ac      	cmp	r4, r5
 800c976:	d101      	bne.n	800c97c <__sfputs_r+0x12>
 800c978:	2000      	movs	r0, #0
 800c97a:	e007      	b.n	800c98c <__sfputs_r+0x22>
 800c97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c980:	463a      	mov	r2, r7
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ffda 	bl	800c93c <__sfputc_r>
 800c988:	1c43      	adds	r3, r0, #1
 800c98a:	d1f3      	bne.n	800c974 <__sfputs_r+0xa>
 800c98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c990 <_vfiprintf_r>:
 800c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	460d      	mov	r5, r1
 800c996:	b09d      	sub	sp, #116	@ 0x74
 800c998:	4614      	mov	r4, r2
 800c99a:	4698      	mov	r8, r3
 800c99c:	4606      	mov	r6, r0
 800c99e:	b118      	cbz	r0, 800c9a8 <_vfiprintf_r+0x18>
 800c9a0:	6a03      	ldr	r3, [r0, #32]
 800c9a2:	b90b      	cbnz	r3, 800c9a8 <_vfiprintf_r+0x18>
 800c9a4:	f7fe fa4a 	bl	800ae3c <__sinit>
 800c9a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9aa:	07d9      	lsls	r1, r3, #31
 800c9ac:	d405      	bmi.n	800c9ba <_vfiprintf_r+0x2a>
 800c9ae:	89ab      	ldrh	r3, [r5, #12]
 800c9b0:	059a      	lsls	r2, r3, #22
 800c9b2:	d402      	bmi.n	800c9ba <_vfiprintf_r+0x2a>
 800c9b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9b6:	f7fe fcf0 	bl	800b39a <__retarget_lock_acquire_recursive>
 800c9ba:	89ab      	ldrh	r3, [r5, #12]
 800c9bc:	071b      	lsls	r3, r3, #28
 800c9be:	d501      	bpl.n	800c9c4 <_vfiprintf_r+0x34>
 800c9c0:	692b      	ldr	r3, [r5, #16]
 800c9c2:	b99b      	cbnz	r3, 800c9ec <_vfiprintf_r+0x5c>
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f7fe fc14 	bl	800b1f4 <__swsetup_r>
 800c9cc:	b170      	cbz	r0, 800c9ec <_vfiprintf_r+0x5c>
 800c9ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9d0:	07dc      	lsls	r4, r3, #31
 800c9d2:	d504      	bpl.n	800c9de <_vfiprintf_r+0x4e>
 800c9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d8:	b01d      	add	sp, #116	@ 0x74
 800c9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9de:	89ab      	ldrh	r3, [r5, #12]
 800c9e0:	0598      	lsls	r0, r3, #22
 800c9e2:	d4f7      	bmi.n	800c9d4 <_vfiprintf_r+0x44>
 800c9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9e6:	f7fe fcd9 	bl	800b39c <__retarget_lock_release_recursive>
 800c9ea:	e7f3      	b.n	800c9d4 <_vfiprintf_r+0x44>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9f0:	2320      	movs	r3, #32
 800c9f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9fa:	2330      	movs	r3, #48	@ 0x30
 800c9fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cbac <_vfiprintf_r+0x21c>
 800ca00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca04:	f04f 0901 	mov.w	r9, #1
 800ca08:	4623      	mov	r3, r4
 800ca0a:	469a      	mov	sl, r3
 800ca0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca10:	b10a      	cbz	r2, 800ca16 <_vfiprintf_r+0x86>
 800ca12:	2a25      	cmp	r2, #37	@ 0x25
 800ca14:	d1f9      	bne.n	800ca0a <_vfiprintf_r+0x7a>
 800ca16:	ebba 0b04 	subs.w	fp, sl, r4
 800ca1a:	d00b      	beq.n	800ca34 <_vfiprintf_r+0xa4>
 800ca1c:	465b      	mov	r3, fp
 800ca1e:	4622      	mov	r2, r4
 800ca20:	4629      	mov	r1, r5
 800ca22:	4630      	mov	r0, r6
 800ca24:	f7ff ffa1 	bl	800c96a <__sfputs_r>
 800ca28:	3001      	adds	r0, #1
 800ca2a:	f000 80a7 	beq.w	800cb7c <_vfiprintf_r+0x1ec>
 800ca2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca30:	445a      	add	r2, fp
 800ca32:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca34:	f89a 3000 	ldrb.w	r3, [sl]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 809f 	beq.w	800cb7c <_vfiprintf_r+0x1ec>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f04f 32ff 	mov.w	r2, #4294967295
 800ca44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca48:	f10a 0a01 	add.w	sl, sl, #1
 800ca4c:	9304      	str	r3, [sp, #16]
 800ca4e:	9307      	str	r3, [sp, #28]
 800ca50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca54:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca56:	4654      	mov	r4, sl
 800ca58:	2205      	movs	r2, #5
 800ca5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca5e:	4853      	ldr	r0, [pc, #332]	@ (800cbac <_vfiprintf_r+0x21c>)
 800ca60:	f7f3 fc66 	bl	8000330 <memchr>
 800ca64:	9a04      	ldr	r2, [sp, #16]
 800ca66:	b9d8      	cbnz	r0, 800caa0 <_vfiprintf_r+0x110>
 800ca68:	06d1      	lsls	r1, r2, #27
 800ca6a:	bf44      	itt	mi
 800ca6c:	2320      	movmi	r3, #32
 800ca6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca72:	0713      	lsls	r3, r2, #28
 800ca74:	bf44      	itt	mi
 800ca76:	232b      	movmi	r3, #43	@ 0x2b
 800ca78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca82:	d015      	beq.n	800cab0 <_vfiprintf_r+0x120>
 800ca84:	9a07      	ldr	r2, [sp, #28]
 800ca86:	4654      	mov	r4, sl
 800ca88:	2000      	movs	r0, #0
 800ca8a:	f04f 0c0a 	mov.w	ip, #10
 800ca8e:	4621      	mov	r1, r4
 800ca90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca94:	3b30      	subs	r3, #48	@ 0x30
 800ca96:	2b09      	cmp	r3, #9
 800ca98:	d94b      	bls.n	800cb32 <_vfiprintf_r+0x1a2>
 800ca9a:	b1b0      	cbz	r0, 800caca <_vfiprintf_r+0x13a>
 800ca9c:	9207      	str	r2, [sp, #28]
 800ca9e:	e014      	b.n	800caca <_vfiprintf_r+0x13a>
 800caa0:	eba0 0308 	sub.w	r3, r0, r8
 800caa4:	fa09 f303 	lsl.w	r3, r9, r3
 800caa8:	4313      	orrs	r3, r2
 800caaa:	9304      	str	r3, [sp, #16]
 800caac:	46a2      	mov	sl, r4
 800caae:	e7d2      	b.n	800ca56 <_vfiprintf_r+0xc6>
 800cab0:	9b03      	ldr	r3, [sp, #12]
 800cab2:	1d19      	adds	r1, r3, #4
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	9103      	str	r1, [sp, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	bfbb      	ittet	lt
 800cabc:	425b      	neglt	r3, r3
 800cabe:	f042 0202 	orrlt.w	r2, r2, #2
 800cac2:	9307      	strge	r3, [sp, #28]
 800cac4:	9307      	strlt	r3, [sp, #28]
 800cac6:	bfb8      	it	lt
 800cac8:	9204      	strlt	r2, [sp, #16]
 800caca:	7823      	ldrb	r3, [r4, #0]
 800cacc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cace:	d10a      	bne.n	800cae6 <_vfiprintf_r+0x156>
 800cad0:	7863      	ldrb	r3, [r4, #1]
 800cad2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cad4:	d132      	bne.n	800cb3c <_vfiprintf_r+0x1ac>
 800cad6:	9b03      	ldr	r3, [sp, #12]
 800cad8:	1d1a      	adds	r2, r3, #4
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	9203      	str	r2, [sp, #12]
 800cade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cae2:	3402      	adds	r4, #2
 800cae4:	9305      	str	r3, [sp, #20]
 800cae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cbbc <_vfiprintf_r+0x22c>
 800caea:	7821      	ldrb	r1, [r4, #0]
 800caec:	2203      	movs	r2, #3
 800caee:	4650      	mov	r0, sl
 800caf0:	f7f3 fc1e 	bl	8000330 <memchr>
 800caf4:	b138      	cbz	r0, 800cb06 <_vfiprintf_r+0x176>
 800caf6:	9b04      	ldr	r3, [sp, #16]
 800caf8:	eba0 000a 	sub.w	r0, r0, sl
 800cafc:	2240      	movs	r2, #64	@ 0x40
 800cafe:	4082      	lsls	r2, r0
 800cb00:	4313      	orrs	r3, r2
 800cb02:	3401      	adds	r4, #1
 800cb04:	9304      	str	r3, [sp, #16]
 800cb06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb0a:	4829      	ldr	r0, [pc, #164]	@ (800cbb0 <_vfiprintf_r+0x220>)
 800cb0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb10:	2206      	movs	r2, #6
 800cb12:	f7f3 fc0d 	bl	8000330 <memchr>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d03f      	beq.n	800cb9a <_vfiprintf_r+0x20a>
 800cb1a:	4b26      	ldr	r3, [pc, #152]	@ (800cbb4 <_vfiprintf_r+0x224>)
 800cb1c:	bb1b      	cbnz	r3, 800cb66 <_vfiprintf_r+0x1d6>
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	3307      	adds	r3, #7
 800cb22:	f023 0307 	bic.w	r3, r3, #7
 800cb26:	3308      	adds	r3, #8
 800cb28:	9303      	str	r3, [sp, #12]
 800cb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2c:	443b      	add	r3, r7
 800cb2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb30:	e76a      	b.n	800ca08 <_vfiprintf_r+0x78>
 800cb32:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb36:	460c      	mov	r4, r1
 800cb38:	2001      	movs	r0, #1
 800cb3a:	e7a8      	b.n	800ca8e <_vfiprintf_r+0xfe>
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	3401      	adds	r4, #1
 800cb40:	9305      	str	r3, [sp, #20]
 800cb42:	4619      	mov	r1, r3
 800cb44:	f04f 0c0a 	mov.w	ip, #10
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb4e:	3a30      	subs	r2, #48	@ 0x30
 800cb50:	2a09      	cmp	r2, #9
 800cb52:	d903      	bls.n	800cb5c <_vfiprintf_r+0x1cc>
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d0c6      	beq.n	800cae6 <_vfiprintf_r+0x156>
 800cb58:	9105      	str	r1, [sp, #20]
 800cb5a:	e7c4      	b.n	800cae6 <_vfiprintf_r+0x156>
 800cb5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb60:	4604      	mov	r4, r0
 800cb62:	2301      	movs	r3, #1
 800cb64:	e7f0      	b.n	800cb48 <_vfiprintf_r+0x1b8>
 800cb66:	ab03      	add	r3, sp, #12
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	462a      	mov	r2, r5
 800cb6c:	4b12      	ldr	r3, [pc, #72]	@ (800cbb8 <_vfiprintf_r+0x228>)
 800cb6e:	a904      	add	r1, sp, #16
 800cb70:	4630      	mov	r0, r6
 800cb72:	f7fd fd1f 	bl	800a5b4 <_printf_float>
 800cb76:	4607      	mov	r7, r0
 800cb78:	1c78      	adds	r0, r7, #1
 800cb7a:	d1d6      	bne.n	800cb2a <_vfiprintf_r+0x19a>
 800cb7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb7e:	07d9      	lsls	r1, r3, #31
 800cb80:	d405      	bmi.n	800cb8e <_vfiprintf_r+0x1fe>
 800cb82:	89ab      	ldrh	r3, [r5, #12]
 800cb84:	059a      	lsls	r2, r3, #22
 800cb86:	d402      	bmi.n	800cb8e <_vfiprintf_r+0x1fe>
 800cb88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb8a:	f7fe fc07 	bl	800b39c <__retarget_lock_release_recursive>
 800cb8e:	89ab      	ldrh	r3, [r5, #12]
 800cb90:	065b      	lsls	r3, r3, #25
 800cb92:	f53f af1f 	bmi.w	800c9d4 <_vfiprintf_r+0x44>
 800cb96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb98:	e71e      	b.n	800c9d8 <_vfiprintf_r+0x48>
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	462a      	mov	r2, r5
 800cba0:	4b05      	ldr	r3, [pc, #20]	@ (800cbb8 <_vfiprintf_r+0x228>)
 800cba2:	a904      	add	r1, sp, #16
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7fd ff9d 	bl	800aae4 <_printf_i>
 800cbaa:	e7e4      	b.n	800cb76 <_vfiprintf_r+0x1e6>
 800cbac:	0800d608 	.word	0x0800d608
 800cbb0:	0800d612 	.word	0x0800d612
 800cbb4:	0800a5b5 	.word	0x0800a5b5
 800cbb8:	0800c96b 	.word	0x0800c96b
 800cbbc:	0800d60e 	.word	0x0800d60e

0800cbc0 <__sflush_r>:
 800cbc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc8:	0716      	lsls	r6, r2, #28
 800cbca:	4605      	mov	r5, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	d454      	bmi.n	800cc7a <__sflush_r+0xba>
 800cbd0:	684b      	ldr	r3, [r1, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	dc02      	bgt.n	800cbdc <__sflush_r+0x1c>
 800cbd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	dd48      	ble.n	800cc6e <__sflush_r+0xae>
 800cbdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbde:	2e00      	cmp	r6, #0
 800cbe0:	d045      	beq.n	800cc6e <__sflush_r+0xae>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbe8:	682f      	ldr	r7, [r5, #0]
 800cbea:	6a21      	ldr	r1, [r4, #32]
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	d030      	beq.n	800cc52 <__sflush_r+0x92>
 800cbf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	0759      	lsls	r1, r3, #29
 800cbf6:	d505      	bpl.n	800cc04 <__sflush_r+0x44>
 800cbf8:	6863      	ldr	r3, [r4, #4]
 800cbfa:	1ad2      	subs	r2, r2, r3
 800cbfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbfe:	b10b      	cbz	r3, 800cc04 <__sflush_r+0x44>
 800cc00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc02:	1ad2      	subs	r2, r2, r3
 800cc04:	2300      	movs	r3, #0
 800cc06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc08:	6a21      	ldr	r1, [r4, #32]
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	47b0      	blx	r6
 800cc0e:	1c43      	adds	r3, r0, #1
 800cc10:	89a3      	ldrh	r3, [r4, #12]
 800cc12:	d106      	bne.n	800cc22 <__sflush_r+0x62>
 800cc14:	6829      	ldr	r1, [r5, #0]
 800cc16:	291d      	cmp	r1, #29
 800cc18:	d82b      	bhi.n	800cc72 <__sflush_r+0xb2>
 800cc1a:	4a2a      	ldr	r2, [pc, #168]	@ (800ccc4 <__sflush_r+0x104>)
 800cc1c:	410a      	asrs	r2, r1
 800cc1e:	07d6      	lsls	r6, r2, #31
 800cc20:	d427      	bmi.n	800cc72 <__sflush_r+0xb2>
 800cc22:	2200      	movs	r2, #0
 800cc24:	6062      	str	r2, [r4, #4]
 800cc26:	04d9      	lsls	r1, r3, #19
 800cc28:	6922      	ldr	r2, [r4, #16]
 800cc2a:	6022      	str	r2, [r4, #0]
 800cc2c:	d504      	bpl.n	800cc38 <__sflush_r+0x78>
 800cc2e:	1c42      	adds	r2, r0, #1
 800cc30:	d101      	bne.n	800cc36 <__sflush_r+0x76>
 800cc32:	682b      	ldr	r3, [r5, #0]
 800cc34:	b903      	cbnz	r3, 800cc38 <__sflush_r+0x78>
 800cc36:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc3a:	602f      	str	r7, [r5, #0]
 800cc3c:	b1b9      	cbz	r1, 800cc6e <__sflush_r+0xae>
 800cc3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc42:	4299      	cmp	r1, r3
 800cc44:	d002      	beq.n	800cc4c <__sflush_r+0x8c>
 800cc46:	4628      	mov	r0, r5
 800cc48:	f7ff f9f6 	bl	800c038 <_free_r>
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc50:	e00d      	b.n	800cc6e <__sflush_r+0xae>
 800cc52:	2301      	movs	r3, #1
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b0      	blx	r6
 800cc58:	4602      	mov	r2, r0
 800cc5a:	1c50      	adds	r0, r2, #1
 800cc5c:	d1c9      	bne.n	800cbf2 <__sflush_r+0x32>
 800cc5e:	682b      	ldr	r3, [r5, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d0c6      	beq.n	800cbf2 <__sflush_r+0x32>
 800cc64:	2b1d      	cmp	r3, #29
 800cc66:	d001      	beq.n	800cc6c <__sflush_r+0xac>
 800cc68:	2b16      	cmp	r3, #22
 800cc6a:	d11e      	bne.n	800ccaa <__sflush_r+0xea>
 800cc6c:	602f      	str	r7, [r5, #0]
 800cc6e:	2000      	movs	r0, #0
 800cc70:	e022      	b.n	800ccb8 <__sflush_r+0xf8>
 800cc72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc76:	b21b      	sxth	r3, r3
 800cc78:	e01b      	b.n	800ccb2 <__sflush_r+0xf2>
 800cc7a:	690f      	ldr	r7, [r1, #16]
 800cc7c:	2f00      	cmp	r7, #0
 800cc7e:	d0f6      	beq.n	800cc6e <__sflush_r+0xae>
 800cc80:	0793      	lsls	r3, r2, #30
 800cc82:	680e      	ldr	r6, [r1, #0]
 800cc84:	bf08      	it	eq
 800cc86:	694b      	ldreq	r3, [r1, #20]
 800cc88:	600f      	str	r7, [r1, #0]
 800cc8a:	bf18      	it	ne
 800cc8c:	2300      	movne	r3, #0
 800cc8e:	eba6 0807 	sub.w	r8, r6, r7
 800cc92:	608b      	str	r3, [r1, #8]
 800cc94:	f1b8 0f00 	cmp.w	r8, #0
 800cc98:	dde9      	ble.n	800cc6e <__sflush_r+0xae>
 800cc9a:	6a21      	ldr	r1, [r4, #32]
 800cc9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc9e:	4643      	mov	r3, r8
 800cca0:	463a      	mov	r2, r7
 800cca2:	4628      	mov	r0, r5
 800cca4:	47b0      	blx	r6
 800cca6:	2800      	cmp	r0, #0
 800cca8:	dc08      	bgt.n	800ccbc <__sflush_r+0xfc>
 800ccaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccb2:	81a3      	strh	r3, [r4, #12]
 800ccb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbc:	4407      	add	r7, r0
 800ccbe:	eba8 0800 	sub.w	r8, r8, r0
 800ccc2:	e7e7      	b.n	800cc94 <__sflush_r+0xd4>
 800ccc4:	dfbffffe 	.word	0xdfbffffe

0800ccc8 <_fflush_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	690b      	ldr	r3, [r1, #16]
 800cccc:	4605      	mov	r5, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	b913      	cbnz	r3, 800ccd8 <_fflush_r+0x10>
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	b118      	cbz	r0, 800cce2 <_fflush_r+0x1a>
 800ccda:	6a03      	ldr	r3, [r0, #32]
 800ccdc:	b90b      	cbnz	r3, 800cce2 <_fflush_r+0x1a>
 800ccde:	f7fe f8ad 	bl	800ae3c <__sinit>
 800cce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0f3      	beq.n	800ccd2 <_fflush_r+0xa>
 800ccea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ccec:	07d0      	lsls	r0, r2, #31
 800ccee:	d404      	bmi.n	800ccfa <_fflush_r+0x32>
 800ccf0:	0599      	lsls	r1, r3, #22
 800ccf2:	d402      	bmi.n	800ccfa <_fflush_r+0x32>
 800ccf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccf6:	f7fe fb50 	bl	800b39a <__retarget_lock_acquire_recursive>
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	f7ff ff5f 	bl	800cbc0 <__sflush_r>
 800cd02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd04:	07da      	lsls	r2, r3, #31
 800cd06:	4605      	mov	r5, r0
 800cd08:	d4e4      	bmi.n	800ccd4 <_fflush_r+0xc>
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	059b      	lsls	r3, r3, #22
 800cd0e:	d4e1      	bmi.n	800ccd4 <_fflush_r+0xc>
 800cd10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd12:	f7fe fb43 	bl	800b39c <__retarget_lock_release_recursive>
 800cd16:	e7dd      	b.n	800ccd4 <_fflush_r+0xc>

0800cd18 <__swhatbuf_r>:
 800cd18:	b570      	push	{r4, r5, r6, lr}
 800cd1a:	460c      	mov	r4, r1
 800cd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd20:	2900      	cmp	r1, #0
 800cd22:	b096      	sub	sp, #88	@ 0x58
 800cd24:	4615      	mov	r5, r2
 800cd26:	461e      	mov	r6, r3
 800cd28:	da0d      	bge.n	800cd46 <__swhatbuf_r+0x2e>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd30:	f04f 0100 	mov.w	r1, #0
 800cd34:	bf14      	ite	ne
 800cd36:	2340      	movne	r3, #64	@ 0x40
 800cd38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	6031      	str	r1, [r6, #0]
 800cd40:	602b      	str	r3, [r5, #0]
 800cd42:	b016      	add	sp, #88	@ 0x58
 800cd44:	bd70      	pop	{r4, r5, r6, pc}
 800cd46:	466a      	mov	r2, sp
 800cd48:	f000 f848 	bl	800cddc <_fstat_r>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	dbec      	blt.n	800cd2a <__swhatbuf_r+0x12>
 800cd50:	9901      	ldr	r1, [sp, #4]
 800cd52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd5a:	4259      	negs	r1, r3
 800cd5c:	4159      	adcs	r1, r3
 800cd5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd62:	e7eb      	b.n	800cd3c <__swhatbuf_r+0x24>

0800cd64 <__smakebuf_r>:
 800cd64:	898b      	ldrh	r3, [r1, #12]
 800cd66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd68:	079d      	lsls	r5, r3, #30
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	460c      	mov	r4, r1
 800cd6e:	d507      	bpl.n	800cd80 <__smakebuf_r+0x1c>
 800cd70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	6123      	str	r3, [r4, #16]
 800cd78:	2301      	movs	r3, #1
 800cd7a:	6163      	str	r3, [r4, #20]
 800cd7c:	b003      	add	sp, #12
 800cd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd80:	ab01      	add	r3, sp, #4
 800cd82:	466a      	mov	r2, sp
 800cd84:	f7ff ffc8 	bl	800cd18 <__swhatbuf_r>
 800cd88:	9f00      	ldr	r7, [sp, #0]
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f7ff f9c6 	bl	800c120 <_malloc_r>
 800cd94:	b948      	cbnz	r0, 800cdaa <__smakebuf_r+0x46>
 800cd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd9a:	059a      	lsls	r2, r3, #22
 800cd9c:	d4ee      	bmi.n	800cd7c <__smakebuf_r+0x18>
 800cd9e:	f023 0303 	bic.w	r3, r3, #3
 800cda2:	f043 0302 	orr.w	r3, r3, #2
 800cda6:	81a3      	strh	r3, [r4, #12]
 800cda8:	e7e2      	b.n	800cd70 <__smakebuf_r+0xc>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	6020      	str	r0, [r4, #0]
 800cdae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	9b01      	ldr	r3, [sp, #4]
 800cdb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cdba:	b15b      	cbz	r3, 800cdd4 <__smakebuf_r+0x70>
 800cdbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f000 f81d 	bl	800ce00 <_isatty_r>
 800cdc6:	b128      	cbz	r0, 800cdd4 <__smakebuf_r+0x70>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f023 0303 	bic.w	r3, r3, #3
 800cdce:	f043 0301 	orr.w	r3, r3, #1
 800cdd2:	81a3      	strh	r3, [r4, #12]
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	431d      	orrs	r5, r3
 800cdd8:	81a5      	strh	r5, [r4, #12]
 800cdda:	e7cf      	b.n	800cd7c <__smakebuf_r+0x18>

0800cddc <_fstat_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d07      	ldr	r5, [pc, #28]	@ (800cdfc <_fstat_r+0x20>)
 800cde0:	2300      	movs	r3, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	4611      	mov	r1, r2
 800cde8:	602b      	str	r3, [r5, #0]
 800cdea:	f7f4 fe03 	bl	80019f4 <_fstat>
 800cdee:	1c43      	adds	r3, r0, #1
 800cdf0:	d102      	bne.n	800cdf8 <_fstat_r+0x1c>
 800cdf2:	682b      	ldr	r3, [r5, #0]
 800cdf4:	b103      	cbz	r3, 800cdf8 <_fstat_r+0x1c>
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	bd38      	pop	{r3, r4, r5, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20007cc4 	.word	0x20007cc4

0800ce00 <_isatty_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d06      	ldr	r5, [pc, #24]	@ (800ce1c <_isatty_r+0x1c>)
 800ce04:	2300      	movs	r3, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	4608      	mov	r0, r1
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	f7f4 fd70 	bl	80018f0 <_isatty>
 800ce10:	1c43      	adds	r3, r0, #1
 800ce12:	d102      	bne.n	800ce1a <_isatty_r+0x1a>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	b103      	cbz	r3, 800ce1a <_isatty_r+0x1a>
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
 800ce1c:	20007cc4 	.word	0x20007cc4

0800ce20 <_sbrk_r>:
 800ce20:	b538      	push	{r3, r4, r5, lr}
 800ce22:	4d06      	ldr	r5, [pc, #24]	@ (800ce3c <_sbrk_r+0x1c>)
 800ce24:	2300      	movs	r3, #0
 800ce26:	4604      	mov	r4, r0
 800ce28:	4608      	mov	r0, r1
 800ce2a:	602b      	str	r3, [r5, #0]
 800ce2c:	f7f4 ff40 	bl	8001cb0 <_sbrk>
 800ce30:	1c43      	adds	r3, r0, #1
 800ce32:	d102      	bne.n	800ce3a <_sbrk_r+0x1a>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	b103      	cbz	r3, 800ce3a <_sbrk_r+0x1a>
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	bd38      	pop	{r3, r4, r5, pc}
 800ce3c:	20007cc4 	.word	0x20007cc4

0800ce40 <memcpy>:
 800ce40:	440a      	add	r2, r1
 800ce42:	4291      	cmp	r1, r2
 800ce44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce48:	d100      	bne.n	800ce4c <memcpy+0xc>
 800ce4a:	4770      	bx	lr
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce56:	4291      	cmp	r1, r2
 800ce58:	d1f9      	bne.n	800ce4e <memcpy+0xe>
 800ce5a:	bd10      	pop	{r4, pc}

0800ce5c <__assert_func>:
 800ce5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce5e:	4614      	mov	r4, r2
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b09      	ldr	r3, [pc, #36]	@ (800ce88 <__assert_func+0x2c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4605      	mov	r5, r0
 800ce68:	68d8      	ldr	r0, [r3, #12]
 800ce6a:	b954      	cbnz	r4, 800ce82 <__assert_func+0x26>
 800ce6c:	4b07      	ldr	r3, [pc, #28]	@ (800ce8c <__assert_func+0x30>)
 800ce6e:	461c      	mov	r4, r3
 800ce70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce74:	9100      	str	r1, [sp, #0]
 800ce76:	462b      	mov	r3, r5
 800ce78:	4905      	ldr	r1, [pc, #20]	@ (800ce90 <__assert_func+0x34>)
 800ce7a:	f000 f841 	bl	800cf00 <fiprintf>
 800ce7e:	f000 f851 	bl	800cf24 <abort>
 800ce82:	4b04      	ldr	r3, [pc, #16]	@ (800ce94 <__assert_func+0x38>)
 800ce84:	e7f4      	b.n	800ce70 <__assert_func+0x14>
 800ce86:	bf00      	nop
 800ce88:	20000018 	.word	0x20000018
 800ce8c:	0800d65e 	.word	0x0800d65e
 800ce90:	0800d630 	.word	0x0800d630
 800ce94:	0800d623 	.word	0x0800d623

0800ce98 <_calloc_r>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	fba1 5402 	umull	r5, r4, r1, r2
 800ce9e:	b93c      	cbnz	r4, 800ceb0 <_calloc_r+0x18>
 800cea0:	4629      	mov	r1, r5
 800cea2:	f7ff f93d 	bl	800c120 <_malloc_r>
 800cea6:	4606      	mov	r6, r0
 800cea8:	b928      	cbnz	r0, 800ceb6 <_calloc_r+0x1e>
 800ceaa:	2600      	movs	r6, #0
 800ceac:	4630      	mov	r0, r6
 800ceae:	bd70      	pop	{r4, r5, r6, pc}
 800ceb0:	220c      	movs	r2, #12
 800ceb2:	6002      	str	r2, [r0, #0]
 800ceb4:	e7f9      	b.n	800ceaa <_calloc_r+0x12>
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	4621      	mov	r1, r4
 800ceba:	f7fe f9f1 	bl	800b2a0 <memset>
 800cebe:	e7f5      	b.n	800ceac <_calloc_r+0x14>

0800cec0 <__ascii_mbtowc>:
 800cec0:	b082      	sub	sp, #8
 800cec2:	b901      	cbnz	r1, 800cec6 <__ascii_mbtowc+0x6>
 800cec4:	a901      	add	r1, sp, #4
 800cec6:	b142      	cbz	r2, 800ceda <__ascii_mbtowc+0x1a>
 800cec8:	b14b      	cbz	r3, 800cede <__ascii_mbtowc+0x1e>
 800ceca:	7813      	ldrb	r3, [r2, #0]
 800cecc:	600b      	str	r3, [r1, #0]
 800cece:	7812      	ldrb	r2, [r2, #0]
 800ced0:	1e10      	subs	r0, r2, #0
 800ced2:	bf18      	it	ne
 800ced4:	2001      	movne	r0, #1
 800ced6:	b002      	add	sp, #8
 800ced8:	4770      	bx	lr
 800ceda:	4610      	mov	r0, r2
 800cedc:	e7fb      	b.n	800ced6 <__ascii_mbtowc+0x16>
 800cede:	f06f 0001 	mvn.w	r0, #1
 800cee2:	e7f8      	b.n	800ced6 <__ascii_mbtowc+0x16>

0800cee4 <__ascii_wctomb>:
 800cee4:	4603      	mov	r3, r0
 800cee6:	4608      	mov	r0, r1
 800cee8:	b141      	cbz	r1, 800cefc <__ascii_wctomb+0x18>
 800ceea:	2aff      	cmp	r2, #255	@ 0xff
 800ceec:	d904      	bls.n	800cef8 <__ascii_wctomb+0x14>
 800ceee:	228a      	movs	r2, #138	@ 0x8a
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	f04f 30ff 	mov.w	r0, #4294967295
 800cef6:	4770      	bx	lr
 800cef8:	700a      	strb	r2, [r1, #0]
 800cefa:	2001      	movs	r0, #1
 800cefc:	4770      	bx	lr
	...

0800cf00 <fiprintf>:
 800cf00:	b40e      	push	{r1, r2, r3}
 800cf02:	b503      	push	{r0, r1, lr}
 800cf04:	4601      	mov	r1, r0
 800cf06:	ab03      	add	r3, sp, #12
 800cf08:	4805      	ldr	r0, [pc, #20]	@ (800cf20 <fiprintf+0x20>)
 800cf0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf0e:	6800      	ldr	r0, [r0, #0]
 800cf10:	9301      	str	r3, [sp, #4]
 800cf12:	f7ff fd3d 	bl	800c990 <_vfiprintf_r>
 800cf16:	b002      	add	sp, #8
 800cf18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf1c:	b003      	add	sp, #12
 800cf1e:	4770      	bx	lr
 800cf20:	20000018 	.word	0x20000018

0800cf24 <abort>:
 800cf24:	b508      	push	{r3, lr}
 800cf26:	2006      	movs	r0, #6
 800cf28:	f000 f82c 	bl	800cf84 <raise>
 800cf2c:	2001      	movs	r0, #1
 800cf2e:	f7f4 fea7 	bl	8001c80 <_exit>

0800cf32 <_raise_r>:
 800cf32:	291f      	cmp	r1, #31
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4605      	mov	r5, r0
 800cf38:	460c      	mov	r4, r1
 800cf3a:	d904      	bls.n	800cf46 <_raise_r+0x14>
 800cf3c:	2316      	movs	r3, #22
 800cf3e:	6003      	str	r3, [r0, #0]
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295
 800cf44:	bd38      	pop	{r3, r4, r5, pc}
 800cf46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf48:	b112      	cbz	r2, 800cf50 <_raise_r+0x1e>
 800cf4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf4e:	b94b      	cbnz	r3, 800cf64 <_raise_r+0x32>
 800cf50:	4628      	mov	r0, r5
 800cf52:	f000 f831 	bl	800cfb8 <_getpid_r>
 800cf56:	4622      	mov	r2, r4
 800cf58:	4601      	mov	r1, r0
 800cf5a:	4628      	mov	r0, r5
 800cf5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf60:	f000 b818 	b.w	800cf94 <_kill_r>
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d00a      	beq.n	800cf7e <_raise_r+0x4c>
 800cf68:	1c59      	adds	r1, r3, #1
 800cf6a:	d103      	bne.n	800cf74 <_raise_r+0x42>
 800cf6c:	2316      	movs	r3, #22
 800cf6e:	6003      	str	r3, [r0, #0]
 800cf70:	2001      	movs	r0, #1
 800cf72:	e7e7      	b.n	800cf44 <_raise_r+0x12>
 800cf74:	2100      	movs	r1, #0
 800cf76:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	4798      	blx	r3
 800cf7e:	2000      	movs	r0, #0
 800cf80:	e7e0      	b.n	800cf44 <_raise_r+0x12>
	...

0800cf84 <raise>:
 800cf84:	4b02      	ldr	r3, [pc, #8]	@ (800cf90 <raise+0xc>)
 800cf86:	4601      	mov	r1, r0
 800cf88:	6818      	ldr	r0, [r3, #0]
 800cf8a:	f7ff bfd2 	b.w	800cf32 <_raise_r>
 800cf8e:	bf00      	nop
 800cf90:	20000018 	.word	0x20000018

0800cf94 <_kill_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d07      	ldr	r5, [pc, #28]	@ (800cfb4 <_kill_r+0x20>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	602b      	str	r3, [r5, #0]
 800cfa2:	f7f4 fe5d 	bl	8001c60 <_kill>
 800cfa6:	1c43      	adds	r3, r0, #1
 800cfa8:	d102      	bne.n	800cfb0 <_kill_r+0x1c>
 800cfaa:	682b      	ldr	r3, [r5, #0]
 800cfac:	b103      	cbz	r3, 800cfb0 <_kill_r+0x1c>
 800cfae:	6023      	str	r3, [r4, #0]
 800cfb0:	bd38      	pop	{r3, r4, r5, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20007cc4 	.word	0x20007cc4

0800cfb8 <_getpid_r>:
 800cfb8:	f7f4 be4a 	b.w	8001c50 <_getpid>

0800cfbc <roundf>:
 800cfbc:	ee10 0a10 	vmov	r0, s0
 800cfc0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cfc4:	3a7f      	subs	r2, #127	@ 0x7f
 800cfc6:	2a16      	cmp	r2, #22
 800cfc8:	dc15      	bgt.n	800cff6 <roundf+0x3a>
 800cfca:	2a00      	cmp	r2, #0
 800cfcc:	da08      	bge.n	800cfe0 <roundf+0x24>
 800cfce:	3201      	adds	r2, #1
 800cfd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800cfd4:	d101      	bne.n	800cfda <roundf+0x1e>
 800cfd6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800cfda:	ee00 3a10 	vmov	s0, r3
 800cfde:	4770      	bx	lr
 800cfe0:	4907      	ldr	r1, [pc, #28]	@ (800d000 <roundf+0x44>)
 800cfe2:	4111      	asrs	r1, r2
 800cfe4:	4201      	tst	r1, r0
 800cfe6:	d0fa      	beq.n	800cfde <roundf+0x22>
 800cfe8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cfec:	4113      	asrs	r3, r2
 800cfee:	4403      	add	r3, r0
 800cff0:	ea23 0301 	bic.w	r3, r3, r1
 800cff4:	e7f1      	b.n	800cfda <roundf+0x1e>
 800cff6:	2a80      	cmp	r2, #128	@ 0x80
 800cff8:	d1f1      	bne.n	800cfde <roundf+0x22>
 800cffa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cffe:	4770      	bx	lr
 800d000:	007fffff 	.word	0x007fffff

0800d004 <_init>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	bf00      	nop
 800d008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00a:	bc08      	pop	{r3}
 800d00c:	469e      	mov	lr, r3
 800d00e:	4770      	bx	lr

0800d010 <_fini>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	bf00      	nop
 800d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d016:	bc08      	pop	{r3}
 800d018:	469e      	mov	lr, r3
 800d01a:	4770      	bx	lr
